{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","sourceNew":"  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param topLat is the top latitude of the zone.\n   */\n  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoSouthLatitudeZone#GeoSouthLatitudeZone(PlanetModel,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param topLat is the top latitude of the zone.\n   */\n  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param topLat is the top latitude of the zone.\n   */\n  public GeoSouthLatitudeZone(final PlanetModel planetModel, final double topLat) {\n    super(planetModel);\n    this.topLat = topLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    this.cosTopLat = Math.cos(topLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat - Math.PI * 0.5) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}