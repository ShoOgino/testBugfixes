{"path":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if (filter.accept(null, fileName) &&\n          (segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n    \n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          indexFilenameFilter.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          message(\"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream != null) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#refresh(String).mjava","sourceNew":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has hit an error and had to\n   * roll back, to tell us that there may now be\n   * unreferenced files in the filesystem.  So we re-list\n   * the filesystem and delete such files.  If segmentName\n   * is non-null, we will only delete files corresponding to\n   * that segment.\n   */\n  public void refresh(String segmentName) throws IOException {\n    assert locked();\n\n    String[] files = directory.listAll();\n    String segmentPrefix1;\n    String segmentPrefix2;\n    if (segmentName != null) {\n      segmentPrefix1 = segmentName + \".\";\n      segmentPrefix2 = segmentName + \"_\";\n    } else {\n      segmentPrefix1 = null;\n      segmentPrefix2 = null;\n    }\n\n    for(int i=0;i<files.length;i++) {\n      String fileName = files[i];\n      if ((segmentName == null || fileName.startsWith(segmentPrefix1) || fileName.startsWith(segmentPrefix2)) &&\n          IndexFileNameFilter.INSTANCE.accept(null, fileName) &&\n          !refCounts.containsKey(fileName) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        // Unreferenced file, so remove it\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"refresh [prefix=\" + segmentName + \"]: removing newly created unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7b91922b55d15444d554721b352861d028eb8278":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f7719bda090a2ae5bab940a27ba7bb9054b29818","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}