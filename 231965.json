{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        testsFailed = true;\n        uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n        if (savedUncaughtExceptionHandler != null)\n          savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        testsFailed = true;\n        uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n        if (savedUncaughtExceptionHandler != null)\n          savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      final String defCodec = CodecProvider.getDefault().getDefaultFieldCodec();\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defCodec) || \"Memory\".equals(defCodec)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defCodec + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6dd72a05afb74918c3fe80580e68a5098533a2","date":1328055397,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          if (e.getCause() instanceof _TestIgnoredException)\n            e = e.getCause();\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        testsFailed = true;\n        uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n        if (savedUncaughtExceptionHandler != null)\n          savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          if (e.getCause() instanceof _TestIgnoredException)\n            e = e.getCause();\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    seed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : ThreeLongs.fromString(TEST_SEED).l2;\n    random.setSeed(seed);\n    State s = state; // capture test execution state\n    state = State.SETUP; // set the state for subsequent tests\n   \n    savedUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();\n    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n      public void uncaughtException(Thread t, Throwable e) {\n        // org.junit.internal.AssumptionViolatedException in older releases\n        // org.junit.Assume.AssumptionViolatedException in recent ones\n        if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n          String where = \"<unknown>\";\n          for (StackTraceElement elem : e.getStackTrace()) {\n            if ( ! elem.getClassName().startsWith(\"org.junit\")) {\n              where = elem.toString();\n              break;\n            }\n          }\n          if (e.getCause() instanceof _TestIgnoredException)\n            e = e.getCause();\n          System.err.print(\"NOTE: Assume failed at \" + where + \" (ignored):\");\n          if (VERBOSE) {\n            System.err.println();\n            e.printStackTrace(System.err);\n          } else {\n            System.err.print(\" \");\n            System.err.println(e.getMessage());\n          }\n        } else {\n          testsFailed = true;\n          uncaughtExceptions.add(new UncaughtExceptionEntry(t, e));\n          if (savedUncaughtExceptionHandler != null)\n            savedUncaughtExceptionHandler.uncaughtException(t, e);\n        }\n      }\n    });\n\n    savedBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();\n\n    if (!testsFailed) {\n      assertTrue(\"ensure your tearDown() calls super.tearDown()!!!\", (s == State.INITIAL || s == State.TEARDOWN));\n    }\n    \n    if (useNoMemoryExpensiveCodec) {\n      String defFormat = _TestUtil.getPostingsFormat(\"thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt\");\n      // Stupid: assumeFalse in setUp() does not print any information, because\n      // TestWatchman does not watch test during setUp() - getName() is also not defined...\n      // => print info directly and use assume without message:\n      if (\"SimpleText\".equals(defFormat) || \"Memory\".equals(defFormat)) {\n        System.err.println(\"NOTE: A test method in \" + getClass().getSimpleName() + \" was ignored, as it uses too much memory with \" + defFormat + \".\");\n        Assume.assumeTrue(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4d6dd72a05afb74918c3fe80580e68a5098533a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d6dd72a05afb74918c3fe80580e68a5098533a2":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["4d6dd72a05afb74918c3fe80580e68a5098533a2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"4d6dd72a05afb74918c3fe80580e68a5098533a2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}