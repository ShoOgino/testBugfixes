{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0351e5a64998aa87ebea3be11fca66075eb1b0","date":1484206200,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c3e653c3daffe5784c647ee85d0fcb16639d5a","date":1492147999,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig\n        = new UpdateShardHandlerConfig(UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n                                       UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n                                       30000, 30000,\n                                        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY);\n    // universal default metric reporter\n    Map<String,String> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes, null, null);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50942b1c1dd9db22a1348dd0fb05377268b15dd9","date":1535808015,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONS,\n        UpdateShardHandlerConfig.DEFAULT_MAXUPDATECONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(Path).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(Path solrHome) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", solrHome)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["0265144286422ad99682a00904cc2536b79c8535"],"816521ebaad5add9cb96bb88c577394e2938c40b":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["50942b1c1dd9db22a1348dd0fb05377268b15dd9"],"0265144286422ad99682a00904cc2536b79c8535":["e15199583d3635cb940942caed05132dd6c4c7c6"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["e15199583d3635cb940942caed05132dd6c4c7c6","0265144286422ad99682a00904cc2536b79c8535"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["40c3e653c3daffe5784c647ee85d0fcb16639d5a"],"50942b1c1dd9db22a1348dd0fb05377268b15dd9":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["40c3e653c3daffe5784c647ee85d0fcb16639d5a"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0265144286422ad99682a00904cc2536b79c8535":["fc0351e5a64998aa87ebea3be11fca66075eb1b0","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"40c3e653c3daffe5784c647ee85d0fcb16639d5a":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","50942b1c1dd9db22a1348dd0fb05377268b15dd9"],"50942b1c1dd9db22a1348dd0fb05377268b15dd9":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}