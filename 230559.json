{"path":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","commits":[{"id":"2684bcb2a921b6b5b76f64ba986564ab1ef0649d","date":1202988124,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermVectorsFieldOrder().mjava","sourceNew":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorsFieldOrder() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"a\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"b\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"x\", \"some content here\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector[] v = reader.getTermFreqVectors(0);\n    assertEquals(4, v.length);\n    String[] expectedFields = new String[]{\"a\", \"b\", \"c\", \"x\"};\n    int[] expectedPositions = new int[]{1, 2, 0};\n    for(int i=0;i<v.length;i++) {\n      TermPositionVector posVec = (TermPositionVector) v[i];\n      assertEquals(expectedFields[i], posVec.getField());\n      String[] terms = posVec.getTerms();\n      assertEquals(3, terms.length);\n      assertEquals(\"content\", terms[0]);\n      assertEquals(\"here\", terms[1]);\n      assertEquals(\"some\", terms[2]);\n      for(int j=0;j<3;j++) {\n        int[] positions = posVec.getTermPositions(j);\n        assertEquals(1, positions.length);\n        assertEquals(expectedPositions[j], positions[0]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["5350389bf83287111f7760b9e3db3af8e3648474"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}