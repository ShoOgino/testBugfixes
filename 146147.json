{"path":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#getTermsEnum().mjava","commits":[{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#getTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"  public TermsEnum getTermsEnum() {\n    // nocommit who tests this base impl ...\n    // Default impl just uses the existing API; subclasses\n    // can specialize:\n    return new TermsEnum() {\n      private int currentOrd = -1;\n\n      private final BytesRef term = new BytesRef();\n\n      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int low = 0;\n        int high = getValueCount()-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seekExact(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            return SeekStatus.FOUND; // key found\n          }\n        }\n        \n        if (low == getValueCount()) {\n          return SeekStatus.END;\n        } else {\n          seekExact(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < getValueCount();\n        currentOrd = (int) ord;\n        lookupOrd(currentOrd, term);\n      }\n\n      @Override\n      public BytesRef next() throws IOException {\n        currentOrd++;\n        if (currentOrd >= getValueCount()) {\n          return null;\n        }\n        lookupOrd(currentOrd, term);\n        return term;\n      }\n\n      @Override\n      public BytesRef term() throws IOException {\n        return term;\n      }\n\n      @Override\n      public long ord() throws IOException {\n        return currentOrd;\n      }\n\n      @Override\n      public int docFreq() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long totalTermFreq() {\n        return -1;\n      }\n\n      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return BytesRef.getUTF8SortedAsUnicodeComparator();\n      }\n\n      @Override\n      public void seekExact(BytesRef term, TermState state) throws IOException {\n        assert state != null && state instanceof OrdTermState;\n        this.seekExact(((OrdTermState)state).ord);\n      }\n\n      @Override\n      public TermState termState() throws IOException {\n        OrdTermState state = new OrdTermState();\n        state.ord = currentOrd;\n        return state;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f76bda3bb417c7c740bb2d400991e0c2f0c72f8","date":1358250522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#getTermsEnum().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#getTermsEnum().mjava","sourceNew":"  public TermsEnum getTermsEnum() {\n    // nocommit who tests this base impl ...\n    // Default impl just uses the existing API; subclasses\n    // can specialize:\n    return new TermsEnum() {\n      private int currentOrd = -1;\n\n      private final BytesRef term = new BytesRef();\n\n      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int ord = lookupTerm(text, term);\n        if (ord > 0) {\n          currentOrd = ord;\n          term.offset = 0;\n          term.copyBytes(text);\n          return SeekStatus.FOUND;\n        } else {\n          currentOrd = -ord-1;\n          if (currentOrd == getValueCount()) {\n            return SeekStatus.END;\n          } else {\n            // nocommit hmm can we avoid this \"extra\" lookup?:\n            lookupOrd(currentOrd, term);\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < getValueCount();\n        currentOrd = (int) ord;\n        lookupOrd(currentOrd, term);\n      }\n\n      @Override\n      public BytesRef next() throws IOException {\n        currentOrd++;\n        if (currentOrd >= getValueCount()) {\n          return null;\n        }\n        lookupOrd(currentOrd, term);\n        return term;\n      }\n\n      @Override\n      public BytesRef term() throws IOException {\n        return term;\n      }\n\n      @Override\n      public long ord() throws IOException {\n        return currentOrd;\n      }\n\n      @Override\n      public int docFreq() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long totalTermFreq() {\n        return -1;\n      }\n\n      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return BytesRef.getUTF8SortedAsUnicodeComparator();\n      }\n\n      @Override\n      public void seekExact(BytesRef term, TermState state) throws IOException {\n        assert state != null && state instanceof OrdTermState;\n        this.seekExact(((OrdTermState)state).ord);\n      }\n\n      @Override\n      public TermState termState() throws IOException {\n        OrdTermState state = new OrdTermState();\n        state.ord = currentOrd;\n        return state;\n      }\n    };\n  }\n\n","sourceOld":"  public TermsEnum getTermsEnum() {\n    // nocommit who tests this base impl ...\n    // Default impl just uses the existing API; subclasses\n    // can specialize:\n    return new TermsEnum() {\n      private int currentOrd = -1;\n\n      private final BytesRef term = new BytesRef();\n\n      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int low = 0;\n        int high = getValueCount()-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seekExact(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            return SeekStatus.FOUND; // key found\n          }\n        }\n        \n        if (low == getValueCount()) {\n          return SeekStatus.END;\n        } else {\n          seekExact(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < getValueCount();\n        currentOrd = (int) ord;\n        lookupOrd(currentOrd, term);\n      }\n\n      @Override\n      public BytesRef next() throws IOException {\n        currentOrd++;\n        if (currentOrd >= getValueCount()) {\n          return null;\n        }\n        lookupOrd(currentOrd, term);\n        return term;\n      }\n\n      @Override\n      public BytesRef term() throws IOException {\n        return term;\n      }\n\n      @Override\n      public long ord() throws IOException {\n        return currentOrd;\n      }\n\n      @Override\n      public int docFreq() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long totalTermFreq() {\n        return -1;\n      }\n\n      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return BytesRef.getUTF8SortedAsUnicodeComparator();\n      }\n\n      @Override\n      public void seekExact(BytesRef term, TermState state) throws IOException {\n        assert state != null && state instanceof OrdTermState;\n        this.seekExact(((OrdTermState)state).ord);\n      }\n\n      @Override\n      public TermState termState() throws IOException {\n        OrdTermState state = new OrdTermState();\n        state.ord = currentOrd;\n        return state;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a","date":1358789155,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#getTermsEnum().mjava","sourceNew":null,"sourceOld":"  public TermsEnum getTermsEnum() {\n    // nocommit who tests this base impl ...\n    // Default impl just uses the existing API; subclasses\n    // can specialize:\n    return new TermsEnum() {\n      private int currentOrd = -1;\n\n      private final BytesRef term = new BytesRef();\n\n      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int ord = lookupTerm(text, term);\n        if (ord > 0) {\n          currentOrd = ord;\n          term.offset = 0;\n          term.copyBytes(text);\n          return SeekStatus.FOUND;\n        } else {\n          currentOrd = -ord-1;\n          if (currentOrd == getValueCount()) {\n            return SeekStatus.END;\n          } else {\n            // nocommit hmm can we avoid this \"extra\" lookup?:\n            lookupOrd(currentOrd, term);\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n      }\n\n      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < getValueCount();\n        currentOrd = (int) ord;\n        lookupOrd(currentOrd, term);\n      }\n\n      @Override\n      public BytesRef next() throws IOException {\n        currentOrd++;\n        if (currentOrd >= getValueCount()) {\n          return null;\n        }\n        lookupOrd(currentOrd, term);\n        return term;\n      }\n\n      @Override\n      public BytesRef term() throws IOException {\n        return term;\n      }\n\n      @Override\n      public long ord() throws IOException {\n        return currentOrd;\n      }\n\n      @Override\n      public int docFreq() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long totalTermFreq() {\n        return -1;\n      }\n\n      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return BytesRef.getUTF8SortedAsUnicodeComparator();\n      }\n\n      @Override\n      public void seekExact(BytesRef term, TermState state) throws IOException {\n        assert state != null && state instanceof OrdTermState;\n        this.seekExact(((OrdTermState)state).ord);\n      }\n\n      @Override\n      public TermState termState() throws IOException {\n        OrdTermState state = new OrdTermState();\n        state.ord = currentOrd;\n        return state;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f76bda3bb417c7c740bb2d400991e0c2f0c72f8":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":["4f76bda3bb417c7c740bb2d400991e0c2f0c72f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f76bda3bb417c7c740bb2d400991e0c2f0c72f8":["49bbfc33f80659ba9aa9d301edaae82dd4e01b5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d7e5f3aa5935964617824d1f9b2599ddb334464","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["4f76bda3bb417c7c740bb2d400991e0c2f0c72f8"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["49bbfc33f80659ba9aa9d301edaae82dd4e01b5a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}