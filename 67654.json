{"path":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#testNoPayload().mjava","commits":[{"id":"4c94837f36779069fd9b6b70e462b57515473d88","date":1249677298,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#testNoPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoPayload() throws Exception {\n    BoostingFunctionTermQuery q1 = new BoostingFunctionTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    BoostingFunctionTermQuery q2 = new BoostingFunctionTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    BoostingFunctionTermQuery q1 = new BoostingFunctionTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    BoostingFunctionTermQuery q2 = new BoostingFunctionTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c94837f36779069fd9b6b70e462b57515473d88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["4c94837f36779069fd9b6b70e462b57515473d88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"4c94837f36779069fd9b6b70e462b57515473d88":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c94837f36779069fd9b6b70e462b57515473d88"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}