{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de2ca603c5d523ef3d09327af40bacce482819eb","date":1373491166,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQEx(String,SolrQueryRequest,SolrException.ErrorCode).mjava","sourceNew":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","sourceOld":"  public static void assertQEx(String message, SolrQueryRequest req, SolrException.ErrorCode code ) {\n    try {\n      ignoreException(\".\");\n      h.query(req);\n      fail( message );\n    } catch (SolrException e) {\n      assertEquals( code.code, e.code() );\n    } catch (Exception e2) {\n      throw new RuntimeException(\"Exception during query\", e2);\n    } finally {\n      unIgnoreException(\".\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c26f00b574427b55127e869b935845554afde1fa","de2ca603c5d523ef3d09327af40bacce482819eb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["de2ca603c5d523ef3d09327af40bacce482819eb"],"de2ca603c5d523ef3d09327af40bacce482819eb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","de2ca603c5d523ef3d09327af40bacce482819eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de2ca603c5d523ef3d09327af40bacce482819eb":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}