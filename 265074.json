{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new NumericDocValuesField(\"dv1\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 2));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv1\"), false);\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv2\"), false);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8914a0d123cdba0648288fc001c35ec78dfe698a","date":1499266234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new NumericDocValuesField(\"dv1\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 2));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new DocValuesFieldExistsQuery(\"dv1\"), false);\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new DocValuesFieldExistsQuery(\"dv2\"), false);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new NumericDocValuesField(\"dv1\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 2));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv1\"), false);\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv2\"), false);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueQuery#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new NumericDocValuesField(\"dv1\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 2));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new DocValuesFieldExistsQuery(\"dv1\"), false);\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new DocValuesFieldExistsQuery(\"dv2\"), false);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new NumericDocValuesField(\"dv1\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 1));\n          doc.add(new SortedNumericDocValuesField(\"dv2\", 2));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv1\"), false);\n      assertSameMatches(searcher, new TermQuery(new Term(\"has_value\", \"yes\")), new FieldValueQuery(\"dv2\"), false);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["484e80062d7ab2729bc82f0311d6a97dd913961a","8914a0d123cdba0648288fc001c35ec78dfe698a"],"8914a0d123cdba0648288fc001c35ec78dfe698a":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8914a0d123cdba0648288fc001c35ec78dfe698a"]},"commit2Childs":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["e73d8d559120669b47658108d818b637df5456ea","8914a0d123cdba0648288fc001c35ec78dfe698a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"e73d8d559120669b47658108d818b637df5456ea":[],"8914a0d123cdba0648288fc001c35ec78dfe698a":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}