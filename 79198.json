{"path":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,IndexOptions,DocsEnum,FixedBitSet).mjava","commits":[{"id":"6de04d4fe93277012dfab5984e08a38de091bcd1","date":1359464792,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,IndexOptions,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, IndexOptions indexOptions, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,IndexOptions,DocsEnum,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, IndexOptions indexOptions, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,IndexOptions,DocsEnum,FixedBitSet).mjava","sourceNew":null,"sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, IndexOptions indexOptions, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, -1);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload = postingsEnum.getPayload();\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, indexOptions == IndexOptions.DOCS_ONLY ? -1 : totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6de04d4fe93277012dfab5984e08a38de091bcd1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6de04d4fe93277012dfab5984e08a38de091bcd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","6de04d4fe93277012dfab5984e08a38de091bcd1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6de04d4fe93277012dfab5984e08a38de091bcd1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}