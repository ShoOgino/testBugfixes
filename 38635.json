{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","commits":[{"id":"378fbd2626d3f584f8146e25acf62ee817361580","date":1367266329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      drillDownCollector.collect(doc);\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          continue;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  sub: \" + subDoc);\n        if (subDoc != doc) {\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      if (drillDownCollector != null) {\n        drillDownCollector.collect(doc);\n      }\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      boolean found = false;\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  i=\" + i + \" sub: \" + subDoc);\n        if (subDoc != doc) {\n          //System.out.println(\"  +ds[\" + i + \"]\");\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n      }\n      assert found;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      drillDownCollector.collect(doc);\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          continue;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  sub: \" + subDoc);\n        if (subDoc != doc) {\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":["378fbd2626d3f584f8146e25acf62ee817361580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      if (drillDownCollector != null) {\n        drillDownCollector.collect(doc);\n      }\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      boolean found = false;\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  i=\" + i + \" sub: \" + subDoc);\n        if (subDoc != doc) {\n          //System.out.println(\"  +ds[\" + i + \"]\");\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n      }\n      assert found;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSidewaysCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      if (drillDownCollector != null) {\n        drillDownCollector.collect(doc);\n      }\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      boolean found = false;\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  i=\" + i + \" sub: \" + subDoc);\n        if (subDoc != doc) {\n          //System.out.println(\"  +ds[\" + i + \"]\");\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n      }\n      assert found;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"collect doc=\" + doc + \" main.freq=\" + mainScorer.freq() + \" main.doc=\" + mainScorer.docID() + \" exactCount=\" + exactCount);\n      \n    if (mainScorer == null) {\n      // This segment did not have any docs with any\n      // drill-down field & value:\n      return;\n    }\n\n    if (mainScorer.freq() == exactCount) {\n      // All sub-clauses from the drill-down filters\n      // matched, so this is a \"real\" hit, so we first\n      // collect in both the hitCollector and the\n      // drillDown collector:\n      //System.out.println(\"  hit \" + drillDownCollector);\n      hitCollector.collect(doc);\n      if (drillDownCollector != null) {\n        drillDownCollector.collect(doc);\n      }\n\n      // Also collect across all drill-sideways counts so\n      // we \"merge in\" drill-down counts for this\n      // dimension.\n      for(int i=0;i<subScorers.length;i++) {\n        // This cannot be null, because it was a hit,\n        // meaning all drill-down dims matched, so all\n        // dims must have non-null scorers:\n        assert subScorers[i] != null;\n        int subDoc = subScorers[i].docID();\n        assert subDoc == doc;\n        drillSidewaysCollectors[i].collect(doc);\n      }\n\n    } else {\n      boolean found = false;\n      for(int i=0;i<subScorers.length;i++) {\n        if (subScorers[i] == null) {\n          // This segment did not have any docs with this\n          // drill-down field & value:\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n        int subDoc = subScorers[i].docID();\n        //System.out.println(\"  i=\" + i + \" sub: \" + subDoc);\n        if (subDoc != doc) {\n          //System.out.println(\"  +ds[\" + i + \"]\");\n          assert subDoc > doc: \"subDoc=\" + subDoc + \" doc=\" + doc;\n          drillSidewaysCollectors[i].collect(doc);\n          assert allMatchesFrom(i+1, doc);\n          found = true;\n          break;\n        }\n      }\n      assert found;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"416910ae9ffe752ba5b6334f75d6c36e019626cc":["378fbd2626d3f584f8146e25acf62ee817361580"],"378fbd2626d3f584f8146e25acf62ee817361580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["416910ae9ffe752ba5b6334f75d6c36e019626cc","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"416910ae9ffe752ba5b6334f75d6c36e019626cc":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"378fbd2626d3f584f8146e25acf62ee817361580":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["378fbd2626d3f584f8146e25acf62ee817361580"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}