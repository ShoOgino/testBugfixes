{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","commits":[{"id":"a37a7b0a78003a4b0171c6c70384c2a70c686670","date":1289859534,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        \n        assert payloadLength != -1;\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n        //System.out.println(\"StandardR.D&PE skipPos\");\n      }\n\n      // read next position\n      if (payloadPending && payloadLength > 0) {\n        // payload wasn't retrieved for last position\n        proxIn.seek(proxIn.getFilePointer()+payloadLength);\n      }\n\n      final int code = proxIn.readVInt();\n      if ((code & 1) != 0) {\n        // new payload length\n        payloadLength = proxIn.readVInt();\n        assert payloadLength >= 0;\n      }\n      assert payloadLength != -1;\n          \n      payloadPending = true;\n      position += code >>> 1;\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      //System.out.println(\"StandardR.D&PE nextPos   return pos=\" + position);\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a37a7b0a78003a4b0171c6c70384c2a70c686670":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a37a7b0a78003a4b0171c6c70384c2a70c686670"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a37a7b0a78003a4b0171c6c70384c2a70c686670":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a37a7b0a78003a4b0171c6c70384c2a70c686670","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}