{"path":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","commits":[{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all SegmentInfos.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}