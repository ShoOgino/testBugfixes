{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n       @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n       @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n       @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) throws IOException {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) throws IOException {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) throws IOException {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) throws IOException {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return func(doc, valsArr);\n      }\n      public boolean exists(int doc) throws IOException {\n        return MultiFloatFunction.this.exists(doc, valsArr);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return MultiFunction.toString(name(), valsArr, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c9fb5f46e264daf5ba3860defe623a89d202dd87","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a701a7aab388afa1412a3dc23b4115c321f478c4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a701a7aab388afa1412a3dc23b4115c321f478c4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}