{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pick next event from async queue and call {@link #audit(AuditEvent)}\n   */\n  @Override\n  public void run() {\n    assert(async);\n    while (!closed && !Thread.currentThread().isInterrupted()) {\n      try {\n        AuditEvent event = queue.poll(1000, TimeUnit.MILLISECONDS);\n        if (event == null) continue;\n        if (event.getDate() != null) {\n          queuedTime.update(new Date().getTime() - event.getDate().getTime(), TimeUnit.MILLISECONDS);\n        }\n        Timer.Context timer = requestTimes.time();\n        audit(event);\n        numLogged.mark();\n        totalTime.inc(timer.stop());\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting for next audit log event\");\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        log.warn(\"Exception when attempting to audit log asynchronously\", ex);\n        numErrors.mark();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8","date":1554812752,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","sourceNew":"  /**\n   * Pick next event from async queue and call {@link #audit(AuditEvent)}\n   */\n  @Override\n  public void run() {\n    assert(async);\n    while (!closed && !Thread.currentThread().isInterrupted()) {\n      try {\n        AuditEvent event = queue.poll(1000, TimeUnit.MILLISECONDS);\n        if (event == null) continue;\n        if (event.getDate() != null) {\n          queuedTime.update(new Date().getTime() - event.getDate().getTime(), TimeUnit.MILLISECONDS);\n        }\n        Timer.Context timer = requestTimes.time();\n        audit(event);\n        numLogged.mark();\n        totalTime.inc(timer.stop());\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting for next audit log event\");\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        log.error(\"Exception when attempting to audit log asynchronously\", ex);\n        numErrors.mark();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pick next event from async queue and call {@link #audit(AuditEvent)}\n   */\n  @Override\n  public void run() {\n    assert(async);\n    while (!closed && !Thread.currentThread().isInterrupted()) {\n      try {\n        AuditEvent event = queue.poll(1000, TimeUnit.MILLISECONDS);\n        if (event == null) continue;\n        if (event.getDate() != null) {\n          queuedTime.update(new Date().getTime() - event.getDate().getTime(), TimeUnit.MILLISECONDS);\n        }\n        Timer.Context timer = requestTimes.time();\n        audit(event);\n        numLogged.mark();\n        totalTime.inc(timer.stop());\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting for next audit log event\");\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        log.warn(\"Exception when attempting to audit log asynchronously\", ex);\n        numErrors.mark();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4212f4601c03a66e0b324597a3bfe0f51b9f5b65","date":1556832376,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#run().mjava","sourceNew":"  /**\n   * Pick next event from async queue and call {@link #audit(AuditEvent)}\n   */\n  @Override\n  public void run() {\n    assert(async);\n    while (!closed && !Thread.currentThread().isInterrupted()) {\n      try {\n        AuditEvent event = queue.poll(1000, TimeUnit.MILLISECONDS);\n        auditsInFlight.incrementAndGet();\n        if (event == null) continue;\n        if (event.getDate() != null) {\n          queuedTime.update(new Date().getTime() - event.getDate().getTime(), TimeUnit.MILLISECONDS);\n        }\n        Timer.Context timer = requestTimes.time();\n        audit(event);\n        numLogged.mark();\n        totalTime.inc(timer.stop());\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting for next audit log event\");\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        log.error(\"Exception when attempting to audit log asynchronously\", ex);\n        numErrors.mark();\n      } finally {\n        auditsInFlight.decrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pick next event from async queue and call {@link #audit(AuditEvent)}\n   */\n  @Override\n  public void run() {\n    assert(async);\n    while (!closed && !Thread.currentThread().isInterrupted()) {\n      try {\n        AuditEvent event = queue.poll(1000, TimeUnit.MILLISECONDS);\n        if (event == null) continue;\n        if (event.getDate() != null) {\n          queuedTime.update(new Date().getTime() - event.getDate().getTime(), TimeUnit.MILLISECONDS);\n        }\n        Timer.Context timer = requestTimes.time();\n        audit(event);\n        numLogged.mark();\n        totalTime.inc(timer.stop());\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting for next audit log event\");\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        log.error(\"Exception when attempting to audit log asynchronously\", ex);\n        numErrors.mark();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"]},"commit2Childs":{"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"144f2f24da0b8fe43f748fcb4c0c59cf52f9c2d8":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}