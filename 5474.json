{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","commits":[{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.getFilePointer()));\n    freqNormOut.writeTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84SkipWriter#writeSkipData(int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeSkipData(int,DataOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, DataOutput skipBuffer) throws IOException {\n\n    int delta = curDoc - lastSkipDoc[level];\n\n    skipBuffer.writeVInt(delta);\n    lastSkipDoc[level] = curDoc;\n\n    skipBuffer.writeVLong(curDocPointer - lastSkipDocPointer[level]);\n    lastSkipDocPointer[level] = curDocPointer;\n\n    if (fieldHasPositions) {\n\n      skipBuffer.writeVLong(curPosPointer - lastSkipPosPointer[level]);\n      lastSkipPosPointer[level] = curPosPointer;\n      skipBuffer.writeVInt(curPosBufferUpto);\n\n      if (fieldHasPayloads) {\n        skipBuffer.writeVInt(curPayloadByteUpto);\n      }\n\n      if (fieldHasOffsets || fieldHasPayloads) {\n        skipBuffer.writeVLong(curPayPointer - lastSkipPayPointer[level]);\n        lastSkipPayPointer[level] = curPayPointer;\n      }\n    }\n\n    CompetitiveImpactAccumulator competitiveFreqNorms = curCompetitiveFreqNorms[level];\n    assert competitiveFreqNorms.getCompetitiveFreqNormPairs().size() > 0;\n    if (level + 1 < numberOfSkipLevels) {\n      curCompetitiveFreqNorms[level + 1].addAll(competitiveFreqNorms);\n    }\n    writeImpacts(competitiveFreqNorms, freqNormOut);\n    skipBuffer.writeVInt(Math.toIntExact(freqNormOut.size()));\n    freqNormOut.copyTo(skipBuffer);\n    freqNormOut.reset();\n    competitiveFreqNorms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}