{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","sourceOld":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs few searches in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(4);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      int numThreads = random.nextInt(3) + 2; // 2-4\n      int sleepMillis = random.nextBoolean() ? -1 : random.nextInt(10) + 1 /*1-10*/;\n      int cacheSize = random.nextInt(4); // 0-3\n      doTestGeneralSynchronization(numThreads, sleepMillis, cacheSize);\n    }\n  }\n\n","sourceOld":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs few searches in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(4);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      int numThreads = random.nextInt(3) + 2; // 2-4\n      int sleepMillis = random.nextBoolean() ? -1 : random.nextInt(10) + 1 /*1-10*/;\n      int cacheSize = random.nextInt(4); // 0-3\n      doTestGeneralSynchronization(numThreads, sleepMillis, cacheSize);\n    }\n  }\n\n","sourceOld":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs few searches in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(4);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      int numThreads = random.nextInt(3) + 2; // 2-4\n      int sleepMillis = random.nextBoolean() ? -1 : random.nextInt(10) + 1 /*1-10*/;\n      int cacheSize = random.nextInt(4); // 0-3\n      doTestGeneralSynchronization(numThreads, sleepMillis, cacheSize);\n    }\n  }\n\n","sourceOld":"  /** runs few searches in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(4);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      int numThreads = random.nextInt(3) + 2; // 2-4\n      int sleepMillis = random.nextBoolean() ? -1 : random.nextInt(10) + 1 /*1-10*/;\n      int cacheSize = random.nextInt(4); // 0-3\n      doTestGeneralSynchronization(numThreads, sleepMillis, cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["607428da722dcb3e86bbd11c63de8986e6275c36","61d5f95d14e5b9b046998c51e16709a398c15226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}