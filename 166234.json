{"path":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     synchronized(this) {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n\n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f","date":1163033034,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     synchronized(this) {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n\n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException(400,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb21c97cb62d6a55701323446620b2c7b4bdce97","date":1183447892,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aa57ace203f336e00a38867cb7e815ca4e1572e","date":1190088278,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (SolrCore.log.isLoggable(Level.FINE)) {\n          SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       // we need to do much of the commit logic (mainly doing queued\n       // deletes since deleteByQuery can throw off our counts.\n       doDeletions();\n       \n       closeWriter();\n       openSearcher();\n\n       // if we want to count the number of docs that were deleted, then\n       // we need a new instance of the DeleteHitCollector\n       final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n       searcher.search(q, null, deleter);\n       totDeleted = deleter.deleted;\n     } finally {\n       iwCommit.unlock();\n     }\n\n     if (SolrCore.log.isLoggable(Level.FINE)) {\n       SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n     }\n     numDocsDeleted.getAndAdd(totDeleted);\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(\"[\"+core.getName()+\"] docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (SolrCore.log.isLoggable(Level.FINE)) {\n          SolrCore.log.fine(\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(\"[\"+core.getName()+\"] docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae","date":1210454197,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         // we need to do much of the commit logic (mainly doing queued\n         // deletes since deleteByQuery can throw off our counts.\n         doDeletions();\n\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76c0fcce783c57cd714d5df2d0d57f539cfb7730","date":1212163809,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        closeSearcher();\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n         closeWriter();\n         openSearcher();\n\n         // if we want to count the number of docs that were deleted, then\n         // we need a new instance of the DeleteHitCollector\n         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n         searcher.search(q, null, deleter);\n         totDeleted = deleter.deleted;\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n   }\n\n","bugFix":null,"bugIntro":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8eef26ced666b6845d2393643b293199ffc3baa","date":1214580524,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        closeSearcher();\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     int totDeleted = 0;\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        closeSearcher();\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n      if (!delAll) {\n        if (core.log.isLoggable(Level.FINE)) {\n          core.log.fine(core.getLogId()+\"docs deleted by query:\" + totDeleted);\n        }\n        numDocsDeleted.getAndAdd(totDeleted);\n      }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd0695d017a09d8819e247ede79b526a0a3bd15f","date":1222958604,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        closeSearcher();\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1","date":1232905968,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);         \n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":["76c0fcce783c57cd714d5df2d0d57f539cfb7730"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","sourceOld":"  // why not return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine the num...\n   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n     deleteByQueryCommands.incrementAndGet();\n     deleteByQueryCommandsCumulative.incrementAndGet();\n\n     if (!cmd.fromPending && !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n     }\n     if (!cmd.fromPending || !cmd.fromCommitted) {\n       numErrors.incrementAndGet();\n       numErrorsCumulative.incrementAndGet();\n       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n     }\n\n    boolean madeIt=false;\n    boolean delAll=false;\n    try {\n     Query q = QueryParsing.parseQuery(cmd.query, schema);\n     delAll = MatchAllDocsQuery.class == q.getClass();\n\n     iwCommit.lock();\n     try {\n       if (delAll) {\n         deleteAll();\n       } else {\n        openWriter();\n        writer.deleteDocuments(q);\n       }\n     } finally {\n       iwCommit.unlock();\n     }\n\n     madeIt=true;\n\n     if( tracker.timeUpperBound > 0 ) {\n       tracker.scheduleCommitWithin( tracker.timeUpperBound );\n     }\n    } finally {\n      if (!madeIt) {\n        numErrors.incrementAndGet();\n        numErrorsCumulative.incrementAndGet();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["cb21c97cb62d6a55701323446620b2c7b4bdce97"],"e8eef26ced666b6845d2393643b293199ffc3baa":["76c0fcce783c57cd714d5df2d0d57f539cfb7730"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"76c0fcce783c57cd714d5df2d0d57f539cfb7730":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"bd0695d017a09d8819e247ede79b526a0a3bd15f":["e8eef26ced666b6845d2393643b293199ffc3baa"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["4c065faf385411ac4ff02bdc763de7dfd8aa1c9f"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1":["bd0695d017a09d8819e247ede79b526a0a3bd15f"],"cb21c97cb62d6a55701323446620b2c7b4bdce97":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"e8eef26ced666b6845d2393643b293199ffc3baa":["bd0695d017a09d8819e247ede79b526a0a3bd15f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"76c0fcce783c57cd714d5df2d0d57f539cfb7730":["e8eef26ced666b6845d2393643b293199ffc3baa"],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["76c0fcce783c57cd714d5df2d0d57f539cfb7730"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"bd0695d017a09d8819e247ede79b526a0a3bd15f":["114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["cb21c97cb62d6a55701323446620b2c7b4bdce97"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["4c065faf385411ac4ff02bdc763de7dfd8aa1c9f"],"cb21c97cb62d6a55701323446620b2c7b4bdce97":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"114670ecb9adf4ed6e7a80d6f0ce64fec0c91fb1":["ad94625fb8d088209f46650c8097196fec67f00c"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}