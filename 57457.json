{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","commits":[{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    return Double.compare(bottom, distance(doc));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9311729585934167418ba9c06524f91f08bacdbe","date":1457749207,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, missingValue);\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      int latitudeBits = (int)(encoded >> 32);\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      boolean outsideBox = ((latitudeBits < minLat || longitudeBits < minLon || latitudeBits > maxLat || longitudeBits > maxLon) &&\n            (crossesDateLine == false || latitudeBits < minLat2 || longitudeBits < minLon2 || latitudeBits > maxLat2 || longitudeBits > maxLon2));\n      // only compute actual distance if its inside \"competitive bounding box\"\n      if (outsideBox == false) {\n        double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n        double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n        minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return Double.compare(bottom, minValue);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    return Double.compare(bottom, distance(doc));\n  }\n\n","bugFix":null,"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, missingValue);\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      int latitudeBits = (int)(encoded >> 32);\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      boolean outsideBox = ((latitudeBits < minLat || longitudeBits < minLon || latitudeBits > maxLat || longitudeBits > maxLon) &&\n            (crossesDateLine == false || latitudeBits < minLat2 || longitudeBits < minLon2 || latitudeBits > maxLat2 || longitudeBits > maxLon2));\n      // only compute actual distance if its inside \"competitive bounding box\"\n      if (outsideBox == false) {\n        double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n        double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n        minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return Double.compare(bottom, minValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, missingValue);\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      int latitudeBits = (int)(encoded >> 32);\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      boolean outsideBox = ((latitudeBits < minLat || longitudeBits < minLon || latitudeBits > maxLat || longitudeBits > maxLon) &&\n            (crossesDateLine == false || latitudeBits < minLat2 || longitudeBits < minLon2 || latitudeBits > maxLat2 || longitudeBits > maxLon2));\n      // only compute actual distance if its inside \"competitive bounding box\"\n      if (outsideBox == false) {\n        double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n        double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n        minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return Double.compare(bottom, minValue);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, missingValue);\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      int latitudeBits = (int)(encoded >> 32);\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      boolean outsideBox = ((latitudeBits < minLat || longitudeBits < minLon || latitudeBits > maxLat || longitudeBits > maxLon) &&\n            (crossesDateLine == false || latitudeBits < minLat2 || longitudeBits < minLon2 || latitudeBits > maxLat2 || longitudeBits > maxLon2));\n      // only compute actual distance if its inside \"competitive bounding box\"\n      if (outsideBox == false) {\n        double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n        double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n        minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return Double.compare(bottom, minValue);\n  }\n\n","bugFix":null,"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n      double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, haversin1(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, missingValue);\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      int latitudeBits = (int)(encoded >> 32);\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      boolean outsideBox = ((latitudeBits < minLat || longitudeBits < minLon || latitudeBits > maxLat || longitudeBits > maxLon) &&\n            (crossesDateLine == false || latitudeBits < minLat2 || longitudeBits < minLon2 || latitudeBits > maxLat2 || longitudeBits > maxLon2));\n      // only compute actual distance if its inside \"competitive bounding box\"\n      if (outsideBox == false) {\n        double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n        double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n        minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return Double.compare(bottom, minValue);\n  }\n\n","bugFix":["9311729585934167418ba9c06524f91f08bacdbe","d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n      double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n      double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, haversin1(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n      double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = LatLonPoint.decodeLatitude(latitudeBits);\n      double docLongitude = LatLonPoint.decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    setValues();\n\n    int numValues = currentDocs.docValueCount();\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentValues[i];\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    setValues();\n\n    int numValues = currentDocs.docValueCount();\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentValues[i];\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    setValues();\n\n    int numValues = currentDocs.docValueCount();\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentValues[i];\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    setValues();\n\n    int numValues = currentDocs.docValueCount();\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentValues[i];\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottom, Double.POSITIVE_INFINITY);\n    }\n\n    setValues();\n\n    int numValues = currentDocs.docValueCount();\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentValues[i];\n\n      // test bounding box\n      int latitudeBits = (int)(encoded >> 32);\n      if (latitudeBits < minLat || latitudeBits > maxLat) {\n        continue;\n      }\n      int longitudeBits = (int)(encoded & 0xFFFFFFFF);\n      if ((longitudeBits < minLon || longitudeBits > maxLon) && (longitudeBits < minLon2)) {\n        continue;\n      }\n\n      // only compute actual distance if its inside \"competitive bounding box\"\n      double docLatitude = decodeLatitude(latitudeBits);\n      double docLongitude = decodeLongitude(longitudeBits);\n      cmp = Math.max(cmp, Double.compare(bottom, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude)));\n      // once we compete in the PQ, no need to continue.\n      if (cmp > 0) {\n        return cmp;\n      }\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["575856a9f007b9c35d0113c9e18151b554709ef2"],"9311729585934167418ba9c06524f91f08bacdbe":["54f531dff997ea7763360cb59f5ccadc6811b519"],"575856a9f007b9c35d0113c9e18151b554709ef2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9311729585934167418ba9c06524f91f08bacdbe"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09f15823cf5eb6e807005579e875e117d8598f95","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["09f15823cf5eb6e807005579e875e117d8598f95","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec60431d008a694828dacb4bc3cda775b6c44a9f","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"9311729585934167418ba9c06524f91f08bacdbe":["575856a9f007b9c35d0113c9e18151b554709ef2"],"575856a9f007b9c35d0113c9e18151b554709ef2":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"54f531dff997ea7763360cb59f5ccadc6811b519":["9311729585934167418ba9c06524f91f08bacdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["575856a9f007b9c35d0113c9e18151b554709ef2","54f531dff997ea7763360cb59f5ccadc6811b519"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","88b0212386fe531136816706dc37dc49b9dbf7dc"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"09f15823cf5eb6e807005579e875e117d8598f95":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}