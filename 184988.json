{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","commits":[{"id":"2876300d536c5dc264af3b279464bb01bd71f3a0","date":1548228350,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","pathOld":"/dev/null","sourceNew":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Polygon2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","pathOld":"/dev/null","sourceNew":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Polygon2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","sourceNew":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Component2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","sourceOld":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Polygon2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","sourceNew":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Component2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","sourceOld":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Polygon2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangleContainsPolygon().mjava","sourceNew":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Component2D impl = Polygon2D.create(polygon);\n    assertTrue(impl.intersectsTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","sourceOld":"  public void testRelateTriangleContainsPolygon() {\n    Polygon polygon = new Polygon(new double[]{0, 0, 1, 1, 0}, new double[]{0, 1, 1, 0, 0});\n    Component2D impl = Polygon2D.create(polygon);\n    assertEquals(Relation.CELL_CROSSES_QUERY, impl.relateTriangle(-10 , -1, 2, -1, 10, 10));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["2876300d536c5dc264af3b279464bb01bd71f3a0"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["2876300d536c5dc264af3b279464bb01bd71f3a0","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2876300d536c5dc264af3b279464bb01bd71f3a0"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["c568a1e2a5125c2245150eebb030a81baa158b31","b0b597c65628ca9e73913a07e81691f8229bae35"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2876300d536c5dc264af3b279464bb01bd71f3a0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}