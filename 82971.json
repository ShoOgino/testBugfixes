{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a comparison mapping function, comparing two analytics value (streams) of the same type.\n   * \n   * @param name name of the function\n   * @param comp function to find the result of a comparison\n   * @param params the parameters to compare\n   * @return an instance of the requested comparison function using the given parameters\n   */\n  public static BooleanValueStream createComparisonFunction(String name, CompResultFunction comp, AnalyticsValueStream... params) {\n    if (params.length != 2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 2 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream paramA = params[0];\n    AnalyticsValueStream paramB = params[1];\n    if (paramA instanceof DoubleValueStream && paramB instanceof DoubleValueStream) {\n      if (paramA instanceof DoubleValue) {\n        if (paramB instanceof DoubleValue) {\n          return new CompareDoubleValueFunction(name,(DoubleValue)paramA,(DoubleValue)paramB,comp);\n        }\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramA,(DoubleValueStream)paramB,comp);\n      }\n      if (paramB instanceof DoubleValue) {\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramB,(DoubleValueStream)paramA,reverse(comp));\n      }\n    } else if (paramA instanceof DateValueStream && paramB instanceof DateValueStream) {\n      if (paramA instanceof DateValue) {\n        if (paramB instanceof DateValue) {\n          return new CompareDateValueFunction(name,(DateValue)paramA,(DateValue)paramB,comp);\n        }\n        return new CompareDateStreamFunction(name,(DateValue)paramA,(DateValueStream)paramB,comp);\n      }\n      if (paramB instanceof DateValue) {\n        return new CompareDateStreamFunction(name,(DateValue)paramB,(DateValueStream)paramA,reverse(comp));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires comparable (numeric or date) parameters.\");\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that at least 1 parameter be single-valued.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","sourceNew":"  /**\n   * Create a comparison mapping function, comparing two analytics value (streams) of the same type.\n   *\n   * @param name name of the function\n   * @param comp function to find the result of a comparison\n   * @param params the parameters to compare\n   * @return an instance of the requested comparison function using the given parameters\n   */\n  public static BooleanValueStream createComparisonFunction(String name, CompResultFunction comp, AnalyticsValueStream... params) {\n    if (params.length != 2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 2 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream paramA = params[0];\n    AnalyticsValueStream paramB = params[1];\n    if (paramA instanceof DoubleValueStream && paramB instanceof DoubleValueStream) {\n      if (paramA instanceof DoubleValue) {\n        if (paramB instanceof DoubleValue) {\n          return new CompareDoubleValueFunction(name,(DoubleValue)paramA,(DoubleValue)paramB,comp);\n        }\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramA,(DoubleValueStream)paramB,comp);\n      }\n      if (paramB instanceof DoubleValue) {\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramB,(DoubleValueStream)paramA,reverse(comp));\n      }\n    } else if (paramA instanceof DateValueStream && paramB instanceof DateValueStream) {\n      if (paramA instanceof DateValue) {\n        if (paramB instanceof DateValue) {\n          return new CompareDateValueFunction(name,(DateValue)paramA,(DateValue)paramB,comp);\n        }\n        return new CompareDateStreamFunction(name,(DateValue)paramA,(DateValueStream)paramB,comp);\n      }\n      if (paramB instanceof DateValue) {\n        return new CompareDateStreamFunction(name,(DateValue)paramB,(DateValueStream)paramA,reverse(comp));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires comparable (numeric or date) parameters.\");\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that at least 1 parameter be single-valued.\");\n  }\n\n","sourceOld":"  /**\n   * Create a comparison mapping function, comparing two analytics value (streams) of the same type.\n   * \n   * @param name name of the function\n   * @param comp function to find the result of a comparison\n   * @param params the parameters to compare\n   * @return an instance of the requested comparison function using the given parameters\n   */\n  public static BooleanValueStream createComparisonFunction(String name, CompResultFunction comp, AnalyticsValueStream... params) {\n    if (params.length != 2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 2 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream paramA = params[0];\n    AnalyticsValueStream paramB = params[1];\n    if (paramA instanceof DoubleValueStream && paramB instanceof DoubleValueStream) {\n      if (paramA instanceof DoubleValue) {\n        if (paramB instanceof DoubleValue) {\n          return new CompareDoubleValueFunction(name,(DoubleValue)paramA,(DoubleValue)paramB,comp);\n        }\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramA,(DoubleValueStream)paramB,comp);\n      }\n      if (paramB instanceof DoubleValue) {\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramB,(DoubleValueStream)paramA,reverse(comp));\n      }\n    } else if (paramA instanceof DateValueStream && paramB instanceof DateValueStream) {\n      if (paramA instanceof DateValue) {\n        if (paramB instanceof DateValue) {\n          return new CompareDateValueFunction(name,(DateValue)paramA,(DateValue)paramB,comp);\n        }\n        return new CompareDateStreamFunction(name,(DateValue)paramA,(DateValueStream)paramB,comp);\n      }\n      if (paramB instanceof DateValue) {\n        return new CompareDateStreamFunction(name,(DateValue)paramB,(DateValueStream)paramA,reverse(comp));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires comparable (numeric or date) parameters.\");\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that at least 1 parameter be single-valued.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ComparisonFunction#createComparisonFunction(String,CompResultFunction,AnalyticsValueStream...).mjava","sourceNew":"  /**\n   * Create a comparison mapping function, comparing two analytics value (streams) of the same type.\n   *\n   * @param name name of the function\n   * @param comp function to find the result of a comparison\n   * @param params the parameters to compare\n   * @return an instance of the requested comparison function using the given parameters\n   */\n  public static BooleanValueStream createComparisonFunction(String name, CompResultFunction comp, AnalyticsValueStream... params) {\n    if (params.length != 2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 2 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream paramA = params[0];\n    AnalyticsValueStream paramB = params[1];\n    if (paramA instanceof DoubleValueStream && paramB instanceof DoubleValueStream) {\n      if (paramA instanceof DoubleValue) {\n        if (paramB instanceof DoubleValue) {\n          return new CompareDoubleValueFunction(name,(DoubleValue)paramA,(DoubleValue)paramB,comp);\n        }\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramA,(DoubleValueStream)paramB,comp);\n      }\n      if (paramB instanceof DoubleValue) {\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramB,(DoubleValueStream)paramA,reverse(comp));\n      }\n    } else if (paramA instanceof DateValueStream && paramB instanceof DateValueStream) {\n      if (paramA instanceof DateValue) {\n        if (paramB instanceof DateValue) {\n          return new CompareDateValueFunction(name,(DateValue)paramA,(DateValue)paramB,comp);\n        }\n        return new CompareDateStreamFunction(name,(DateValue)paramA,(DateValueStream)paramB,comp);\n      }\n      if (paramB instanceof DateValue) {\n        return new CompareDateStreamFunction(name,(DateValue)paramB,(DateValueStream)paramA,reverse(comp));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires comparable (numeric or date) parameters.\");\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that at least 1 parameter be single-valued.\");\n  }\n\n","sourceOld":"  /**\n   * Create a comparison mapping function, comparing two analytics value (streams) of the same type.\n   * \n   * @param name name of the function\n   * @param comp function to find the result of a comparison\n   * @param params the parameters to compare\n   * @return an instance of the requested comparison function using the given parameters\n   */\n  public static BooleanValueStream createComparisonFunction(String name, CompResultFunction comp, AnalyticsValueStream... params) {\n    if (params.length != 2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 2 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream paramA = params[0];\n    AnalyticsValueStream paramB = params[1];\n    if (paramA instanceof DoubleValueStream && paramB instanceof DoubleValueStream) {\n      if (paramA instanceof DoubleValue) {\n        if (paramB instanceof DoubleValue) {\n          return new CompareDoubleValueFunction(name,(DoubleValue)paramA,(DoubleValue)paramB,comp);\n        }\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramA,(DoubleValueStream)paramB,comp);\n      }\n      if (paramB instanceof DoubleValue) {\n        return new CompareDoubleStreamFunction(name,(DoubleValue)paramB,(DoubleValueStream)paramA,reverse(comp));\n      }\n    } else if (paramA instanceof DateValueStream && paramB instanceof DateValueStream) {\n      if (paramA instanceof DateValue) {\n        if (paramB instanceof DateValue) {\n          return new CompareDateValueFunction(name,(DateValue)paramA,(DateValue)paramB,comp);\n        }\n        return new CompareDateStreamFunction(name,(DateValue)paramA,(DateValueStream)paramB,comp);\n      }\n      if (paramB instanceof DateValue) {\n        return new CompareDateStreamFunction(name,(DateValue)paramB,(DateValueStream)paramA,reverse(comp));\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires comparable (numeric or date) parameters.\");\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that at least 1 parameter be single-valued.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}