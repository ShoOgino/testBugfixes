{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongsCompare().mjava","commits":[{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongsCompare().mjava","pathOld":"/dev/null","sourceNew":"  /** check sort order of random longs consistent with Long.compare */\n  public void testLongsCompare() {\n    BytesRef left = new BytesRef(new byte[Long.BYTES]);\n    BytesRef right = new BytesRef(new byte[Long.BYTES]);\n\n    for (int i = 0; i < 10000; i++) {\n      long leftValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      NumericUtils.longToSortableBytes(leftValue, left.bytes, left.offset);\n\n      long rightValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      NumericUtils.longToSortableBytes(rightValue, right.bytes, right.offset);\n      \n      assertEquals(Integer.signum(Long.compare(leftValue, rightValue)),\n                   Integer.signum(left.compareTo(right)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testLongsCompare().mjava","pathOld":"/dev/null","sourceNew":"  /** check sort order of random longs consistent with Long.compare */\n  public void testLongsCompare() {\n    BytesRef left = new BytesRef(new byte[Long.BYTES]);\n    BytesRef right = new BytesRef(new byte[Long.BYTES]);\n\n    for (int i = 0; i < 10000; i++) {\n      long leftValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      NumericUtils.longToSortableBytes(leftValue, left.bytes, left.offset);\n\n      long rightValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE);\n      NumericUtils.longToSortableBytes(rightValue, right.bytes, right.offset);\n      \n      assertEquals(Integer.signum(Long.compare(leftValue, rightValue)),\n                   Integer.signum(left.compareTo(right)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}