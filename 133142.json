{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new TermFreqArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new TermFreqPayloadArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new TermFreqArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new TermFreqPayloadArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"374870f2181bf8cd93a47df5d988855dfab6f7cd","date":1395589518,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testIllegalByteDuringBuild().mjava","sourceNew":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    expectThrows(IllegalArgumentException.class, () -> {\n      sug.build(new InputArrayIterator(keys));\n    });\n\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testIllegalByteDuringBuild() throws Exception {\n    // Default separator is INFORMATION SEPARATOR TWO\n    // (0x1e), so no input token is allowed to contain it\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"foo\\u001ebar baz\", 50)\n    );\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    try {\n      sug.build(new InputArrayIterator(keys));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    analyzer.close();\n  }\n\n","bugFix":["d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["374870f2181bf8cd93a47df5d988855dfab6f7cd","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","05fe562aa248790944d43cdd478f512572835ba0"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}