{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#pushFrame(FST.Arc[Output],long,int,long).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#pushFrame(FST.Arc[Output],long,int,long).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output> arc, long fp, int length, long termOrd) throws IOException {\n    final OrdsSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    // System.out.println(\"pushFrame termOrd= \" + termOrd + \" fpOrig=\" + f.fpOrig + \" fp=\" + fp + \" nextEnt=\" + f.nextEnt);\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        // System.out.println(\"        do rewind!\");\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        // System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.termOrdOrig = termOrd;\n      // System.out.println(\"set termOrdOrig=\" + termOrd);\n      f.termOrd = termOrd;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"183f03e816db8a4c3db0ede28b1679d50aee7f52","date":1405935700,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#pushFrame(FST.Arc[Output],long,int,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#pushFrame(FST.Arc[Output],long,int,long).mjava","sourceNew":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output> arc, long fp, int length, long termOrd) throws IOException {\n    final OrdsSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    // System.out.println(\"pushFrame termOrd= \" + termOrd + \" fpOrig=\" + f.fpOrig + \" fp=\" + fp + \" nextEnt=\" + f.nextEnt);\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        // System.out.println(\"        do rewind!\");\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        // System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n      assert termOrd == f.termOrdOrig;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.termOrdOrig = termOrd;\n      // System.out.println(\"set termOrdOrig=\" + termOrd);\n      f.termOrd = termOrd;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes next'd frame or seek'd frame; we later\n  // lazy-load the frame only when needed\n  OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output> arc, long fp, int length, long termOrd) throws IOException {\n    final OrdsSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.arc = arc;\n    // System.out.println(\"pushFrame termOrd= \" + termOrd + \" fpOrig=\" + f.fpOrig + \" fp=\" + fp + \" nextEnt=\" + f.nextEnt);\n    if (f.fpOrig == fp && f.nextEnt != -1) {\n      //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n      if (f.prefix > targetBeforeCurrentLength) {\n        // System.out.println(\"        do rewind!\");\n        f.rewind();\n      } else {\n        // if (DEBUG) {\n        // System.out.println(\"        skip rewind!\");\n        // }\n      }\n      assert length == f.prefix;\n    } else {\n      f.nextEnt = -1;\n      f.prefix = length;\n      f.state.termBlockOrd = 0;\n      f.termOrdOrig = termOrd;\n      // System.out.println(\"set termOrdOrig=\" + termOrd);\n      f.termOrd = termOrd;\n      f.fpOrig = f.fp = fp;\n      f.lastSubFP = -1;\n      // if (DEBUG) {\n      //   final int sav = term.length;\n      //   term.length = length;\n      //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n      //   term.length = sav;\n      // }\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"183f03e816db8a4c3db0ede28b1679d50aee7f52":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["183f03e816db8a4c3db0ede28b1679d50aee7f52"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["183f03e816db8a4c3db0ede28b1679d50aee7f52"],"183f03e816db8a4c3db0ede28b1679d50aee7f52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}