{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","commits":[{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(String,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(String name, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    // We can register a core when creating them via the admin UI, so we need to ensure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    if (cd.isTransient()) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    coreInitFailures.remove(name);\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \"+name );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \"+name );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    \n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    solrCores.addCoreDescriptor(new CoreDescriptor(cd.getName(), cd));\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2fdcd0303309a07ecdda1d98f6806404d741129","date":1502140581,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    solrCores.addCoreDescriptor(cd);\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if (core == null) {\n      throw new RuntimeException(\"Can not register a null core.\");\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n    /*\n     * set both the name of the descriptor and the name of the\n     * core, since the descriptors name is used for persisting.\n     */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if (old == null || old == core) {\n      log.debug(\"registering core: \" + cd.getName());\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    } else {\n      log.debug(\"replacing core: \" + cd.getName());\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if( old == null || old == core) {\n      log.debug( \"registering core: \" + cd.getName() );\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    }\n    else {\n      log.debug( \"replacing core: \" + cd.getName() );\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if (core == null) {\n      throw new RuntimeException(\"Can not register a null core.\");\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n    /*\n     * set both the name of the descriptor and the name of the\n     * core, since the descriptors name is used for persisting.\n     */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if (old == null || old == core) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"registering core: {}\", cd.getName());\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    } else {\n      if (log.isDebugEnabled()) {\n        log.debug(\"replacing core: {}\", cd.getName());\n      }\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if (core == null) {\n      throw new RuntimeException(\"Can not register a null core.\");\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n    /*\n     * set both the name of the descriptor and the name of the\n     * core, since the descriptors name is used for persisting.\n     */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if (old == null || old == core) {\n      log.debug(\"registering core: \" + cd.getName());\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    } else {\n      log.debug(\"replacing core: \" + cd.getName());\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80876f1ee57780ad756fa083e88c95d7c1d0c0b","date":1595653703,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(CoreDescriptor,SolrCore,boolean,boolean).mjava","sourceNew":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if (core == null) {\n      throw new RuntimeException(\"Can not register a null core.\");\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n\n    assert core.getName().equals(cd.getName()) : \"core name \" + core.getName() + \" != cd \" + cd.getName();\n\n    SolrCore old = solrCores.putCore(cd, core);\n\n    coreInitFailures.remove(cd.getName());\n\n    if (old == null || old == core) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"registering core: {}\", cd.getName());\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    } else {\n      if (log.isDebugEnabled()) {\n        log.debug(\"replacing core: {}\", cd.getName());\n      }\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(CoreDescriptor cd, SolrCore core, boolean registerInZk, boolean skipRecovery) {\n    if (core == null) {\n      throw new RuntimeException(\"Can not register a null core.\");\n    }\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been closed\");\n    }\n    SolrCore old = solrCores.putCore(cd, core);\n    /*\n     * set both the name of the descriptor and the name of the\n     * core, since the descriptors name is used for persisting.\n     */\n\n    core.setName(cd.getName());\n\n    coreInitFailures.remove(cd.getName());\n\n    if (old == null || old == core) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"registering core: {}\", cd.getName());\n      }\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return null;\n    } else {\n      if (log.isDebugEnabled()) {\n        log.debug(\"replacing core: {}\", cd.getName());\n      }\n      old.close();\n      if (registerInZk) {\n        zkSys.registerInZk(core, false, skipRecovery);\n      }\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2fdcd0303309a07ecdda1d98f6806404d741129":["28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["28288370235ed02234a64753cdbf0c6ec096304a","b2fdcd0303309a07ecdda1d98f6806404d741129"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["30c8e5574b55d57947e989443dfde611646530ee","b2fdcd0303309a07ecdda1d98f6806404d741129"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["b2fdcd0303309a07ecdda1d98f6806404d741129"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","a513b6a92751e54c76fb5447948c9e7d437163a7"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"b2fdcd0303309a07ecdda1d98f6806404d741129":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","2668c99990e4c94a78bac005aa682b7c5986d23a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["b2fdcd0303309a07ecdda1d98f6806404d741129","30c8e5574b55d57947e989443dfde611646530ee","58884af1f68e9d61c217c753fbd6266d86a63b14"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","e9017cf144952056066919f1ebc7897ff9bd71b1"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"140be51d03394488536f4aacedace29f9b318347":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}