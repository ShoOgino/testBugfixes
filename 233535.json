{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryParser.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}