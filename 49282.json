{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","commits":[{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6806342c1a54fb5cdcbb43c8a066994ce3f4a8e1","date":1545317399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","sourceNew":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","sourceOld":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","sourceNew":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","sourceOld":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testInactiveMarkersCleanup().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInactiveMarkersCleanup() throws Exception {\n    triggerFired = new CountDownLatch(1);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor': '1s'\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction2.class.getName() + \"'}]\" +\n    \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \"',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : 'NOW+20SECONDS',\" +\n        \"'every' : '+2SECONDS',\" + // must be longer than the cooldown period!!\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'},\" +\n        \"{'name' : 'test', 'class' : '\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    cloudManager.getTimeSource().sleep(5000);\n\n    triggerFired = new CountDownLatch(1);\n    String node = addNode();\n\n    boolean await = triggerFired.await(30, TimeUnit.SECONDS);\n    assertTrue(\"trigger should have fired\", await);\n\n    triggerFired = new CountDownLatch(1);\n\n    // should have a marker\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertTrue(\"marker for nodeAdded doesn't exist\", stateManager.hasData(nodeAddedPath));\n\n    // wait for the cleanup to fire\n    await = triggerFired.await(90, TimeUnit.SECONDS);\n    assertTrue(\"cleanup trigger should have fired\", await);\n    assertFalse(\"marker for nodeAdded still exists\", stateManager.hasData(nodeAddedPath));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["6806342c1a54fb5cdcbb43c8a066994ce3f4a8e1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6806342c1a54fb5cdcbb43c8a066994ce3f4a8e1":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["6806342c1a54fb5cdcbb43c8a066994ce3f4a8e1"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"6806342c1a54fb5cdcbb43c8a066994ce3f4a8e1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}