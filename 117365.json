{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","commits":[{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdc0a8c0c8217d2975ccf180424935c71ee0279f","date":1481931662,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrDocument)  || !(actual instanceof SolrDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocument solrDocument1 = (SolrDocument) expected;\n    SolrDocument solrDocument2 = (SolrDocument) actual;\n\n    if(solrDocument1.getFieldNames().size() != solrDocument1.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = solrDocument1.getFieldNames().iterator();\n    Iterator<String> iter2 = solrDocument2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = solrDocument1.getFieldValues(key1);\n      Object val2 = solrDocument2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n\n    if(solrDocument1.getChildDocuments() == null && solrDocument2.getChildDocuments() == null) {\n      return true;\n    }\n    if(solrDocument1.getChildDocuments() == null || solrDocument2.getChildDocuments() == null) {\n      return false;\n    } else if(solrDocument1.getChildDocuments().size() != solrDocument2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrDocument> childDocsIter1 = solrDocument1.getChildDocuments().iterator();\n      Iterator<SolrDocument> childDocsIter2 = solrDocument2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","bdc0a8c0c8217d2975ccf180424935c71ee0279f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdc0a8c0c8217d2975ccf180424935c71ee0279f":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bdc0a8c0c8217d2975ccf180424935c71ee0279f"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"bdc0a8c0c8217d2975ccf180424935c71ee0279f":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","bdc0a8c0c8217d2975ccf180424935c71ee0279f","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}