{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","commits":[{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"/dev/null","sourceNew":"      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = (ArrayIntList) info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map((String)info.sortedTerms[i].getKey(),\n                         numPositions((ArrayIntList) info.sortedTerms[i].getValue()),\n                         offsets, ((ArrayIntList) info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map(info.sortedTerms[i].getKey(),\n                         numPositions(info.sortedTerms[i].getValue()),\n                         offsets, (info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","sourceOld":"      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = (ArrayIntList) info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map((String)info.sortedTerms[i].getKey(),\n                         numPositions((ArrayIntList) info.sortedTerms[i].getValue()),\n                         offsets, ((ArrayIntList) info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"      @Override\n      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map(info.sortedTerms[i].getKey(),\n                         numPositions(info.sortedTerms[i].getValue()),\n                         offsets, (info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","sourceOld":"      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map(info.sortedTerms[i].getKey(),\n                         numPositions(info.sortedTerms[i].getValue()),\n                         offsets, (info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String,TermVectorMapper).mjava","sourceNew":"      @Override\n      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map(info.sortedTerms[i].getKey(),\n                         numPositions(info.sortedTerms[i].getValue()),\n                         offsets, (info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","sourceOld":"      @Override\n      public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException\n      {\n        if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n        final Info info = getInfo(field);\n          if (info == null){\n              return;\n          }\n          info.sortTerms();\n          mapper.setExpectations(field, info.sortedTerms.length, stride != 1, true);\n          for (int i = info.sortedTerms.length; --i >=0;){\n\n              ArrayIntList positions = info.sortedTerms[i].getValue();\n              int size = positions.size();\n              org.apache.lucene.index.TermVectorOffsetInfo[] offsets =\n                new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\n              for (int k=0, j=1; j < size; k++, j += stride) {\n                int start = positions.get(j);\n                int end = positions.get(j+1);\n                offsets[k] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n              }\n              mapper.map(info.sortedTerms[i].getKey(),\n                         numPositions(info.sortedTerms[i].getValue()),\n                         offsets, (info.sortedTerms[i].getValue()).toArray(stride));\n          }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"]},"commit2Childs":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}