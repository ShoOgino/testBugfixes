{"path":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","commits":[{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could\n   * call {@link #reInitCache(int, boolean) reInitCache()}.\n   */\n  public CachingNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(leafReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8","date":1430636069,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could call\n   * {@link #reInitCache(int, boolean) reInitCache()}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public CachingNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(leafReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could\n   * call {@link #reInitCache(int, boolean) reInitCache()}.\n   */\n  public CachingNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(leafReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8de6b27023f4d7c580ba6f1b6709e4208ca029","date":1466509434,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could call\n   * {@link #reInitCache(int, boolean) reInitCache()}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public CachingNaiveBayesClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(indexReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could call\n   * {@link #reInitCache(int, boolean) reInitCache()}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public CachingNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(leafReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#CachingNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new NaiveBayes classifier with inside caching. If you want less memory usage you could call\n   * {@link #reInitCache(int, boolean) reInitCache()}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public CachingNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    super(leafReader, analyzer, query, classFieldName, textFieldNames);\n    // building the cache\n    try {\n      reInitCache(0, true);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"4a8de6b27023f4d7c580ba6f1b6709e4208ca029":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8","4a8de6b27023f4d7c580ba6f1b6709e4208ca029"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a8de6b27023f4d7c580ba6f1b6709e4208ca029"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["4a8de6b27023f4d7c580ba6f1b6709e4208ca029","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4a8de6b27023f4d7c580ba6f1b6709e4208ca029":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}