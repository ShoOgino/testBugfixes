{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","commits":[{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  static void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = ENCODERS[numBits];\n    final int iters = ITERATIONS[numBits];\n    assert iters * encoder.valueCount() == BlockPackedPostingsFormat.BLOCK_SIZE;\n    final int encodedSize = encoder.blockCount() * iters; // number of 64-bits blocks\n    assert encodedSize > 0 && encodedSize <= BLOCK_SIZE / 2 : encodedSize;\n\n    out.writeByte((byte) numBits);\n    out.writeByte((byte) encodedSize);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize << 3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d569dbc58dcfe4b83257a5b1d867b66532beef1","date":1344416896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  static void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = ENCODERS[numBits];\n    final int iters = ITERATIONS[numBits];\n    assert iters * encoder.valueCount() == BlockPackedPostingsFormat.BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  static void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = ENCODERS[numBits];\n    final int iters = ITERATIONS[numBits];\n    assert iters * encoder.valueCount() == BlockPackedPostingsFormat.BLOCK_SIZE;\n    final int encodedSize = encoder.blockCount() * iters; // number of 64-bits blocks\n    assert encodedSize > 0 && encodedSize <= BLOCK_SIZE / 2 : encodedSize;\n\n    out.writeByte((byte) numBits);\n    out.writeByte((byte) encodedSize);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize << 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  static void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = ENCODERS[numBits];\n    final int iters = ITERATIONS[numBits];\n    assert iters * encoder.valueCount() == BlockPackedPostingsFormat.BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","date":1344442349,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e3359210474c12c0b79e6400450313e3d7ef2bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":[],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}