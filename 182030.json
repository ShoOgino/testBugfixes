{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4b103252dee6afa1b6d7a622c773d178788eb85a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["3242a09f703274d3b9283f2064a1a33064b53a1b","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","29ef99d61cda9641b6250bf9567329a6e65f901d","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}