{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"/dev/null","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        new WhitespaceTokenizer(\n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\")),\n        dict);\n\n    assertFiltersTo(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1497255a2ce11dc672a80859c79fabe7efa51d2e","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        new WhitespaceTokenizer(\n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\")),\n        dict);\n\n    assertFiltersTo(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSE() throws Exception {\n    String[] dict = { \"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\" };\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        new WhitespaceTokenizer(\n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\")),\n        dict);\n\n    assertFiltersTo(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}