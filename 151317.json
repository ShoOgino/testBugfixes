{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random, d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random, d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"f1\", \"doc1 field1\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"f2\", \"doc2 field2\", StringField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["6d826728f3843425e335d7f7c856971067540dc3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.shutdown();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.shutdown();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.shutdown();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.shutdown();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.shutdown();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.shutdown();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    TestUtil.addIndexesSlowly(w.w, r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["6d826728f3843425e335d7f7c856971067540dc3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testFieldNamesChanged().mjava","sourceNew":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    TestUtil.addIndexesSlowly(w.w, r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      Document d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  // LUCENE-3575\n  public void testFieldNamesChanged() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"f1\", \"doc1 field1\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"f2\", \"doc2 field2\", Field.Store.YES));\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    w.addDocument(doc);\n    DirectoryReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    TestUtil.addIndexesSlowly(w.w, r1, r2);\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    IndexReader r3 = w.getReader();\n    w.close();\n    assertEquals(2, r3.numDocs());\n    for(int docID=0;docID<2;docID++) {\n      StoredDocument d = r3.document(docID);\n      if (d.get(\"id\").equals(\"1\")) {\n        assertEquals(\"doc1 field1\", d.get(\"f1\"));\n      } else {\n        assertEquals(\"doc2 field2\", d.get(\"f2\"));\n      }\n    }\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1d028314cced5858683a1bb4741423d0f934257b"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1d028314cced5858683a1bb4741423d0f934257b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}