{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#isConsistent(DocMap).mjava","commits":[{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#isConsistent(DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#isConsistent(DocMap,int).mjava","sourceNew":"  /** Check consistency of a {@link DocMap}, useful for assertions. */\n  static boolean isConsistent(DocMap docMap) {\n    final int maxDoc = docMap.size();\n    for (int i = 0; i < maxDoc; ++i) {\n      final int newID = docMap.oldToNew(i);\n      final int oldID = docMap.newToOld(newID);\n      assert newID >= 0 && newID < maxDoc : \"doc IDs must be in [0-\" + maxDoc + \"[, got \" + newID;\n      assert i == oldID : \"mapping is inconsistent: \" + i + \" --oldToNew--> \" + newID + \" --newToOld--> \" + oldID;\n      if (i != oldID || newID < 0 || newID >= maxDoc) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Check consistency of a {@link DocMap}, useful for assertions. */\n  static boolean isConsistent(DocMap docMap, int maxDoc) {\n    for (int i = 0; i < maxDoc; ++i) {\n      final int newID = docMap.oldToNew(i);\n      final int oldID = docMap.newToOld(newID);\n      assert newID >= 0 && newID < maxDoc : \"doc IDs must be in [0-\" + maxDoc + \"[, got \" + newID;\n      assert i == oldID : \"mapping is inconsistent: \" + i + \" --oldToNew--> \" + newID + \" --newToOld--> \" + oldID;\n      if (i != oldID || newID < 0 || newID >= maxDoc) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/Sorter#isConsistent(DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#isConsistent(DocMap).mjava","sourceNew":"  /** Check consistency of a {@link DocMap}, useful for assertions. */\n  static boolean isConsistent(DocMap docMap) {\n    final int maxDoc = docMap.size();\n    for (int i = 0; i < maxDoc; ++i) {\n      final int newID = docMap.oldToNew(i);\n      final int oldID = docMap.newToOld(newID);\n      assert newID >= 0 && newID < maxDoc : \"doc IDs must be in [0-\" + maxDoc + \"[, got \" + newID;\n      assert i == oldID : \"mapping is inconsistent: \" + i + \" --oldToNew--> \" + newID + \" --newToOld--> \" + oldID;\n      if (i != oldID || newID < 0 || newID >= maxDoc) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Check consistency of a {@link DocMap}, useful for assertions. */\n  static boolean isConsistent(DocMap docMap) {\n    final int maxDoc = docMap.size();\n    for (int i = 0; i < maxDoc; ++i) {\n      final int newID = docMap.oldToNew(i);\n      final int oldID = docMap.newToOld(newID);\n      assert newID >= 0 && newID < maxDoc : \"doc IDs must be in [0-\" + maxDoc + \"[, got \" + newID;\n      assert i == oldID : \"mapping is inconsistent: \" + i + \" --oldToNew--> \" + newID + \" --newToOld--> \" + oldID;\n      if (i != oldID || newID < 0 || newID >= maxDoc) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}