{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (minLat <= maxY && minLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxLat >= this.minLat) || (splitX && maxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (minLat <= maxY && minLon <= maxX) {\n      Relation relation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxLat >= this.minLat) || (splitX && maxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double triMinLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double triMinLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    if (triMinLat <= maxY && triMinLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      double triMaxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double triMaxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n      if (right != null && ((splitX == false && triMaxLat >= this.minLat) || (splitX && triMaxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (minLat <= maxY && minLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxLat >= this.minLat) || (splitX && maxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/ComponentTree#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided triangle */\n  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (minY <= this.maxY && minX <= this.maxX) {\n      Relation relation = component.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      if (right != null && ((splitX == false && maxY >= this.component.getMinY()) || (splitX && maxX >= this.component.getMinX()))) {\n        relation = right.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double triMinLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double triMinLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    if (triMinLat <= maxY && triMinLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      double triMaxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double triMaxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n      if (right != null && ((splitX == false && triMaxLat >= this.minLat) || (splitX && triMaxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#relateTriangle(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns relation to the provided triangle */\n  public Relation relateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double triMinLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double triMinLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    if (triMinLat <= maxY && triMinLon <= maxX) {\n      Relation relation = internalComponentRelateTriangle(ax, ay, bx, by, cx, cy);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        return relation;\n      }\n      if (left != null) {\n        relation = left.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n      double triMaxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n      double triMaxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n      if (right != null && ((splitX == false && triMaxLat >= this.minLat) || (splitX && triMaxLon >= this.minLon))) {\n        relation = right.relateTriangle(ax, ay, bx, by, cx, cy);\n        if (relation != Relation.CELL_OUTSIDE_QUERY) {\n          return relation;\n        }\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fc005279ab64cbf458ccef2ada610bc1a04b6139","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}