{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#randomSet(int,int).mjava","commits":[{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#randomSet(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWAH8DocIdSet#randomSet(int,int).mjava","sourceNew":"  /** Create a random set which has <code>numBitsSet</code> of its <code>numBits</code> bits set. */\n  protected static BitSet randomSet(int numBits, int numBitsSet) {\n    assert numBitsSet <= numBits;\n    final BitSet set = new BitSet(numBits);\n    if (numBitsSet == numBits) {\n      set.set(0, numBits);\n    } else {\n      for (int i = 0; i < numBitsSet; ++i) {\n        while (true) {\n          final int o = random().nextInt(numBits);\n          if (!set.get(o)) {\n            set.set(o);\n            break;\n          }\n        }\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  private static FixedBitSet randomSet(int numBits, int numBitsSet) {\n    assert numBitsSet <= numBits;\n    final FixedBitSet set = new FixedBitSet(numBits);\n    if (numBitsSet == numBits) {\n      set.set(0, set.length());\n    } else {\n      for (int i = 0; i < numBitsSet; ++i) {\n        while (true) {\n          final int o = random().nextInt(numBits);\n          if (!set.get(o)) {\n            set.set(o);\n            break;\n          }\n        }\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#randomSet(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a random set which has <code>numBitsSet</code> of its <code>numBits</code> bits set. */\n  protected static BitSet randomSet(int numBits, int numBitsSet) {\n    assert numBitsSet <= numBits;\n    final BitSet set = new BitSet(numBits);\n    if (numBitsSet == numBits) {\n      set.set(0, numBits);\n    } else {\n      for (int i = 0; i < numBitsSet; ++i) {\n        while (true) {\n          final int o = random().nextInt(numBits);\n          if (!set.get(o)) {\n            set.set(o);\n            break;\n          }\n        }\n      }\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#randomSet(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#randomSet(int,int).mjava","sourceNew":"  /** Create a random set which has <code>numBitsSet</code> of its <code>numBits</code> bits set. */\n  static java.util.BitSet randomSet(int numBits, int numBitsSet) {\n    assert numBitsSet <= numBits;\n    final java.util.BitSet set = new java.util.BitSet(numBits);\n    if (numBitsSet == numBits) {\n      set.set(0, numBits);\n    } else {\n      for (int i = 0; i < numBitsSet; ++i) {\n        while (true) {\n          final int o = random().nextInt(numBits);\n          if (!set.get(o)) {\n            set.set(o);\n            break;\n          }\n        }\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /** Create a random set which has <code>numBitsSet</code> of its <code>numBits</code> bits set. */\n  protected static BitSet randomSet(int numBits, int numBitsSet) {\n    assert numBitsSet <= numBits;\n    final BitSet set = new BitSet(numBits);\n    if (numBitsSet == numBits) {\n      set.set(0, numBits);\n    } else {\n      for (int i = 0; i < numBitsSet; ++i) {\n        while (true) {\n          final int o = random().nextInt(numBits);\n          if (!set.get(o)) {\n            set.set(o);\n            break;\n          }\n        }\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7581da3051efe8071ae92ac7eca27a270bc4611e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7581da3051efe8071ae92ac7eca27a270bc4611e"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}