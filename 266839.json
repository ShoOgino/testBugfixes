{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","commits":[{"id":"e837b9e725093b56ed9d86c0ea3fe415bccd4b58","date":1312113179,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue.toString(), doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand = new GroupCommand(fieldName, iMatches);\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d983fa75c434f797e96c920fc932218caf2641dd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cae508eba1efd5cac9dd236258d980607eb85b3","date":1312740500,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","sourceNew":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand = new GroupCommand(fieldName, iMatches);\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue.toString(), doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand = new GroupCommand(fieldName, iMatches);\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d983fa75c434f797e96c920fc932218caf2641dd","date":1391253179,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","sourceNew":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupCommand = new GroupCommand(fieldName, iMatches);\n          }\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand = new GroupCommand(fieldName, iMatches);\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","bugFix":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractGroupedInfo(NamedList[Object]).mjava","sourceNew":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupCommand = new GroupCommand(fieldName, iMatches);\n          }\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void extractGroupedInfo( NamedList<Object> info ) {\n    if ( info != null ) {\n      _groupResponse = new GroupResponse();\n      int size = info.size();\n      for (int i=0; i < size; i++) {\n        String fieldName = info.getName(i);\n        Object fieldGroups =  info.getVal(i);\n        SimpleOrderedMap<Object> simpleOrderedMap = (SimpleOrderedMap<Object>) fieldGroups;\n\n        Object oMatches = simpleOrderedMap.get(\"matches\");\n        Object oNGroups = simpleOrderedMap.get(\"ngroups\");\n        Object oGroups = simpleOrderedMap.get(\"groups\");\n        Object queryCommand = simpleOrderedMap.get(\"doclist\");\n        if (oMatches == null) {\n          continue;\n        }\n\n        if (oGroups != null) {\n          Integer iMatches = (Integer) oMatches;\n          ArrayList<Object> groupsArr = (ArrayList<Object>) oGroups;\n          GroupCommand groupedCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupedCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupedCommand = new GroupCommand(fieldName, iMatches);\n          }\n\n          for (Object oGrp : groupsArr) {\n            SimpleOrderedMap grpMap = (SimpleOrderedMap) oGrp;\n            Object sGroupValue = grpMap.get( \"groupValue\");\n            SolrDocumentList doclist = (SolrDocumentList) grpMap.get( \"doclist\");\n            Group group = new Group(sGroupValue != null ? sGroupValue.toString() : null, doclist) ;\n            groupedCommand.add(group);\n          }\n\n          _groupResponse.add(groupedCommand);\n        } else if (queryCommand != null) {\n          Integer iMatches = (Integer) oMatches;\n          GroupCommand groupCommand;\n          if (oNGroups != null) {\n            Integer iNGroups = (Integer) oNGroups;\n            groupCommand = new GroupCommand(fieldName, iMatches, iNGroups);\n          } else {\n            groupCommand = new GroupCommand(fieldName, iMatches);\n          }\n          SolrDocumentList docList = (SolrDocumentList) queryCommand;\n          groupCommand.add(new Group(fieldName, docList));\n          _groupResponse.add(groupCommand);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2cae508eba1efd5cac9dd236258d980607eb85b3":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"d983fa75c434f797e96c920fc932218caf2641dd":["2cae508eba1efd5cac9dd236258d980607eb85b3"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["d983fa75c434f797e96c920fc932218caf2641dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"2cae508eba1efd5cac9dd236258d980607eb85b3":["d983fa75c434f797e96c920fc932218caf2641dd"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["2cae508eba1efd5cac9dd236258d980607eb85b3"],"d983fa75c434f797e96c920fc932218caf2641dd":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}