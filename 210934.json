{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","commits":[{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.TOKENIZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.UN_TOKENIZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.TOKENIZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, false);\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testWithPendingDeletes2().mjava","sourceNew":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","sourceOld":"  public void testWithPendingDeletes2() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n    // Adds 10 docs, then replaces them with another 10\n    // docs, so 10 pending deletes:\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\" + (i % 10), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                        Field.Index.ANALYZED));\n      writer.updateDocument(new Term(\"id\", \"\" + (i%10)), doc);\n    }\n\n    writer.addIndexesNoOptimize(new Directory[] {aux});\n\n    // Deletes one of the 10 added docs, leaving 9:\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"content\", \"bbb\"));\n    q.add(new Term(\"content\", \"14\"));\n    writer.deleteDocuments(q);\n\n    writer.optimize();\n    writer.commit();\n\n    verifyNumDocs(dir, 1039);\n    verifyTermDocs(dir, new Term(\"content\", \"aaa\"), 1030);\n    verifyTermDocs(dir, new Term(\"content\", \"bbb\"), 9);\n\n    writer.close();\n    dir.close();\n    aux.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}