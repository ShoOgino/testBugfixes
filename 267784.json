{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#getExactMatchStartingFromRootArc(int,BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#getExactMatchStartingFromRootArc(int,String).mjava","sourceNew":"  /**\n   * Returns the first exact match by traversing root arcs, starting from the\n   * arc <code>rootArcIndex</code>.\n   * \n   * @param rootArcIndex\n   *          The first root arc index in {@link #rootArcs} to consider when\n   *          matching.\n   * \n   * @param utf8\n   *          The sequence of utf8 bytes to follow.\n   * \n   * @return Returns the bucket number of the match or <code>null</code> if no\n   *         match was found.\n   */\n  private Integer getExactMatchStartingFromRootArc(\n      int rootArcIndex, BytesRef utf8) {\n    // Get the UTF-8 bytes representation of the input key.\n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; rootArcIndex < rootArcs.length; rootArcIndex++) {\n        final FST.Arc<Object> rootArc = rootArcs[rootArcIndex];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n        \n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, utf8)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Normalize prefix-encoded weight.\n            return rootArc.label;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    // No match.\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the first exact match by traversing root arcs, starting from \n   * the arc <code>i</code>.\n   * \n   * @param i The first root arc index in {@link #rootArcs} to consider when\n   * matching. \n   */\n  private Float getExactMatchStartingFromRootArc(int i, String key) {\n    // Get the UTF-8 bytes representation of the input key. \n    try {\n      final FST.Arc<Object> scratch = new FST.Arc<Object>();\n      for (; i < rootArcs.length; i++) {\n        final FST.Arc<Object> rootArc = rootArcs[i];\n        final FST.Arc<Object> arc = scratch.copyFrom(rootArc);\n\n        // Descend into the automaton using the key as prefix.\n        if (descendWithPrefix(arc, key)) {\n          automaton.readFirstTargetArc(arc, arc);\n          if (arc.label == FST.END_LABEL) {\n            // Prefix-encoded weight.\n            return rootArc.label / (float) buckets;\n          }\n        }\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["7bf07f4ebadc7539de83a531e64678350d78ca26","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}