{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DrillStream#DrillStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"74879569974967f8975e4418c9ec415d411dce92","date":1593391300,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DrillStream#DrillStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public DrillStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, Q);\n    StreamExpressionNamedParameter flExpression = factory.getNamedOperand(expression, FL);\n\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    String sortParam = null;\n\n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter but didn't find one\",expression));\n    } else {\n      sortParam = ((StreamExpressionValue)sortExpression.getParameter()).getValue();\n    }\n\n    String flParam = null;\n\n    // fl\n    if(null == flExpression || !(flExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'fl' parameter but didn't find one\",expression));\n    } else {\n      flParam = ((StreamExpressionValue)flExpression.getParameter()).getValue();\n    }\n\n    String qParam = null;\n\n    // q\n    if(null == qExpression || !(qExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'q' parameter but didn't find one\",expression));\n    } else {\n      qParam = ((StreamExpressionValue)qExpression.getParameter()).getValue();\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    StreamFactory localFactory = (StreamFactory)factory.clone();\n    localFactory.withDefaultSort(sortParam);\n    TupleStream stream = localFactory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = localFactory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream, comp, sortParam, flParam, qParam);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74879569974967f8975e4418c9ec415d411dce92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74879569974967f8975e4418c9ec415d411dce92"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74879569974967f8975e4418c9ec415d411dce92"],"74879569974967f8975e4418c9ec415d411dce92":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}