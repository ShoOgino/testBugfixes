{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","commits":[{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","sourceNew":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","bugFix":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","sourceNew":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","sourceNew":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene410DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}