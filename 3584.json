{"path":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg#createSlotAcc(FacetContext,int,int).mjava","commits":[{"id":"356bbab82e5e26b4d86a88681d48baaf6103c4fc","date":1574426780,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg#createSlotAcc(FacetContext,long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}