{"path":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","commits":[{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(i), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":["6dc6ab6902f8f70ae43365947ccf44c25986906d","d5151046764fb8d9662e02d6c5381b2adb69f96d","048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":["39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd","date":1219502420,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(i), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":["c28792ff7d1774c306e16afbd44ded91a417049b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ddc2fd411184c85d1baed1e8d24840a151d6ba1","date":1219508719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n          p.setCoreProperties(readProperties(cfg, node));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2d0ad8759bad601c993ea6eda6e5df1c2db2b28","date":1233124258,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n          p.setCoreProperties(readProperties(cfg, node));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5231549ca15f43ec84ff65b78dffc6d239adf007","date":1233912291,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362b99fad76af44afd5992acaddd72f365830103","date":1237270686,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath();\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64dd09b29d9d8046920d09defbc90ae1791c725d","date":1240554655,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );      \n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );      \n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d276eb109a378752200f97f11d8d5b6dba9cb2","date":1243336660,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String shareSchema = cfg.get(     \"solr/cores/@shareSchema\", null );\n      if(Boolean.parseBoolean(shareSchema)){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008","date":1243488136,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String shareSchema = cfg.get(     \"solr/cores/@shareSchema\", null );\n      if(Boolean.parseBoolean(shareSchema)){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String shareSchema = cfg.get(     \"solr/cores/@shareSchema\", null );\n      if(Boolean.parseBoolean(shareSchema)){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      String adminHandler  = cfg.get(     \"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5","date":1243488519,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      String shareSchema = cfg.get(     \"solr/cores/@shareSchema\", null );\n      if(Boolean.parseBoolean(shareSchema)){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"870f5bc648780b3cffe29a8b31edb46c0fabc3cb","date":1245839115,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7800b737e8d04d70bd0c747ff5efaaf6e74aeb77","date":1251272782,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","date":1260860758,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.load(dir, new FileInputStream(configFile));\n  } \n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String names = DOMUtil.getAttr(node, \"name\", null);\n          List<String> aliases = StrUtils.splitSmart(names,',');\n          String name = aliases.get(0);\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n\n          for (int a=1; a<aliases.size(); a++) {\n            core.open();\n            register(aliases.get(a), core, false);\n          }\n\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.load(dir, new FileInputStream(configFile));\n  } \n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.load(dir, new FileInputStream(configFile));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5":["3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"870f5bc648780b3cffe29a8b31edb46c0fabc3cb":["09a6cbf552ecdd63b030168a3ab8e13d88aa3db5"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"b9d276eb109a378752200f97f11d8d5b6dba9cb2":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"64dd09b29d9d8046920d09defbc90ae1791c725d":["362b99fad76af44afd5992acaddd72f365830103"],"5231549ca15f43ec84ff65b78dffc6d239adf007":["f2d0ad8759bad601c993ea6eda6e5df1c2db2b28"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["7800b737e8d04d70bd0c747ff5efaaf6e74aeb77"],"39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd":["c28792ff7d1774c306e16afbd44ded91a417049b"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2d0ad8759bad601c993ea6eda6e5df1c2db2b28":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"ad94625fb8d088209f46650c8097196fec67f00c":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008":["b9d276eb109a378752200f97f11d8d5b6dba9cb2"],"7800b737e8d04d70bd0c747ff5efaaf6e74aeb77":["870f5bc648780b3cffe29a8b31edb46c0fabc3cb"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"362b99fad76af44afd5992acaddd72f365830103":["5231549ca15f43ec84ff65b78dffc6d239adf007"]},"commit2Childs":{"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5":["870f5bc648780b3cffe29a8b31edb46c0fabc3cb"],"870f5bc648780b3cffe29a8b31edb46c0fabc3cb":["7800b737e8d04d70bd0c747ff5efaaf6e74aeb77"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"c28792ff7d1774c306e16afbd44ded91a417049b":["39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd"],"b9d276eb109a378752200f97f11d8d5b6dba9cb2":["3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"64dd09b29d9d8046920d09defbc90ae1791c725d":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"5231549ca15f43ec84ff65b78dffc6d239adf007":["362b99fad76af44afd5992acaddd72f365830103"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["ad94625fb8d088209f46650c8097196fec67f00c"],"39fd2e1bd15e48bfb8bc1c7eed0ee73234b7bdbd":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["c28792ff7d1774c306e16afbd44ded91a417049b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2d0ad8759bad601c993ea6eda6e5df1c2db2b28":["5231549ca15f43ec84ff65b78dffc6d239adf007"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["b9d276eb109a378752200f97f11d8d5b6dba9cb2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008":["09a6cbf552ecdd63b030168a3ab8e13d88aa3db5"],"7800b737e8d04d70bd0c747ff5efaaf6e74aeb77":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["f2d0ad8759bad601c993ea6eda6e5df1c2db2b28"],"362b99fad76af44afd5992acaddd72f365830103":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}