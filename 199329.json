{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(int,IndexableField).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(int,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeField(int fieldNumber, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(fieldNumber));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsWriter#writeField(int,IndexableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(info.number));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(int fieldNumber, IndexableField field) throws IOException {\n    write(FIELD);\n    write(Integer.toString(fieldNumber));\n    newLine();\n    \n    write(NAME);\n    write(field.name());\n    newLine();\n    \n    write(TYPE);\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          write(TYPE_INT);\n          newLine();\n          \n          write(VALUE);\n          write(Integer.toString(field.numericValue().intValue()));\n          newLine();\n          \n          break;\n        case LONG:\n          write(TYPE_LONG);\n          newLine();\n          \n          write(VALUE);\n          write(Long.toString(field.numericValue().longValue()));\n          newLine();\n          \n          break;\n        case FLOAT:\n          write(TYPE_FLOAT);\n          newLine();\n          \n          write(VALUE);\n          write(Float.toString(field.numericValue().floatValue()));\n          newLine();\n          \n          break;\n        case DOUBLE:\n          write(TYPE_DOUBLE);\n          newLine();\n          \n          write(VALUE);\n          write(Double.toString(field.numericValue().doubleValue()));\n          newLine();\n          \n          break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else { \n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        write(TYPE_BINARY);\n        newLine();\n        \n        write(VALUE);\n        write(bytes);\n        newLine();\n      } else {\n        write(TYPE_STRING);\n        newLine();\n        \n        write(VALUE);\n        write(field.stringValue());\n        newLine();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}