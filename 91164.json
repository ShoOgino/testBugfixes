{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9079f3378157b171c153a86c5b1171afd7e82bbb","date":1271323730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir1);\n    FlexTestUtil.verifyFlexVsPreFlex(r, dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(r, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = newDirectory(r);\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = newDirectory(r);\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(r, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(r, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = newDirectory(r);\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = newDirectory(r);\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(r, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    boolean doReaderPooling = r.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"9079f3378157b171c153a86c5b1171afd7e82bbb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"5f4e87790277826a2aea119328600dfb07761f32":["9079f3378157b171c153a86c5b1171afd7e82bbb","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9079f3378157b171c153a86c5b1171afd7e82bbb"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9079f3378157b171c153a86c5b1171afd7e82bbb":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9079f3378157b171c153a86c5b1171afd7e82bbb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}