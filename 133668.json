{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  // why protected\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c331bf2c0db325b2153017708714a1573f2ce35","date":1447166158,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  // why protected\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"62e52115b56781006682fd92c6938efaf174304d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c331bf2c0db325b2153017708714a1573f2ce35":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c331bf2c0db325b2153017708714a1573f2ce35"]},"commit2Childs":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["1c331bf2c0db325b2153017708714a1573f2ce35"],"62e52115b56781006682fd92c6938efaf174304d":[],"ee59f646cf24586a449cad77391a60a3ac8d8959":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","ee59f646cf24586a449cad77391a60a3ac8d8959"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"1c331bf2c0db325b2153017708714a1573f2ce35":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}