{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8cde5442ed20c0c3ffd14ea2e2a64609367c193","date":1528792993,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() && false) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() && false) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() && false) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"023604b80bedb02c79b94b0e4ae06c6ddff1937c","date":1534449927,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() && false) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"976feb6756f29529c6ce5b578e7d6fa8b1efcb30","date":1535461878,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() || true) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean() || true) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d80c1ad9241ae005a167d7ee8ac473601b0e57c","date":1559036097,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    realCluster = true;\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4","date":1576125737,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    realCluster = true;\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    realCluster = true;\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#setupCluster().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    realCluster = random().nextBoolean();\n    if (realCluster) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n      loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n      SPEED = 1;\n    } else {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      loader = ((SimCloudManager) cloudManager).getLoader();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"3f504512a03d978990cbff30db0522b354e846db":["a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4"],"023604b80bedb02c79b94b0e4ae06c6ddff1937c":["b8cde5442ed20c0c3ffd14ea2e2a64609367c193"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"df724d84dab24a0cc54bec95a8680867adc7f171":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c","a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4"],"b8cde5442ed20c0c3ffd14ea2e2a64609367c193":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43345f1452f9510f8aaadae6156fe0c834e7d957","b8cde5442ed20c0c3ffd14ea2e2a64609367c193"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["023604b80bedb02c79b94b0e4ae06c6ddff1937c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43345f1452f9510f8aaadae6156fe0c834e7d957","b8cde5442ed20c0c3ffd14ea2e2a64609367c193"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"023604b80bedb02c79b94b0e4ae06c6ddff1937c":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b8cde5442ed20c0c3ffd14ea2e2a64609367c193","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4":["3f504512a03d978990cbff30db0522b354e846db","df724d84dab24a0cc54bec95a8680867adc7f171"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"b8cde5442ed20c0c3ffd14ea2e2a64609367c193":["023604b80bedb02c79b94b0e4ae06c6ddff1937c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["a250c410a74277b5acb7ef5d8b5cb3e60fbd71a4","df724d84dab24a0cc54bec95a8680867adc7f171"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}