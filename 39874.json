{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new FacetLabel(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new FacetLabel(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/OrdinalMappingReaderTest#verifyResults(Directory,Directory,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  private void verifyResults(Directory dir, Directory taxDir, FacetIndexingParams fip) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = FacetsCollector.create(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.subResults) {\n      int weight = (int)facet.value;\n      int label = Integer.parseInt(facet.label.components[1]);\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}