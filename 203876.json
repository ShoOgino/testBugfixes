{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    \n    cluster.waitForJettyToStop(stoppedServer);\n    \n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateSearchDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    \n    cluster.waitForJettyToStop(stoppedServer);\n    \n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateSearchDelete() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    final String collectionName = \"testcollection\";\n\n    assertNotNull(cluster.getZkServer());\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    assertEquals(nodeCount, jettys.size());\n    for (JettySolrRunner jetty : jettys) {\n      assertTrue(jetty.isRunning());\n    }\n\n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    \n    cluster.waitForJettyToStop(stoppedServer);\n    \n    assertTrue(stoppedServer.isStopped());\n    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n\n    // create a server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    // create collection\n    createCollection(collectionName, null);\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    QueryResponse rsp = client.query(collectionName, new SolrQuery(\"*:*\"));\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    // remove a server not hosting any replicas\n    ZkStateReader zkStateReader = client.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,JettySolrRunner> jettyMap = new HashMap<>();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + \"://\").length());\n      jettyMap.put(key, jetty);\n    }\n    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();\n    // track the servers not host replicas\n    for (Slice slice : slices) {\n      jettyMap.remove(slice.getLeader().getNodeName().replace(\"_solr\", \"/solr\"));\n      for (Replica replica : slice.getReplicas()) {\n        jettyMap.remove(replica.getNodeName().replace(\"_solr\", \"/solr\"));\n      }\n    }\n    assertTrue(\"Expected to find a node without a replica\", jettyMap.size() > 0);\n    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();\n    jettys = cluster.getJettySolrRunners();\n    for (int i = 0; i < jettys.size(); ++i) {\n      if (jettys.get(i).equals(jettyToStop)) {\n        cluster.stopJettySolrRunner(i);\n        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());\n      }\n    }\n\n    // re-create a server (to restore original nodeCount count)\n    startedServer = cluster.startJettySolrRunner(jettyToStop);\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(nodeCount, cluster.getJettySolrRunners().size());\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n\n    // create it again\n    createCollection(collectionName, null);\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n\n    // check that there's no left-over state\n    assertEquals(0, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    // modify/query collection\n    new UpdateRequest().add(\"id\", \"1\").commit(client, collectionName);\n    assertEquals(1, client.query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}