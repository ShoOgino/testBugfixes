{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","sourceOld":"  @Test\n  public void testPlacement() throws Exception {\n    String rulesStr = \"rack:*,replica:<2\";\n    List<Rule> rules = parse(Arrays.asList(rulesStr));\n    Map shardVsReplicaCount = makeMap(\"shard1\", 3, \"shard2\", 3);\n    Map nodeVsTags = makeMap(\n        \"node1:80\", makeMap(\"rack\", \"178\"),\n        \"node2:80\", makeMap(\"rack\", \"179\"),\n        \"node3:80\", makeMap(\"rack\", \"180\"),\n        \"node4:80\", makeMap(\"rack\", \"181\"),\n        \"node5:80\", makeMap(\"rack\", \"182\")\n    );\n    MockSnitch.nodeVsTags = nodeVsTags;\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n    rulesStr = \"rack:*,replica:<2~\";\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null ,null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rulesStr = \"rack:*,shard:*,replica:<2\";//for each shard there can be a max of 1 replica\n    rules = parse(Arrays.asList(rulesStr));\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null,null ).getNodeMappings();\n    assertNotNull(mapping);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ec4fc24ecd353171e03bd016c1681cd97476015f","2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}