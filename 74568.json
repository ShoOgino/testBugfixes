{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","commits":[{"id":"a799d5c6eb6dd4c46e099b34640cc369f6db9155","date":1318737330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTest#testMapFieldName().mjava","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6621eda6ffc681632153605ee20ed10dbb76b9","date":1359505599,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Test that enforceSchema correctly catches illegal field and returns null\n    parameters.set(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(null, liProcessor.getMappedField(\"inputfield\", \"sv\"));\n\n    // Prove support for other mapping regex, still with enforceSchema=true\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}_s\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(\"title_no_s\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_sv_s\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","bugFix":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Test that enforceSchema correctly catches illegal field and returns null\n    parameters.set(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(null, liProcessor.getMappedField(\"inputfield\", \"sv\"));\n\n    // Prove support for other mapping regex, still with enforceSchema=true\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}_s\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(\"title_no_s\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_sv_s\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.add(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Prove support for other mapping regex\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}Text\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"title_noText\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_svText\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2a2c4468a8bdff4cb7487d8b203d835d963e65","date":1408126346,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapFieldName().mjava","sourceNew":"  @Test\n  public void testMapFieldName() throws Exception {\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Test that enforceSchema correctly catches illegal field and returns null\n    parameters.set(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(null, liProcessor.getMappedField(\"inputfield\", \"sv\"));\n\n    // Prove support for other mapping regex, still with enforceSchema=true\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}_s\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(\"title_no_s\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_sv_s\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapFieldName() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.map.lcmap\", \"jp:s zh:cjk ko:cjk\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n    \n    assertEquals(\"test_no\", liProcessor.getMappedField(\"test\", \"no\"));\n    assertEquals(\"test_en\", liProcessor.getMappedField(\"test\", \"en\"));\n    assertEquals(\"test_s\", liProcessor.getMappedField(\"test\", \"jp\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"zh\"));\n    assertEquals(\"test_cjk\", liProcessor.getMappedField(\"test\", \"ko\"));\n\n    // Test that enforceSchema correctly catches illegal field and returns null\n    parameters.set(\"langid.enforceSchema\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(null, liProcessor.getMappedField(\"inputfield\", \"sv\"));\n\n    // Prove support for other mapping regex, still with enforceSchema=true\n    parameters.add(\"langid.map.pattern\", \"text_(.*?)_field\");\n    parameters.add(\"langid.map.replace\", \"$1_{lang}_s\");\n    liProcessor = createLangIdProcessor(parameters);\n    assertEquals(\"title_no_s\", liProcessor.getMappedField(\"text_title_field\", \"no\"));\n    assertEquals(\"body_sv_s\", liProcessor.getMappedField(\"text_body_field\", \"sv\"));\n  }\n\n","bugFix":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a799d5c6eb6dd4c46e099b34640cc369f6db9155","0d6621eda6ffc681632153605ee20ed10dbb76b9"],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["0d6621eda6ffc681632153605ee20ed10dbb76b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d6621eda6ffc681632153605ee20ed10dbb76b9":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["61d5f95d14e5b9b046998c51e16709a398c15226","0d6621eda6ffc681632153605ee20ed10dbb76b9"],"0d6621eda6ffc681632153605ee20ed10dbb76b9":["61d5f95d14e5b9b046998c51e16709a398c15226","1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}