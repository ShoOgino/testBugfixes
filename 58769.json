{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"/dev/null","sourceNew":"  private void prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    queries = createQueries(queryList, anlzr);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b931634080ffdd860770bff5ce234c982053ac0","date":1174200666,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  private void prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    queries = createQueries(queryList, anlzr);\r\n  }\r\n\n","sourceOld":"  private void prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    queries = createQueries(queryList, anlzr);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    return createQueries(queryList, anlzr);\n  }\r\n\n","sourceOld":"  private void prepareQueries() throws Exception {\r\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    queries = createQueries(queryList, anlzr);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\r\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\r\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \r\n    \r\n    List queryList = new ArrayList(20);\r\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\r\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\r\n    return createQueries(queryList, anlzr);\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(BasicDocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(\"body\")));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(BasicDocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= (Analyzer) Class.forName(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance(); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List<Object> queryList = new ArrayList<Object>(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List queryList = new ArrayList(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List<Object> queryList = new ArrayList<Object>(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List<Object> queryList = new ArrayList<Object>(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List<Object> queryList = new ArrayList<Object>(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n    \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    List<Object> queryList = new ArrayList<Object>(20);\n    queryList.addAll(Arrays.asList(STANDARD_QUERIES));\n    queryList.addAll(Arrays.asList(getPrebuiltQueries(DocMaker.BODY_FIELD)));\n    return createQueries(queryList, anlzr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["2b931634080ffdd860770bff5ce234c982053ac0"],"2b931634080ffdd860770bff5ce234c982053ac0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"2b931634080ffdd860770bff5ce234c982053ac0":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["2b931634080ffdd860770bff5ce234c982053ac0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}