{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#validateZkRawResponse(List[String],String,String).mjava","commits":[{"id":"e08cb336d64c53393bb8a1b09f3af187b885f626","date":1564751020,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#validateZkRawResponse(List[String],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes the raw response lines returned by {@link #getZkRawResponse(String, String)} and runs some validations\n   * @param response the lines\n   * @param zkHostPort the host\n   * @param fourLetterWordCommand the 4lw command\n   * @return true if validation succeeds\n   * @throws SolrException if validation fails\n   */\n  protected boolean validateZkRawResponse(List<String> response, String zkHostPort, String fourLetterWordCommand) {\n    if (response == null || response.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n    }\n    if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n          \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n          \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n          \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55a2827d0d71109587ffe968ce8689de25394314","date":1565098388,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#validateZkRawResponse(List[String],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#validateZkRawResponse(List[String],String,String).mjava","sourceNew":"  /**\n   * Takes the raw response lines returned by {@link #getZkRawResponse(String, String)} and runs some validations\n   * @param response the lines\n   * @param zkHostPort the host\n   * @param fourLetterWordCommand the 4lw command\n   * @return true if validation succeeds\n   * @throws SolrException if validation fails\n   */\n  protected boolean validateZkRawResponse(List<String> response, String zkHostPort, String fourLetterWordCommand) {\n    if (response == null || response.isEmpty() || (response.size() == 1 && response.get(0).isBlank())) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n    }\n    if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n          \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n          \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n          \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Takes the raw response lines returned by {@link #getZkRawResponse(String, String)} and runs some validations\n   * @param response the lines\n   * @param zkHostPort the host\n   * @param fourLetterWordCommand the 4lw command\n   * @return true if validation succeeds\n   * @throws SolrException if validation fails\n   */\n  protected boolean validateZkRawResponse(List<String> response, String zkHostPort, String fourLetterWordCommand) {\n    if (response == null || response.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n    }\n    if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n          \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n          \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n          \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":0,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#validateZkRawResponse(List[String],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes the raw response lines returned by {@link #getZkRawResponse(String, String)} and runs some validations\n   * @param response the lines\n   * @param zkHostPort the host\n   * @param fourLetterWordCommand the 4lw command\n   * @return true if validation succeeds\n   * @throws SolrException if validation fails\n   */\n  protected boolean validateZkRawResponse(List<String> response, String zkHostPort, String fourLetterWordCommand) {\n    if (response == null || response.isEmpty() || (response.size() == 1 && response.get(0).isBlank())) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n    }\n    if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n          \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n          \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n          \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55a2827d0d71109587ffe968ce8689de25394314"],"55a2827d0d71109587ffe968ce8689de25394314":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"]},"commit2Childs":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["55a2827d0d71109587ffe968ce8689de25394314"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55a2827d0d71109587ffe968ce8689de25394314":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e08cb336d64c53393bb8a1b09f3af187b885f626","8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}