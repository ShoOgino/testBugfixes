{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":null,"sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":null,"sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":null,"sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}