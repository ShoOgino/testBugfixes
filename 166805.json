{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"  range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"  range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"  range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b46138b9b857dbdd1bbcc418aa1a6e18a62420","date":1389006583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (double) (float) min;\n        max = (double) (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"  range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdb09bb588aad4f37c1f5021637fb1529885a87c","date":1389007474,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (double) (float) min;\n        max = (double) (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Facets facets = new DoubleRangeFacetCounts(\"field\", new FloatFieldSource(\"field\"), sfc, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = _TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.shutdown();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minValue, maxValue, true, true));\n        } else {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true));\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minValue, maxValue, true, true));\n        } else {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true));\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchFilter = NumericRangeFilter.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            ddq.add(\"field\", NumericRangeFilter.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          } else {\n            ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n          }\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = NumericRangeQuery.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchQuery = NumericRangeQuery.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Filter fastMatchFilter;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minValue, maxValue, true, true));\n        } else {\n          fastMatchFilter = new QueryWrapperFilter(NumericRangeQuery.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true));\n        }\n      } else {\n        fastMatchFilter = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchFilter, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getFilter(fastMatchFilter, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new DimensionalFloatField(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = DimensionalRangeQuery.new1DFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = DimensionalRangeQuery.new1DFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", DimensionalRangeQuery.new1DFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatField(\"field\", v, Field.Store.NO));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = NumericRangeQuery.newFloatRange(\"field\", minValue, maxValue, true, true);\n        } else {\n          fastMatchQuery = NumericRangeQuery.newFloatRange(\"field\", minAcceptedValue, maxAcceptedValue, true, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", NumericRangeQuery.newFloatRange(\"field\", (float) range.min, (float) range.max, range.minInclusive, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.new1DFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new DimensionalFloatField(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = DimensionalRangeQuery.new1DFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = DimensionalRangeQuery.new1DFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", DimensionalRangeQuery.new1DFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.new1DFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.new1DFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.new1DFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = PointRangeQuery.newFloatRange(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", PointRangeQuery.newFloatRange(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, (float) range.max));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, (float) range.max));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, (float) range.max));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, true, maxValue, true);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, true, maxAcceptedValue, true);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, range.minInclusive, (float) range.max, range.maxInclusive));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff906d73df23583b6dadecd72106c456314223bf","date":1457475751,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      boolean[] rangeMinIncl = new boolean[numRange];\n      boolean[] rangeMaxIncl = new boolean[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        rangeMinIncl[rangeID] = minIncl;\n        rangeMaxIncl[rangeID] = maxIncl;\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          // We must do the nextUp/down in float space, here, because the nextUp that DoubleRange did in double space, when cast back to float,\n          // in fact does nothing!\n          float minFloat = (float) range.min;\n          if (rangeMinIncl[rangeID] == false) {\n            minFloat = Math.nextUp(minFloat);\n          }\n          float maxFloat = (float) range.max;\n          if (rangeMaxIncl[rangeID] == false) {\n            maxFloat = Math.nextAfter(maxFloat, Float.NEGATIVE_INFINITY);\n          }\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", minFloat, maxFloat));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", (float) range.min, (float) range.max));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc159f2408320326bfc4b170151402849e6427d","date":1457476230,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testRandomFloats().mjava","sourceNew":null,"sourceOld":"  public void testRandomFloats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numDocs = atLeast(1000);\n    float[] values = new float[numDocs];\n    float minValue = Float.POSITIVE_INFINITY;\n    float maxValue = Float.NEGATIVE_INFINITY;\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      float v = random().nextFloat();\n      values[i] = v;\n      doc.add(new FloatDocValuesField(\"field\", v));\n      doc.add(new FloatPoint(\"field\", v));\n      w.addDocument(doc);\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r, false);\n    FacetsConfig config = new FacetsConfig();\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter);\n      }\n      int numRange = TestUtil.nextInt(random(), 1, 5);\n      DoubleRange[] ranges = new DoubleRange[numRange];\n      int[] expectedCounts = new int[numRange];\n      float minAcceptedValue = Float.POSITIVE_INFINITY;\n      float maxAcceptedValue = Float.NEGATIVE_INFINITY;\n      boolean[] rangeMinIncl = new boolean[numRange];\n      boolean[] rangeMaxIncl = new boolean[numRange];\n      if (VERBOSE) {\n        System.out.println(\"TEST: \" + numRange + \" ranges\");\n      }\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        double min;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            min = prevRange.min;\n          } else {\n            min = prevRange.max;\n          }\n        } else {\n          min = random().nextDouble();\n        }\n        double max;\n        if (rangeID > 0 && random().nextInt(10) == 7) {\n          // Use an existing boundary:\n          DoubleRange prevRange = ranges[random().nextInt(rangeID)];\n          if (random().nextBoolean()) {\n            max = prevRange.min;\n          } else {\n            max = prevRange.max;\n          }\n        } else {\n          max = random().nextDouble();\n        }\n\n        if (min > max) {\n          double x = min;\n          min = max;\n          max = x;\n        }\n\n        // Must truncate to float precision so that the\n        // drill-down counts (which use NRQ.newFloatRange)\n        // are correct:\n        min = (float) min;\n        max = (float) max;\n\n        boolean minIncl;\n        boolean maxIncl;\n        if (min == max) {\n          minIncl = true;\n          maxIncl = true;\n        } else {\n          minIncl = random().nextBoolean();\n          maxIncl = random().nextBoolean();\n        }\n        rangeMinIncl[rangeID] = minIncl;\n        rangeMaxIncl[rangeID] = maxIncl;\n        ranges[rangeID] = new DoubleRange(\"r\" + rangeID, min, minIncl, max, maxIncl);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST:   range \" + rangeID + \": \" + ranges[rangeID]);\n        }\n\n        // Do \"slow but hopefully correct\" computation of\n        // expected count:\n        for(int i=0;i<numDocs;i++) {\n          boolean accept = true;\n          if (minIncl) {\n            accept &= values[i] >= min;\n          } else {\n            accept &= values[i] > min;\n          }\n          if (maxIncl) {\n            accept &= values[i] <= max;\n          } else {\n            accept &= values[i] < max;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:   check doc=\" + i + \" val=\" + values[i] + \" accept=\" + accept);\n          }\n          if (accept) {\n            expectedCounts[rangeID]++;\n            minAcceptedValue = Math.min(minAcceptedValue, values[i]);\n            maxAcceptedValue = Math.max(maxAcceptedValue, values[i]);\n          }\n        }\n      }\n\n      FacetsCollector sfc = new FacetsCollector();\n      s.search(new MatchAllDocsQuery(), sfc);\n      Query fastMatchQuery;\n      if (random().nextBoolean()) {\n        if (random().nextBoolean()) {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minValue, maxValue);\n        } else {\n          fastMatchQuery = FloatPoint.newRangeQuery(\"field\", minAcceptedValue, maxAcceptedValue);\n        }\n      } else {\n        fastMatchQuery = null;\n      }\n      ValueSource vs = new FloatFieldSource(\"field\");\n      Facets facets = new DoubleRangeFacetCounts(\"field\", vs, sfc, fastMatchQuery, ranges);\n      FacetResult result = facets.getTopChildren(10, \"field\");\n      assertEquals(numRange, result.labelValues.length);\n      for(int rangeID=0;rangeID<numRange;rangeID++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: verify range \" + rangeID + \" expectedCount=\" + expectedCounts[rangeID]);\n        }\n        LabelAndValue subNode = result.labelValues[rangeID];\n        assertEquals(\"r\" + rangeID, subNode.label);\n        assertEquals(expectedCounts[rangeID], subNode.value.intValue());\n\n        DoubleRange range = ranges[rangeID];\n\n        // Test drill-down:\n        DrillDownQuery ddq = new DrillDownQuery(config);\n        if (random().nextBoolean()) {\n          // We must do the nextUp/down in float space, here, because the nextUp that DoubleRange did in double space, when cast back to float,\n          // in fact does nothing!\n          float minFloat = (float) range.min;\n          if (rangeMinIncl[rangeID] == false) {\n            minFloat = Math.nextUp(minFloat);\n          }\n          float maxFloat = (float) range.max;\n          if (rangeMaxIncl[rangeID] == false) {\n            maxFloat = Math.nextAfter(maxFloat, Float.NEGATIVE_INFINITY);\n          }\n          ddq.add(\"field\", FloatPoint.newRangeQuery(\"field\", minFloat, maxFloat));\n        } else {\n          ddq.add(\"field\", range.getQuery(fastMatchQuery, vs));\n        }\n        assertEquals(expectedCounts[rangeID], s.search(ddq, 10).totalHits);\n      }\n    }\n\n    w.close();\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2713584a660051cd646423be682771e3bbd99985":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"ff906d73df23583b6dadecd72106c456314223bf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["2713584a660051cd646423be682771e3bbd99985"],"c422e924212367b334b4938f1fd3e44438e88c40":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","1800b996d8677670482a071dcb7a48b08c423ace"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cdb09bb588aad4f37c1f5021637fb1529885a87c":["55b46138b9b857dbdd1bbcc418aa1a6e18a62420"],"55b46138b9b857dbdd1bbcc418aa1a6e18a62420":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"6613659748fe4411a7dcf85266e55db1f95f7315":["40640359164f629dd440a47df2e145d084ce9645"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7cc159f2408320326bfc4b170151402849e6427d":["ff906d73df23583b6dadecd72106c456314223bf"],"40640359164f629dd440a47df2e145d084ce9645":["cdb09bb588aad4f37c1f5021637fb1529885a87c"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"770342641f7b505eaa8dccdc666158bff2419109":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"1800b996d8677670482a071dcb7a48b08c423ace":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7cc159f2408320326bfc4b170151402849e6427d"]},"commit2Childs":{"2713584a660051cd646423be682771e3bbd99985":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ff906d73df23583b6dadecd72106c456314223bf":["7cc159f2408320326bfc4b170151402849e6427d"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["770342641f7b505eaa8dccdc666158bff2419109"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","4edc984f0f4ac77c37e48ace2932f780f888453c"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["55b46138b9b857dbdd1bbcc418aa1a6e18a62420"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cdb09bb588aad4f37c1f5021637fb1529885a87c":["40640359164f629dd440a47df2e145d084ce9645"],"55b46138b9b857dbdd1bbcc418aa1a6e18a62420":["cdb09bb588aad4f37c1f5021637fb1529885a87c"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"40640359164f629dd440a47df2e145d084ce9645":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7cc159f2408320326bfc4b170151402849e6427d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ff906d73df23583b6dadecd72106c456314223bf"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}