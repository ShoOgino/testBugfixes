{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","pathOld":"/dev/null","sourceNew":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n    SimpleOrderedMap o = (SimpleOrderedMap) new JavaBinCodec().unmarshal(baos.toByteArray());\n    SolrDocumentList list = (SolrDocumentList) o.get(\"response\");\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","sourceNew":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n\n    SolrDocumentList list;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      SimpleOrderedMap o = (SimpleOrderedMap) jbc.unmarshal(baos.toByteArray());\n      list = (SolrDocumentList) o.get(\"response\");\n    }\n\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n  }\n\n","sourceOld":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n    SimpleOrderedMap o = (SimpleOrderedMap) new JavaBinCodec().unmarshal(baos.toByteArray());\n    SolrDocumentList list = (SolrDocumentList) o.get(\"response\");\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","sourceNew":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n\n    SolrDocumentList list;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      SimpleOrderedMap o = (SimpleOrderedMap) jbc.unmarshal(baos.toByteArray());\n      list = (SolrDocumentList) o.get(\"response\");\n    }\n\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n  }\n\n","sourceOld":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n    SimpleOrderedMap o = (SimpleOrderedMap) new JavaBinCodec().unmarshal(baos.toByteArray());\n    SolrDocumentList list = (SolrDocumentList) o.get(\"response\");\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testFastJavabinStreamingDecoder().mjava","sourceNew":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n\n    SolrDocumentList list;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      @SuppressWarnings({\"rawtypes\"})\n      SimpleOrderedMap o = (SimpleOrderedMap) jbc.unmarshal(baos.toByteArray());\n      list = (SolrDocumentList) o.get(\"response\");\n    }\n\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      @SuppressWarnings({\"rawtypes\"})\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n  }\n\n","sourceOld":"  public void testFastJavabinStreamingDecoder() throws IOException {\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (InputStream is = getClass().getResourceAsStream(\"/solrj/javabin_sample.bin\")) {\n      IOUtils.copy(is, baos);\n    }\n\n    SolrDocumentList list;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      SimpleOrderedMap o = (SimpleOrderedMap) jbc.unmarshal(baos.toByteArray());\n      list = (SolrDocumentList) o.get(\"response\");\n    }\n\n    System.out.println(\" \" + list.getNumFound() + \" , \" + list.getStart() + \" , \" + list.getMaxScore());\n    class Pojo {\n      long _idx;\n      CharSequence id;\n      boolean inStock;\n      float price;\n      List<NamedList> children;\n    }\n    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {\n\n      @Override\n      public Object initDocList(Long numFound, Long start, Float maxScore) {\n        assertEquals((Long) list.getNumFound(), numFound);\n        assertEquals((Long) list.getStart(), start);\n        assertEquals(list.getMaxScore(), maxScore);\n        return new int[1];\n      }\n\n      @Override\n      public Object startDoc(Object docListObj) {\n        Pojo pojo = new Pojo();\n        pojo._idx = ((int[]) docListObj)[0]++;\n        return pojo;\n      }\n\n      @Override\n      public void field(DataEntry field, Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        if (\"id\".equals(field.name())) {\n          pojo.id = ((Utf8CharSequence) field.val()).clone();\n        } else if (field.type() == DataEntry.Type.BOOL && \"inStock\".equals(field.name())) {\n          pojo.inStock = field.boolVal();\n        } else if (field.type() == DataEntry.Type.FLOAT && \"price\".equals(field.name())) {\n          pojo.price = field.floatVal();\n        }\n\n      }\n\n      @Override\n      public void endDoc(Object docObj) {\n        Pojo pojo = (Pojo) docObj;\n        SolrDocument doc = list.get((int) pojo._idx);\n        assertEquals(doc.get(\"id\"), pojo.id.toString());\n        if (doc.get(\"inStock\") != null)\n          assertEquals(doc.get(\"inStock\"), pojo.inStock);\n        if (doc.get(\"price\") != null)\n          assertEquals((Float) doc.get(\"price\"), pojo.price, 0.001);\n      }\n    });\n    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["220577719e3753e52195ed66dc9af6c4e65e2873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["220577719e3753e52195ed66dc9af6c4e65e2873","8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"220577719e3753e52195ed66dc9af6c4e65e2873":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["9ba1b632c041956c93c41aa1143d16a567014891","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}