{"path":"backwards/src/java/org/apache/lucene/index/IndexReader#clone().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}