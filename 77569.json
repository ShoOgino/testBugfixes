{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.slice(\"fixed-binary\", bytes.offset, bytes.count * bytes.maxLength);\n\n    final BytesRef term = new BytesRef(bytes.maxLength);\n    final byte[] buffer = term.bytes;\n    final int length = term.length = bytes.maxLength;\n    \n    return new LongBinaryDocValues() {\n      @Override\n      public BytesRef get(long id) {\n        try {\n          data.seek(id * length);\n          data.readBytes(buffer, 0, buffer.length);\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}