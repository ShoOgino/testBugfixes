{"path":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b65d3e2c837614823b0652e54f44ff76463de22","date":1355144308,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList.toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList.toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(\n      List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList\n        .toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList.toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsPayloadIterator#EnhancementsPayloadIterator(List[CategoryEnhancement],IndexReader,Term).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor.\n   * \n   * @param enhancementsList\n   *            A list of the {@link CategoryEnhancement}s from the indexing\n   *            params.\n   * @param indexReader\n   *            A reader of the index.\n   * @param term\n   *            The category term to iterate.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public EnhancementsPayloadIterator(List<CategoryEnhancement> enhancementsList,\n      IndexReader indexReader, Term term) throws IOException {\n    super(indexReader, term);\n    EnhancedCategories = enhancementsList.toArray(new CategoryEnhancement[enhancementsList.size()]);\n    enhancementLength = new int[EnhancedCategories.length];\n    enhancementStart = new int[EnhancedCategories.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["3b65d3e2c837614823b0652e54f44ff76463de22"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","3b65d3e2c837614823b0652e54f44ff76463de22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"3b65d3e2c837614823b0652e54f44ff76463de22":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["407687e67faf6e1f02a211ca078d8e3eed631027","3b65d3e2c837614823b0652e54f44ff76463de22"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3b65d3e2c837614823b0652e54f44ff76463de22":["7a1037d9031f9702ee6912f8751ef1d5320da6d9","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}