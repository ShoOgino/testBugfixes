{"path":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseExtendedFieldValue(SolrInputField,int).mjava","commits":[{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseExtendedFieldValue(SolrInputField,int).mjava","pathOld":"/dev/null","sourceNew":"  private void parseExtendedFieldValue(SolrInputField sif, int ev)  throws IOException {\n    assert ev == JSONParser.OBJECT_START;\n\n    float boost = 1.0f;\n    Object normalFieldValue = null;\n    Map<String, Object> extendedInfo = null;\n\n    for (;;) {\n      ev = parser.nextEvent();\n      switch (ev) {\n        case JSONParser.STRING:\n          String label = parser.getString();\n          if (\"boost\".equals(label)) {\n            ev = parser.nextEvent();\n            if( ev != JSONParser.NUMBER &&\n                ev != JSONParser.LONG &&\n                ev != JSONParser.BIGNUMBER ) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n            }\n\n            boost = (float)parser.getDouble();\n          } else if (\"value\".equals(label)) {\n            normalFieldValue = parseNormalFieldValue(parser.nextEvent());\n          } else {\n            // If we encounter other unknown map keys, then use a map\n            if (extendedInfo == null) {\n              extendedInfo = new HashMap<String, Object>(2);\n            }\n            // for now, the only extended info will be field values\n            // we could either store this as an Object or a SolrInputField\n            Object val = parseNormalFieldValue(parser.nextEvent());\n            extendedInfo.put(label, val);\n          }\n          break;\n\n        case JSONParser.OBJECT_END:\n          if (extendedInfo != null) {\n            if (normalFieldValue != null) {\n              extendedInfo.put(\"value\",normalFieldValue);\n            }\n            sif.setValue(extendedInfo, boost);\n          } else {\n            sif.setValue(normalFieldValue, boost);\n          }\n          return;\n\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing JSON extended field value. Unexpected \"+JSONParser.getEventString(ev) );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseExtendedFieldValue(SolrInputField,int).mjava","sourceNew":null,"sourceOld":"  private void parseExtendedFieldValue(SolrInputField sif, int ev)  throws IOException {\n    assert ev == JSONParser.OBJECT_START;\n\n    float boost = 1.0f;\n    Object normalFieldValue = null;\n    Map<String, Object> extendedInfo = null;\n\n    for (;;) {\n      ev = parser.nextEvent();\n      switch (ev) {\n        case JSONParser.STRING:\n          String label = parser.getString();\n          if (\"boost\".equals(label)) {\n            ev = parser.nextEvent();\n            if( ev != JSONParser.NUMBER &&\n                ev != JSONParser.LONG &&\n                ev != JSONParser.BIGNUMBER ) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"boost should have number! \"+JSONParser.getEventString(ev) );\n            }\n\n            boost = (float)parser.getDouble();\n          } else if (\"value\".equals(label)) {\n            normalFieldValue = parseNormalFieldValue(parser.nextEvent());\n          } else {\n            // If we encounter other unknown map keys, then use a map\n            if (extendedInfo == null) {\n              extendedInfo = new HashMap<String, Object>(2);\n            }\n            // for now, the only extended info will be field values\n            // we could either store this as an Object or a SolrInputField\n            Object val = parseNormalFieldValue(parser.nextEvent());\n            extendedInfo.put(label, val);\n          }\n          break;\n\n        case JSONParser.OBJECT_END:\n          if (extendedInfo != null) {\n            if (normalFieldValue != null) {\n              extendedInfo.put(\"value\",normalFieldValue);\n            }\n            sif.setValue(extendedInfo, boost);\n          } else {\n            sif.setValue(normalFieldValue, boost);\n          }\n          return;\n\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing JSON extended field value. Unexpected \"+JSONParser.getEventString(ev) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["1bea3922196318026c4274f2013416acb60c691e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bea3922196318026c4274f2013416acb60c691e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bea3922196318026c4274f2013416acb60c691e"],"1bea3922196318026c4274f2013416acb60c691e":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}