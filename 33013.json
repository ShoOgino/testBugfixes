{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e","date":1423943091,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n                                          CloudSolrClient client, Replica replica, String shard)\n          throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n            shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n              .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n                shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n                                          CloudSolrClient client, Replica replica, String shard)\n          throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n            shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n              .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n                shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n                                          CloudSolrClient client, Replica replica, String shard)\n          throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n            shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n              .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n                shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","sourceNew":null,"sourceOld":"  static void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = client.getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bcf9886c8ff537aafde14de48ebf744f5673f08b","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["073a74201a21520f4fc543c9f6d1d87c19a467b2"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["bcf9886c8ff537aafde14de48ebf744f5673f08b","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["609b19bb8de96c4e5e338d1d4a0349957522b601","bc8f206328a706450934717bec7ccc22ad166fc0"],"8d15cb78bf74f65bc452a5d236bb15ab40dedf7e":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["073a74201a21520f4fc543c9f6d1d87c19a467b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bafca15d8e408346a67f4282ad1143b88023893b":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}