{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","commits":[{"id":"d34b6041e6d363dad71812ce12b81d4b1aeb553a","date":1444251997,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-6826\n  public void testNoTermsInField() throws Exception {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document document = new Document();\n    document.add(new StringField(\"deleted\", \"0\", Field.Store.YES));\n    writer.addDocument(document);\n\n    DirectoryReader reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    Directory directory2 = new RAMDirectory();\n    writer = new IndexWriter(directory2, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] codecReaders = new CodecReader[leaves.size()];\n    for (int i = 0; i < leaves.size(); i++) {\n      codecReaders[i] = new MigratingCodecReader((CodecReader) leaves.get(i).reader());\n    }\n\n    writer.addIndexes(codecReaders); // <- bang\n\n    IOUtils.close(writer, reader, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","sourceNew":"  // LUCENE-6826\n  public void testNoTermsInField() throws Exception {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document document = new Document();\n    document.add(new StringField(\"deleted\", \"0\", Field.Store.YES));\n    writer.addDocument(document);\n\n    DirectoryReader reader = DirectoryReader.open(writer);\n    writer.close();\n\n    Directory directory2 = new RAMDirectory();\n    writer = new IndexWriter(directory2, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] codecReaders = new CodecReader[leaves.size()];\n    for (int i = 0; i < leaves.size(); i++) {\n      codecReaders[i] = new MigratingCodecReader((CodecReader) leaves.get(i).reader());\n    }\n\n    writer.addIndexes(codecReaders); // <- bang\n\n    IOUtils.close(writer, reader, directory);\n  }\n\n","sourceOld":"  // LUCENE-6826\n  public void testNoTermsInField() throws Exception {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document document = new Document();\n    document.add(new StringField(\"deleted\", \"0\", Field.Store.YES));\n    writer.addDocument(document);\n\n    DirectoryReader reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    Directory directory2 = new RAMDirectory();\n    writer = new IndexWriter(directory2, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] codecReaders = new CodecReader[leaves.size()];\n    for (int i = 0; i < leaves.size(); i++) {\n      codecReaders[i] = new MigratingCodecReader((CodecReader) leaves.get(i).reader());\n    }\n\n    writer.addIndexes(codecReaders); // <- bang\n\n    IOUtils.close(writer, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiTermsEnum#testNoTermsInField().mjava","sourceNew":"  // LUCENE-6826\n  public void testNoTermsInField() throws Exception {\n    Directory directory = new ByteBuffersDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document document = new Document();\n    document.add(new StringField(\"deleted\", \"0\", Field.Store.YES));\n    writer.addDocument(document);\n\n    DirectoryReader reader = DirectoryReader.open(writer);\n    writer.close();\n\n    Directory directory2 = new ByteBuffersDirectory();\n    writer = new IndexWriter(directory2, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] codecReaders = new CodecReader[leaves.size()];\n    for (int i = 0; i < leaves.size(); i++) {\n      codecReaders[i] = new MigratingCodecReader((CodecReader) leaves.get(i).reader());\n    }\n\n    writer.addIndexes(codecReaders); // <- bang\n\n    IOUtils.close(writer, reader, directory);\n  }\n\n","sourceOld":"  // LUCENE-6826\n  public void testNoTermsInField() throws Exception {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document document = new Document();\n    document.add(new StringField(\"deleted\", \"0\", Field.Store.YES));\n    writer.addDocument(document);\n\n    DirectoryReader reader = DirectoryReader.open(writer);\n    writer.close();\n\n    Directory directory2 = new RAMDirectory();\n    writer = new IndexWriter(directory2, new IndexWriterConfig(new MockAnalyzer(random())));\n    \n    List<LeafReaderContext> leaves = reader.leaves();\n    CodecReader[] codecReaders = new CodecReader[leaves.size()];\n    for (int i = 0; i < leaves.size(); i++) {\n      codecReaders[i] = new MigratingCodecReader((CodecReader) leaves.get(i).reader());\n    }\n\n    writer.addIndexes(codecReaders); // <- bang\n\n    IOUtils.close(writer, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["d34b6041e6d363dad71812ce12b81d4b1aeb553a"],"d34b6041e6d363dad71812ce12b81d4b1aeb553a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["d77dafd89756a5161d244985903e3487ca109182"],"d34b6041e6d363dad71812ce12b81d4b1aeb553a":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d34b6041e6d363dad71812ce12b81d4b1aeb553a"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}