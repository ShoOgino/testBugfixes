{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.reusableTokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.reusableTokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf7efd82433f3f64684711c16edfd149db6af111":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["9454a6510e2db155fb01faa5c049b06ece95fab9","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["cf7efd82433f3f64684711c16edfd149db6af111","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}