{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","commits":[{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnum.Frame).mjava","sourceNew":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":"  void endBlock(SegmentTermsEnum.Frame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","pathOld":"/dev/null","sourceNew":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","sourceNew":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.totalSuffixBytes - frame.totalStatsBytes;\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a356e37aed258bcd168680472f8d1dbc6f396935","date":1580233110,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnumFrame).mjava","sourceNew":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.totalSuffixBytes - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":"  void endBlock(SegmentTermsEnumFrame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.totalSuffixBytes - frame.totalStatsBytes;\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a356e37aed258bcd168680472f8d1dbc6f396935":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a356e37aed258bcd168680472f8d1dbc6f396935"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["9407318969e8504257b4c5764c65755a043e5404"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"9407318969e8504257b4c5764c65755a043e5404":["a356e37aed258bcd168680472f8d1dbc6f396935"],"a356e37aed258bcd168680472f8d1dbc6f396935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}