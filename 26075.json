{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","commits":[{"id":"ebe5243ceee1747a4161c2ea5f9be261be499288","date":1422960251,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"This test is used during development when analyze normalizations in large amounts of text\")\n  @Test\n  public void testLargeData() throws IOException {\n    Path input = Paths.get(\"/tmp/test.txt\");\n    Path tokenizedOutput = Paths.get(\"/tmp/test.tok.txt\");\n    Path normalizedOutput = Paths.get(\"/tmp/test.norm.txt\");\n\n    Analyzer plainAnalyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), null, false, JapaneseTokenizer.Mode.SEARCH);\n        return new TokenStreamComponents(tokenizer);\n      }\n    };\n\n    analyze(\n        plainAnalyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(tokenizedOutput, StandardCharsets.UTF_8)\n    );\n\n    analyze(\n        analyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(normalizedOutput, StandardCharsets.UTF_8)\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","sourceNew":"  @Ignore(\"This test is used during development when analyze normalizations in large amounts of text\")\n  @Test\n  public void testLargeData() throws IOException {\n    Path input = Paths.get(\"/tmp/test.txt\");\n    Path tokenizedOutput = Paths.get(\"/tmp/test.tok.txt\");\n    Path normalizedOutput = Paths.get(\"/tmp/test.norm.txt\");\n\n    Analyzer plainAnalyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), null, false, JapaneseTokenizer.Mode.SEARCH);\n        return new TokenStreamComponents(tokenizer);\n      }\n    };\n\n    analyze(\n        plainAnalyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(tokenizedOutput, StandardCharsets.UTF_8)\n    );\n\n    analyze(\n        analyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(normalizedOutput, StandardCharsets.UTF_8)\n    );\n    plainAnalyzer.close();\n  }\n\n","sourceOld":"  @Ignore(\"This test is used during development when analyze normalizations in large amounts of text\")\n  @Test\n  public void testLargeData() throws IOException {\n    Path input = Paths.get(\"/tmp/test.txt\");\n    Path tokenizedOutput = Paths.get(\"/tmp/test.tok.txt\");\n    Path normalizedOutput = Paths.get(\"/tmp/test.norm.txt\");\n\n    Analyzer plainAnalyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), null, false, JapaneseTokenizer.Mode.SEARCH);\n        return new TokenStreamComponents(tokenizer);\n      }\n    };\n\n    analyze(\n        plainAnalyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(tokenizedOutput, StandardCharsets.UTF_8)\n    );\n\n    analyze(\n        analyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(normalizedOutput, StandardCharsets.UTF_8)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter#testLargeData().mjava","sourceNew":"  @Ignore(\"This test is used during development when analyze normalizations in large amounts of text\")\n  @Test\n  public void testLargeData() throws IOException {\n    Path input = Paths.get(\"/tmp/test.txt\");\n    Path tokenizedOutput = Paths.get(\"/tmp/test.tok.txt\");\n    Path normalizedOutput = Paths.get(\"/tmp/test.norm.txt\");\n\n    Analyzer plainAnalyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), null, false, JapaneseTokenizer.Mode.SEARCH);\n        return new TokenStreamComponents(tokenizer);\n      }\n    };\n\n    analyze(\n        plainAnalyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(tokenizedOutput, StandardCharsets.UTF_8)\n    );\n\n    analyze(\n        analyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(normalizedOutput, StandardCharsets.UTF_8)\n    );\n    plainAnalyzer.close();\n  }\n\n","sourceOld":"  @Ignore(\"This test is used during development when analyze normalizations in large amounts of text\")\n  @Test\n  public void testLargeData() throws IOException {\n    Path input = Paths.get(\"/tmp/test.txt\");\n    Path tokenizedOutput = Paths.get(\"/tmp/test.tok.txt\");\n    Path normalizedOutput = Paths.get(\"/tmp/test.norm.txt\");\n\n    Analyzer plainAnalyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), null, false, JapaneseTokenizer.Mode.SEARCH);\n        return new TokenStreamComponents(tokenizer);\n      }\n    };\n\n    analyze(\n        plainAnalyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(tokenizedOutput, StandardCharsets.UTF_8)\n    );\n\n    analyze(\n        analyzer,\n        Files.newBufferedReader(input, StandardCharsets.UTF_8),\n        Files.newBufferedWriter(normalizedOutput, StandardCharsets.UTF_8)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebe5243ceee1747a4161c2ea5f9be261be499288":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ebe5243ceee1747a4161c2ea5f9be261be499288","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ebe5243ceee1747a4161c2ea5f9be261be499288"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ebe5243ceee1747a4161c2ea5f9be261be499288":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebe5243ceee1747a4161c2ea5f9be261be499288"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}