{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.log(Level.SEVERE, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33c5df47ecbf734182bdfec8f59154a8dbecc2e3","8d22c66b0638c82521891318fc352042c5b86e03","5871a631b6817f1cef161749ceffdc037e67558a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d22c66b0638c82521891318fc352042c5b86e03","date":1219993248,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.log(Level.SEVERE, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity);\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.log(Level.SEVERE, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.log(Level.SEVERE, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"157728c1f42b384dfc049157cc95adc767da3415","date":1224572739,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrInputDocument,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,SolrWriter.SolrDoc,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrInputDocument doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = new SolrInputDocument();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, SolrWriter.SolrDoc doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessor entityProcessor = getEntityProcessor(entity, dataImporter.getCore());\n    DataSource ds = entity.dataSrc;\n    if (verboseDebug) {\n      ds = DebugLogger.wrapDs(ds);\n    }\n    ContextImpl ctx = new ContextImpl(entity, vr, ds,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            requestParameters.requestParams, session, parentCtx, dataImporter);\n    entityProcessor.init(ctx);\n\n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            if (ctx.getDocSession() != null)\n              ctx.getDocSession().clear();\n            else\n              ctx.setDocSession(new HashMap<String, Object>());\n            doc = writer.getSolrDocInstance();\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name));\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null)\n            break;\n\n          if (arow.containsKey(DOC_BOOST)) {\n            setDocumentBoost(doc, arow);\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (entity.fields != null && doc != null) {\n            addFields(entity, doc, arow);\n          }\n          if (isRoot)\n            vr.removeNamespace(null);\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc, null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            boolean result = writer.upload(doc);\n            doc = null;\n            if (result)\n              importStatistics.docCount.incrementAndGet();\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n            } else {\n              LOG.error( \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8d22c66b0638c82521891318fc352042c5b86e03":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"157728c1f42b384dfc049157cc95adc767da3415":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["8d22c66b0638c82521891318fc352042c5b86e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d22c66b0638c82521891318fc352042c5b86e03":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["8d22c66b0638c82521891318fc352042c5b86e03"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"157728c1f42b384dfc049157cc95adc767da3415":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["157728c1f42b384dfc049157cc95adc767da3415"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["157728c1f42b384dfc049157cc95adc767da3415","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}