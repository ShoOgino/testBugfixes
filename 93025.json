{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingUpdates.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort(Set[String]).mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    aborted = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingUpdates.clear();\n    } finally {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort(Set<String> createdFiles) {\n    //System.out.println(Thread.currentThread().getName() + \": now abort seg=\" + segmentInfo.name);\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingUpdates.clear();\n      createdFiles.addAll(directory.getCreatedFiles());\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9299079153fd7895bf3cf6835cf7019af2ba89b3"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}