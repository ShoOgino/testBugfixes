{"path":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","commits":[{"id":"7b01e327764dff0c4e657a87afb8a11306045b76","date":1320242486,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void createMonitor() throws Exception {\n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41b33e404d37029c73cefa7f85028f7230d8cde1","date":1337515582,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","sourceNew":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","sourceOld":"  @Before\n  public void createMonitor() throws Exception {\n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","sourceNew":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","sourceOld":"  @Before\n  public void createMonitor() throws Exception {\n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a043e93ce5cee80458f8468ac6db8f024055773","date":1486677634,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","sourceNew":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n\n    // isolate searcher getting ready from this test\n    monitor.searcher.poll(5000, MILLISECONDS);\n  }\n\n","sourceOld":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25aea5e95fe9399f6ca9758178fa3a003159ff4d","date":1507651705,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#createMonitor().mjava","sourceNew":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    updater.setCommitWithinSoftCommit(true); // foce to default, let tests change as needed\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n\n    // isolate searcher getting ready from this test\n    monitor.searcher.poll(5000, MILLISECONDS);\n  }\n\n","sourceOld":"  @Before\n  public void createMonitor() throws Exception {\n    assumeFalse(\"This test is not working on Windows (or maybe machines with only 2 CPUs)\",\n      Constants.WINDOWS);\n  \n    SolrCore core = h.getCore();\n\n    updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    monitor = new MockEventListener();\n\n    core.registerNewSearcherListener(monitor);\n    updater.registerSoftCommitCallback(monitor);\n    updater.registerCommitCallback(monitor);\n\n    // isolate searcher getting ready from this test\n    monitor.searcher.poll(5000, MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a043e93ce5cee80458f8468ac6db8f024055773":["41b33e404d37029c73cefa7f85028f7230d8cde1"],"7b01e327764dff0c4e657a87afb8a11306045b76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"41b33e404d37029c73cefa7f85028f7230d8cde1":["7b01e327764dff0c4e657a87afb8a11306045b76"],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["6a043e93ce5cee80458f8468ac6db8f024055773"],"ef0d8a69209261514c5739c770bba706c2308450":["7b01e327764dff0c4e657a87afb8a11306045b76","41b33e404d37029c73cefa7f85028f7230d8cde1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"]},"commit2Childs":{"6a043e93ce5cee80458f8468ac6db8f024055773":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"],"7b01e327764dff0c4e657a87afb8a11306045b76":["41b33e404d37029c73cefa7f85028f7230d8cde1","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b01e327764dff0c4e657a87afb8a11306045b76"],"41b33e404d37029c73cefa7f85028f7230d8cde1":["6a043e93ce5cee80458f8468ac6db8f024055773","ef0d8a69209261514c5739c770bba706c2308450"],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}