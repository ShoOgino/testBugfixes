{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermEnum terms(Term term) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n\t\n\t\t\tint i; // index into info.sortedTerms\n\t\t\tint j; // index into sortedFields\n\t\t\t\n\t\t\tsortFields();\n\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n\t\t\tif (j < 0) { // not found; choose successor\n\t\t\t\tj = -j -1; \n\t\t\t\ti = 0;\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t}\n\t\t\telse { // found\n\t\t\t\tInfo info = getInfo(j);\n\t\t\t\tinfo.sortTerms();\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n\t\t\t\tif (i < 0) { // not found; choose successor\n\t\t\t\t\ti = -i -1;\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int ix = i;\n\t\t\tfinal int jx = j;\n\t\n\t\t\treturn new TermEnum() {\n\t\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\n\t\t\t\tprivate int j = jx; // index into sortedFields\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\n\t\n\t\t\t\t\t// move to successor\n\t\t\t\t\tj++;\n\t\t\t\t\ti = 0;\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tinfo.sortTerms();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\n\t\t\t\tpublic Term term() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n\t\t\t\t\tif (j >= sortedFields.length) return null;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\n\t\t\t\t\tString fieldName = (String) sortedFields[j].getKey();\n\t\t\t\t\treturn new Term(fieldName, (String) info.sortedTerms[i].getKey());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int docFreq() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\n\t\t\t\t\treturn numPositions(info.getPositions(i));\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"\t\tpublic TermEnum terms(Term term) {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\r\n\t\r\n\t\t\tint i; // index into info.sortedTerms\r\n\t\t\tint j; // index into sortedFields\r\n\t\t\t\r\n\t\t\tsortFields();\r\n\t\t\tif (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\r\n\t\t\t\tj = 0; // fast path\r\n\t\t\t} else {\r\n\t\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (j < 0) { // not found; choose successor\r\n\t\t\t\tj = -j -1; \r\n\t\t\t\ti = 0;\r\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\r\n\t\t\t}\r\n\t\t\telse { // found\r\n\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\tinfo.sortTerms();\r\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\r\n\t\t\t\tif (i < 0) { // not found; choose successor\r\n\t\t\t\t\ti = -i -1;\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfinal int ix = i;\r\n\t\t\tfinal int jx = j;\r\n\t\r\n\t\t\treturn new TermEnum() {\r\n\t\r\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\r\n\t\t\t\tprivate int j = jx; // index into sortedFields\r\n\t\t\t\t\t\r\n\t\t\t\tpublic boolean next() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\r\n\t\t\t\t\tif (j >= sortedFields.length) return false;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\r\n\t\r\n\t\t\t\t\t// move to successor\r\n\t\t\t\t\tj++;\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tif (j >= sortedFields.length) return false;\r\n\t\t\t\t\tgetInfo(j).sortTerms();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic Term term() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\r\n\t\t\t\t\tif (j >= sortedFields.length) return null;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\r\n//\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\r\n\t\t\t\t\treturn createTerm(j, (String) info.sortedTerms[i].getKey());\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpublic int docFreq() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\r\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\r\n\t\t\t\t\treturn numPositions(info.getPositions(i));\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void close() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\n","sourceOld":"\t\tpublic TermEnum terms(Term term) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n\t\n\t\t\tint i; // index into info.sortedTerms\n\t\t\tint j; // index into sortedFields\n\t\t\t\n\t\t\tsortFields();\n\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n\t\t\tif (j < 0) { // not found; choose successor\n\t\t\t\tj = -j -1; \n\t\t\t\ti = 0;\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t}\n\t\t\telse { // found\n\t\t\t\tInfo info = getInfo(j);\n\t\t\t\tinfo.sortTerms();\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n\t\t\t\tif (i < 0) { // not found; choose successor\n\t\t\t\t\ti = -i -1;\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int ix = i;\n\t\t\tfinal int jx = j;\n\t\n\t\t\treturn new TermEnum() {\n\t\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\n\t\t\t\tprivate int j = jx; // index into sortedFields\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\n\t\n\t\t\t\t\t// move to successor\n\t\t\t\t\tj++;\n\t\t\t\t\ti = 0;\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tinfo.sortTerms();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\n\t\t\t\tpublic Term term() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n\t\t\t\t\tif (j >= sortedFields.length) return null;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\n\t\t\t\t\tString fieldName = (String) sortedFields[j].getKey();\n\t\t\t\t\treturn new Term(fieldName, (String) info.sortedTerms[i].getKey());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int docFreq() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\n\t\t\t\t\treturn numPositions(info.getPositions(i));\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":null,"sourceOld":"\t\tpublic TermEnum terms(Term term) {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\r\n\t\r\n\t\t\tint i; // index into info.sortedTerms\r\n\t\t\tint j; // index into sortedFields\r\n\t\t\t\r\n\t\t\tsortFields();\r\n\t\t\tif (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\r\n\t\t\t\tj = 0; // fast path\r\n\t\t\t} else {\r\n\t\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (j < 0) { // not found; choose successor\r\n\t\t\t\tj = -j -1; \r\n\t\t\t\ti = 0;\r\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\r\n\t\t\t}\r\n\t\t\telse { // found\r\n\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\tinfo.sortTerms();\r\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\r\n\t\t\t\tif (i < 0) { // not found; choose successor\r\n\t\t\t\t\ti = -i -1;\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfinal int ix = i;\r\n\t\t\tfinal int jx = j;\r\n\t\r\n\t\t\treturn new TermEnum() {\r\n\t\r\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\r\n\t\t\t\tprivate int j = jx; // index into sortedFields\r\n\t\t\t\t\t\r\n\t\t\t\tpublic boolean next() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\r\n\t\t\t\t\tif (j >= sortedFields.length) return false;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\r\n\t\r\n\t\t\t\t\t// move to successor\r\n\t\t\t\t\tj++;\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tif (j >= sortedFields.length) return false;\r\n\t\t\t\t\tgetInfo(j).sortTerms();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic Term term() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\r\n\t\t\t\t\tif (j >= sortedFields.length) return null;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\r\n//\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\r\n\t\t\t\t\treturn createTerm(j, (String) info.sortedTerms[i].getKey());\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpublic int docFreq() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\r\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\r\n\t\t\t\t\tInfo info = getInfo(j);\r\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\r\n\t\t\t\t\treturn numPositions(info.getPositions(i));\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void close() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermEnum terms(Term term) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n\t\n\t\t\tint i; // index into info.sortedTerms\n\t\t\tint j; // index into sortedFields\n\t\t\t\n\t\t\tsortFields();\n\t\t\tif (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n\t\t\t\tj = 0; // fast path\n\t\t\t} else {\n\t\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n\t\t\t}\n\t\t\t\n\t\t\tif (j < 0) { // not found; choose successor\n\t\t\t\tj = -j -1; \n\t\t\t\ti = 0;\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t}\n\t\t\telse { // found\n\t\t\t\tInfo info = getInfo(j);\n\t\t\t\tinfo.sortTerms();\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n\t\t\t\tif (i < 0) { // not found; choose successor\n\t\t\t\t\ti = -i -1;\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int ix = i;\n\t\t\tfinal int jx = j;\n\t\n\t\t\treturn new TermEnum() {\n\t\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\n\t\t\t\tprivate int j = jx; // index into sortedFields\n\t\t\t\t\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\n\t\n\t\t\t\t\t// move to successor\n\t\t\t\t\tj++;\n\t\t\t\t\ti = 0;\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tgetInfo(j).sortTerms();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\n\t\t\t\tpublic Term term() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n\t\t\t\t\tif (j >= sortedFields.length) return null;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\n//\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n\t\t\t\t\treturn createTerm(info, j, (String) info.sortedTerms[i].getKey());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int docFreq() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\n\t\t\t\t\treturn numPositions(info.getPositions(i));\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Returns a new Term object, minimizing String.intern() overheads. */\n\t\t\t\tprivate Term createTerm(Info info, int pos, String text) { \n\t\t\t\t\t// Assertion: sortFields has already been called before\n\t\t\t\t\tTerm template = info.template;\n\t\t\t\t\tif (template == null) { // not yet cached?\n\t\t\t\t\t\tString fieldName = (String) sortedFields[pos].getKey();\n\t\t\t\t\t\ttemplate = new Term(fieldName, \"\");\n\t\t\t\t\t\tinfo.template = template;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn template.createTerm(text);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      }\n      else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName, \"\");\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"\t\tpublic TermEnum terms(Term term) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n\t\n\t\t\tint i; // index into info.sortedTerms\n\t\t\tint j; // index into sortedFields\n\t\t\t\n\t\t\tsortFields();\n\t\t\tif (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n\t\t\t\tj = 0; // fast path\n\t\t\t} else {\n\t\t\t\tj = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n\t\t\t}\n\t\t\t\n\t\t\tif (j < 0) { // not found; choose successor\n\t\t\t\tj = -j -1; \n\t\t\t\ti = 0;\n\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t}\n\t\t\telse { // found\n\t\t\t\tInfo info = getInfo(j);\n\t\t\t\tinfo.sortTerms();\n\t\t\t\ti = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n\t\t\t\tif (i < 0) { // not found; choose successor\n\t\t\t\t\ti = -i -1;\n\t\t\t\t\tif (i >= info.sortedTerms.length) { // move to next successor\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tif (j < sortedFields.length) getInfo(j).sortTerms();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int ix = i;\n\t\t\tfinal int jx = j;\n\t\n\t\t\treturn new TermEnum() {\n\t\n\t\t\t\tprivate int i = ix; // index into info.sortedTerms\n\t\t\t\tprivate int j = jx; // index into sortedFields\n\t\t\t\t\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.next\");\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (++i < info.sortedTerms.length) return true;\n\t\n\t\t\t\t\t// move to successor\n\t\t\t\t\tj++;\n\t\t\t\t\ti = 0;\n\t\t\t\t\tif (j >= sortedFields.length) return false;\n\t\t\t\t\tgetInfo(j).sortTerms();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\n\t\t\t\tpublic Term term() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n\t\t\t\t\tif (j >= sortedFields.length) return null;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return null;\n//\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n\t\t\t\t\treturn createTerm(info, j, (String) info.sortedTerms[i].getKey());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int docFreq() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.docFreq\");\n\t\t\t\t\tif (j >= sortedFields.length) return 0;\n\t\t\t\t\tInfo info = getInfo(j);\n\t\t\t\t\tif (i >= info.sortedTerms.length) return 0;\n\t\t\t\t\treturn numPositions(info.getPositions(i));\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\"TermEnum.close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Returns a new Term object, minimizing String.intern() overheads. */\n\t\t\t\tprivate Term createTerm(Info info, int pos, String text) { \n\t\t\t\t\t// Assertion: sortFields has already been called before\n\t\t\t\t\tTerm template = info.template;\n\t\t\t\t\tif (template == null) { // not yet cached?\n\t\t\t\t\t\tString fieldName = (String) sortedFields[pos].getKey();\n\t\t\t\t\t\ttemplate = new Term(fieldName, \"\");\n\t\t\t\t\t\tinfo.template = template;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn template.createTerm(text);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"145c78dcf66ec62de7b0152032895ff7095c21f3","date":1164176882,"type":3,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName, \"\");\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      }\n      else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName, \"\");\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d73678020862536617f065bb3d28a71d8c4020c","date":1219142439,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName, \"\");\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, (String) info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = (String) sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, info.sortedTerms[i].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, info.sortedTerms[i].getKey());\n        }\n        \n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int i = ix; // index into info.sortedTerms\n        private int j = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (j >= sortedFields.length) return false;\n          Info info = getInfo(j);\n          if (++i < info.sortedTerms.length) return true;\n  \n          // move to successor\n          j++;\n          i = 0;\n          if (j >= sortedFields.length) return false;\n          getInfo(j).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + i);\n          if (j >= sortedFields.length) return null;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, j, info.sortedTerms[i].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (j >= sortedFields.length) return 0;\n          Info info = getInfo(j);\n          if (i >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(i));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"145c78dcf66ec62de7b0152032895ff7095c21f3":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"9d73678020862536617f065bb3d28a71d8c4020c":["145c78dcf66ec62de7b0152032895ff7095c21f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9d73678020862536617f065bb3d28a71d8c4020c"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"145c78dcf66ec62de7b0152032895ff7095c21f3":["9d73678020862536617f065bb3d28a71d8c4020c"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["145c78dcf66ec62de7b0152032895ff7095c21f3"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"9d73678020862536617f065bb3d28a71d8c4020c":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}