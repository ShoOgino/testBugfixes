{"path":"modules/spatial/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkBasicShapeIO(SpatialContext,WriteReader).mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkBasicShapeIO(SpatialContext,WriteReader).mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkBasicShapeIO(SpatialContext,WriteReader).mjava","sourceNew":"  public static void checkBasicShapeIO( SpatialContext ctx, WriteReader help ) throws Exception {\n\n    // Simple Point\n    Shape s = ctx.readShape(\"10 20\");\n    assertEquals(s,ctx.readShape(\"20,10\"));//check comma for y,x format\n    assertEquals(s,ctx.readShape(\"20, 10\"));//test space\n    Point p = (Point) s;\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    p = (Point) help.writeThenRead(s);\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    Assert.assertFalse(s.hasArea());\n\n    // BBOX\n    s = ctx.readShape(\"-10 -20 10 20\");\n    Rectangle b = (Rectangle) s;\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    b = (Rectangle) help.writeThenRead(s);\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    // Point/Distance\n    s = ctx.readShape(\"Circle( 1.23 4.56 distance=7.89)\");\n    CircleImpl circle = (CircleImpl)s;\n    assertEquals(1.23, circle.getCenter().getX(), 0D);\n    assertEquals(4.56, circle.getCenter().getY(), 0D);\n    assertEquals(7.89, circle.getDistance(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    Shape s2 = ctx.readShape(\"Circle( 4.56,1.23 d=7.89 )\"); // use lat,lon and use 'd' abbreviation\n    assertEquals(s,s2);\n  }\n\n","sourceOld":"  public static void checkBasicShapeIO( SpatialContext ctx, WriteReader help ) throws Exception {\n\n    // Simple Point\n    Shape s = ctx.readShape(\"10 20\");\n    assertEquals(s,ctx.readShape(\"20,10\"));//check comma for y,x format\n    assertEquals(s,ctx.readShape(\"20, 10\"));//test space\n    Point p = (Point) s;\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    p = (Point) help.writeThenRead(s);\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    Assert.assertFalse(s.hasArea());\n\n    // BBOX\n    s = ctx.readShape(\"-10 -20 10 20\");\n    Rectangle b = (Rectangle) s;\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    b = (Rectangle) help.writeThenRead(s);\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    // Point/Distance\n    s = ctx.readShape(\"Circle( 1.23 4.56 distance=7.89)\");\n    CircleImpl circle = (CircleImpl)s;\n    assertEquals(1.23, circle.getCenter().getX(), 0D);\n    assertEquals(4.56, circle.getCenter().getY(), 0D);\n    assertEquals(7.89, circle.getDistance(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    Shape s2 = ctx.readShape(\"Circle( 4.56,1.23 d=7.89 )\"); // use lat,lon and use 'd' abbreviation\n    assertEquals(s,s2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkBasicShapeIO(SpatialContext,WriteReader).mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkBasicShapeIO(SpatialContext,WriteReader).mjava","sourceNew":"  public static void checkBasicShapeIO( SpatialContext ctx, WriteReader help ) throws Exception {\n\n    // Simple Point\n    Shape s = ctx.readShape(\"10 20\");\n    assertEquals(s,ctx.readShape(\"20,10\"));//check comma for y,x format\n    assertEquals(s,ctx.readShape(\"20, 10\"));//test space\n    Point p = (Point) s;\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    p = (Point) help.writeThenRead(s);\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    Assert.assertFalse(s.hasArea());\n\n    // BBOX\n    s = ctx.readShape(\"-10 -20 10 20\");\n    Rectangle b = (Rectangle) s;\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    b = (Rectangle) help.writeThenRead(s);\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    // Point/Distance\n    s = ctx.readShape(\"Circle( 1.23 4.56 distance=7.89)\");\n    CircleImpl circle = (CircleImpl)s;\n    assertEquals(1.23, circle.getCenter().getX(), 0D);\n    assertEquals(4.56, circle.getCenter().getY(), 0D);\n    assertEquals(7.89, circle.getDistance(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    Shape s2 = ctx.readShape(\"Circle( 4.56,1.23 d=7.89 )\"); // use lat,lon and use 'd' abbreviation\n    assertEquals(s,s2);\n  }\n\n","sourceOld":"  public static void checkBasicShapeIO( SpatialContext ctx, WriteReader help ) throws Exception {\n\n    // Simple Point\n    Shape s = ctx.readShape(\"10 20\");\n    assertEquals(s,ctx.readShape(\"20,10\"));//check comma for y,x format\n    assertEquals(s,ctx.readShape(\"20, 10\"));//test space\n    Point p = (Point) s;\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    p = (Point) help.writeThenRead(s);\n    assertEquals(10.0, p.getX(), 0D);\n    assertEquals(20.0, p.getY(), 0D);\n    Assert.assertFalse(s.hasArea());\n\n    // BBOX\n    s = ctx.readShape(\"-10 -20 10 20\");\n    Rectangle b = (Rectangle) s;\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    b = (Rectangle) help.writeThenRead(s);\n    assertEquals(-10.0, b.getMinX(), 0D);\n    assertEquals(-20.0, b.getMinY(), 0D);\n    assertEquals(10.0, b.getMaxX(), 0D);\n    assertEquals(20.0, b.getMaxY(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    // Point/Distance\n    s = ctx.readShape(\"Circle( 1.23 4.56 distance=7.89)\");\n    CircleImpl circle = (CircleImpl)s;\n    assertEquals(1.23, circle.getCenter().getX(), 0D);\n    assertEquals(4.56, circle.getCenter().getY(), 0D);\n    assertEquals(7.89, circle.getDistance(), 0D);\n    Assert.assertTrue(s.hasArea());\n\n    Shape s2 = ctx.readShape(\"Circle( 4.56,1.23 d=7.89 )\"); // use lat,lon and use 'd' abbreviation\n    assertEquals(s,s2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}