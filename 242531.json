{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","commits":[{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(GeneralField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(GeneralField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(IndexableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRefBuilder bytes = new BytesRefBuilder();\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.get().utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.utf8ToString();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","date":1445009862,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRefBuilder bytes = new BytesRefBuilder();\n    storedToIndexed(f, bytes);\n    return bytes.get().utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRefBuilder bytes = new BytesRefBuilder();\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          NumericUtils.intToPrefixCodedBytes(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          NumericUtils.longToPrefixCodedBytes(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          NumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          NumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          NumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!\n          // copied from NumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          NumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n    return bytes.get().utf8ToString();\n  }\n\n","bugFix":["22abfa0c2df167320b9c97d1bdbb19347ff95402","fa0f44f887719e97183771e977cfc4bfb485b766","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField).mjava","sourceNew":"  @Override\n  public String storedToIndexed(IndexableField f) {\n    final BytesRefBuilder bytes = new BytesRefBuilder();\n    storedToIndexed(f, bytes);\n    return bytes.get().utf8ToString();\n  }\n\n","sourceOld":"  @Override\n  public String storedToIndexed(StorableField f) {\n    final BytesRefBuilder bytes = new BytesRefBuilder();\n    storedToIndexed(f, bytes);\n    return bytes.get().utf8ToString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"409324b31a1419d7c05a38211168cf317e39be77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","409324b31a1419d7c05a38211168cf317e39be77"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["1d028314cced5858683a1bb4741423d0f934257b","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"]},"commit2Childs":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["dd45d4a2ee01a1932d33eec42f5272c2402da679","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}