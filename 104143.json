{"path":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#testStoreAndRead().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","sourceNew":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    \n    ClusterState loadedClusterState = ClusterState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedClusterState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedClusterState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedClusterState = ClusterState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n\n    loadedClusterState = ClusterState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedClusterState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedClusterState.getCollections().size());\n  }\n\n","sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateTest#testStoreAndRead().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStoreAndRead() throws Exception {\n    Map<String,Map<String,Slice>> collectionStates = new HashMap<String,Map<String,Slice>>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n    liveNodes.add(\"node2\");\n    \n    Map<String,Slice> slices = new HashMap<String,Slice>();\n    Map<String,ZkNodeProps> sliceToProps = new HashMap<String,ZkNodeProps>();\n    Map<String,String> props = new HashMap<String,String>();\n\n    props.put(\"prop1\", \"value\");\n    props.put(\"prop2\", \"value2\");\n    ZkNodeProps zkNodeProps = new ZkNodeProps(props);\n    sliceToProps.put(\"node1\", zkNodeProps);\n    Slice slice = new Slice(\"shard1\", sliceToProps);\n    slices.put(\"shard1\", slice);\n    Slice slice2 = new Slice(\"shard2\", sliceToProps);\n    slices.put(\"shard2\", slice2);\n    collectionStates.put(\"collection1\", slices);\n    collectionStates.put(\"collection2\", slices);\n    \n    CloudState cloudState = new CloudState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(cloudState);\n    \n    CloudState loadedCloudState = CloudState.load(bytes, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"No collections found\", 2, loadedCloudState.getCollections().size());\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop1\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop1\"));\n    assertEquals(\"Poperties not copied properly\", zkNodeProps.get(\"prop2\"), loadedCloudState.getSlice(\"collection1\", \"shard1\").getShards().get(\"node1\").get(\"prop2\"));\n\n    loadedCloudState = CloudState.load(new byte[0], liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n\n    loadedCloudState = CloudState.load((byte[])null, liveNodes);\n    \n    assertEquals(\"Provided liveNodes not used properly\", 2, loadedCloudState\n        .getLiveNodes().size());\n    assertEquals(\"Should not have collections\", 0, loadedCloudState.getCollections().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3f767f8c99eaedb984df754fe61f21c5de260f94","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}