{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a824e51ae7d416179b0164bf6693668d68abc0","date":1413927602,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        byte id[] = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        String suffix = input.readString();\n        if (!suffix.isEmpty()) {\n          throw new CorruptIndexException(\"invalid codec header: got unexpected suffix: \" + suffix, input);\n        }\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        byte id[] = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        String suffix = input.readString();\n        if (!suffix.isEmpty()) {\n          throw new CorruptIndexException(\"invalid codec header: got unexpected suffix: \" + suffix, input);\n        }\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8521d944f9dfb45692ec28235dbf116d47ef69ba","8521d944f9dfb45692ec28235dbf116d47ef69ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a6a824e51ae7d416179b0164bf6693668d68abc0"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"55980207f1977bd1463465de1659b821347e2fa8":["a6a824e51ae7d416179b0164bf6693668d68abc0"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}