{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    String xml;\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<Double>();\n    xml = getFacetXML(response, \"off0\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"off1\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"off2\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"offAll\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<Double>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    String xml;\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<Double>();\n    xml = getFacetXML(response, \"off0\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"off1\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"off2\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    xml = getFacetXML(response, \"offAll\", \"fieldFacets\", \"long_ld\");\n    lon = (ArrayList<Double>)xmlToList(xml, \"double\", \"mean\");\n    assertEquals(lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<Double>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<Double>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1c0586e0570de2261142e339891d57c0f36f45c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}