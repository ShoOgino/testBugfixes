{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermStates> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","pathOld":"/dev/null","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermStates> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermStates],float).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermStates> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStates ts = termStates.get(termID);\n          if (ts.docFreq() > 0) {\n            allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), ts.docFreq(), ts.totalTermFreq()));\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermStates> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          TermStatistics stats = searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID));\n          if (stats != null) {\n            allTermStats.add(stats);\n          }\n        }\n      }\n\n      if (allTermStats.isEmpty()) {\n        stats = null; // no terms matched at all, will not use sim\n      } else {\n        stats = similarity.scorer(boost, searcher.collectionStatistics(field),\n                                         allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19238c4860c45945f1b1e39032e056ce9e266152":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["19238c4860c45945f1b1e39032e056ce9e266152"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}