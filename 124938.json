{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}