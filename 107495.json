{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(IndexWriter,SegmentInfos).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(IndexWriter,SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // Used by near real-time search\n  MultiSegmentReader(IndexWriter writer, SegmentInfos infos) throws IOException {\n    super(writer.getDirectory(), infos, false, true);\n\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n    SegmentReader[] readers = new SegmentReader[numSegments];\n    final Directory dir = writer.getDirectory();\n    int upto = 0;\n\n    for (int i=0;i<numSegments;i++) {\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(upto);\n        if (info.dir == dir) {\n          readers[upto++] = writer.readerPool.getReadOnlyClone(info, true);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(upto--;upto>=0;upto--) {\n            try {\n              readers[upto].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    this.writer = writer;\n\n    if (upto < readers.length) {\n      // This means some segments were in a foreign Directory\n      SegmentReader[] newReaders = new SegmentReader[upto];\n      System.arraycopy(readers, 0, newReaders, 0, upto);\n      readers = newReaders;\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(IndexWriter,SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#MultiSegmentReader(IndexWriter,SegmentInfos).mjava","sourceNew":"  // Used by near real-time search\n  DirectoryReader(IndexWriter writer, SegmentInfos infos) throws IOException {\n    this.directory = writer.getDirectory();\n    this.readOnly = true;\n    this.closeDirectory = false;\n    this.segmentInfos = infos;\n    if (!readOnly) {\n      // We assume that this segments_N was previously\n      // properly sync'd:\n      synced.addAll(infos.files(directory, true));\n    }\n\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n    SegmentReader[] readers = new SegmentReader[numSegments];\n    final Directory dir = writer.getDirectory();\n    int upto = 0;\n\n    for (int i=0;i<numSegments;i++) {\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(upto);\n        if (info.dir == dir) {\n          readers[upto++] = writer.readerPool.getReadOnlyClone(info, true);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(upto--;upto>=0;upto--) {\n            try {\n              readers[upto].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    this.writer = writer;\n\n    if (upto < readers.length) {\n      // This means some segments were in a foreign Directory\n      SegmentReader[] newReaders = new SegmentReader[upto];\n      System.arraycopy(readers, 0, newReaders, 0, upto);\n      readers = newReaders;\n    }\n\n    initialize(readers);\n  }\n\n","sourceOld":"  // Used by near real-time search\n  MultiSegmentReader(IndexWriter writer, SegmentInfos infos) throws IOException {\n    super(writer.getDirectory(), infos, false, true);\n\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n    SegmentReader[] readers = new SegmentReader[numSegments];\n    final Directory dir = writer.getDirectory();\n    int upto = 0;\n\n    for (int i=0;i<numSegments;i++) {\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(upto);\n        if (info.dir == dir) {\n          readers[upto++] = writer.readerPool.getReadOnlyClone(info, true);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // Close all readers we had opened:\n          for(upto--;upto>=0;upto--) {\n            try {\n              readers[upto].close();\n            } catch (Throwable ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    this.writer = writer;\n\n    if (upto < readers.length) {\n      // This means some segments were in a foreign Directory\n      SegmentReader[] newReaders = new SegmentReader[upto];\n      System.arraycopy(readers, 0, newReaders, 0, upto);\n      readers = newReaders;\n    }\n\n    initialize(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}