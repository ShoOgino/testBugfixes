{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyMerge(SegmentInfos,OneMerge,String,IOStats).mjava","commits":[{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyMerge(SegmentInfos,OneMerge,String,IOStats).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply a merge to a {@link SegmentInfos} instance, accumulating the number\n   * of written bytes into {@code stats}.\n   */\n  protected static SegmentInfos applyMerge(SegmentInfos infos, OneMerge merge, String mergedSegmentName, IOStats stats) throws IOException {\n    LinkedHashSet<SegmentCommitInfo> scis = new LinkedHashSet<>(infos.asList());\n    int newMaxDoc = 0;\n    double newSize = 0;\n    for (SegmentCommitInfo sci : merge.segments) {\n      int numLiveDocs = sci.info.maxDoc() - sci.getDelCount();\n      newSize += (double) sci.sizeInBytes() * numLiveDocs / sci.info.maxDoc() / 1024 / 1024;\n      newMaxDoc += numLiveDocs;\n      boolean removed = scis.remove(sci);\n      assertTrue(removed);\n    }\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(scis);\n    // Now add the merged segment\n    newInfos.add(makeSegmentCommitInfo(mergedSegmentName, newMaxDoc, 0, newSize, IndexWriter.SOURCE_MERGE));\n    stats.mergeBytesWritten += newSize * 1024 * 1024;\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyMerge(SegmentInfos,OneMerge,String,IOStats).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply a merge to a {@link SegmentInfos} instance, accumulating the number\n   * of written bytes into {@code stats}.\n   */\n  protected static SegmentInfos applyMerge(SegmentInfos infos, OneMerge merge, String mergedSegmentName, IOStats stats) throws IOException {\n    LinkedHashSet<SegmentCommitInfo> scis = new LinkedHashSet<>(infos.asList());\n    int newMaxDoc = 0;\n    double newSize = 0;\n    for (SegmentCommitInfo sci : merge.segments) {\n      int numLiveDocs = sci.info.maxDoc() - sci.getDelCount();\n      newSize += (double) sci.sizeInBytes() * numLiveDocs / sci.info.maxDoc() / 1024 / 1024;\n      newMaxDoc += numLiveDocs;\n      boolean removed = scis.remove(sci);\n      assertTrue(removed);\n    }\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(scis);\n    // Now add the merged segment\n    newInfos.add(makeSegmentCommitInfo(mergedSegmentName, newMaxDoc, 0, newSize, IndexWriter.SOURCE_MERGE));\n    stats.mergeBytesWritten += newSize * 1024 * 1024;\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyMerge(SegmentInfos,OneMerge,String,IOStats).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply a merge to a {@link SegmentInfos} instance, accumulating the number\n   * of written bytes into {@code stats}.\n   */\n  protected static SegmentInfos applyMerge(SegmentInfos infos, OneMerge merge, String mergedSegmentName, IOStats stats) throws IOException {\n    LinkedHashSet<SegmentCommitInfo> scis = new LinkedHashSet<>(infos.asList());\n    int newMaxDoc = 0;\n    double newSize = 0;\n    for (SegmentCommitInfo sci : merge.segments) {\n      int numLiveDocs = sci.info.maxDoc() - sci.getDelCount();\n      newSize += (double) sci.sizeInBytes() * numLiveDocs / sci.info.maxDoc() / 1024 / 1024;\n      newMaxDoc += numLiveDocs;\n      boolean removed = scis.remove(sci);\n      assertTrue(removed);\n    }\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(scis);\n    // Now add the merged segment\n    newInfos.add(makeSegmentCommitInfo(mergedSegmentName, newMaxDoc, 0, newSize, IndexWriter.SOURCE_MERGE));\n    stats.mergeBytesWritten += newSize * 1024 * 1024;\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da0d58b6bf72ebfd4d6722289ea725809c20c987","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}