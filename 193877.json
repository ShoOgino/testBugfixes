{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert selected metrics to maps or to flattened objects.\n   * @param registry source of metrics\n   * @param shouldMatchFilters metrics must match any of these filters\n   * @param mustMatchFilter metrics must match this filter\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact, boolean simple,\n                            BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert selected metrics to maps or to flattened objects.\n   * @param registry source of metrics\n   * @param shouldMatchFilters metrics must match any of these filters\n   * @param mustMatchFilter metrics must match this filter\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, PropertyFilter propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","sourceOld":"  /**\n   * Convert selected metrics to maps or to flattened objects.\n   * @param registry source of metrics\n   * @param shouldMatchFilters metrics must match any of these filters\n   * @param mustMatchFilter metrics must match this filter\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact, boolean simple,\n                            BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}