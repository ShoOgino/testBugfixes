{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    int count = 0;\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n      ++count;\n    }\n    meta.writeVInt(count);\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    // TODO: make this more efficient. this is just as inefficient as 4.0 codec.... we can do much better.\n    if (minLength != maxLength) {\n      addNumericField(field, new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<BytesRef> inner = values.iterator();\n          return new Iterator<Number>() {\n            long addr = 0;\n\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              BytesRef b = inner.next();\n              addr += b.length;\n              return Long.valueOf(addr);\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); } \n          };\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce33b902e857f52067011e1a4f4bd4a42627b139","date":1359144094,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    int count = 0;\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n      ++count;\n    }\n    meta.writeVInt(count);\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c024a3e8fec0a081cbf9539845db12f0dc84d029","date":1376654698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      if (v.length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ceca04c06658aeb20e0a319ade784ad9a0576dd","date":1376662287,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      if (length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      if (length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      if (length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      if (length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      if (v.length > Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene42DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(BYTES);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n    }\n    meta.writeLong(startFP);\n    meta.writeLong(data.getFilePointer() - startFP);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce33b902e857f52067011e1a4f4bd4a42627b139"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["c024a3e8fec0a081cbf9539845db12f0dc84d029","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["9faa42f41b6adb98daf009cf99a4ee239189e469","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}