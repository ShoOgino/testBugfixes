{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","commits":[{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareDocToValue(int,String).mjava","sourceNew":"  @Override\n  public int compareTop(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String docValue;\n    if (tempBR.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = tempBR.utf8ToString();\n    }\n    return compareValues(topValue, docValue);\n  }\n\n","sourceOld":"  @Override\n  public int compareDocToValue(int doc, String value) {\n    currentDocTerms.get(doc, tempBR);\n    final String docValue;\n    if (tempBR.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = tempBR.utf8ToString();\n    }\n    return compareValues(docValue, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareDocToValue(int,String).mjava","sourceNew":"  @Override\n  public int compareTop(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String docValue;\n    if (tempBR.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = tempBR.utf8ToString();\n    }\n    return compareValues(topValue, docValue);\n  }\n\n","sourceOld":"  @Override\n  public int compareDocToValue(int doc, String value) {\n    currentDocTerms.get(doc, tempBR);\n    final String docValue;\n    if (tempBR.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = tempBR.utf8ToString();\n    }\n    return compareValues(docValue, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","sourceNew":"  @Override\n  public int compareTop(int doc) {\n    final BytesRef term = currentDocTerms.get(doc);\n    final String docValue;\n    if (term.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = term.utf8ToString();\n    }\n    return compareValues(topValue, docValue);\n  }\n\n","sourceOld":"  @Override\n  public int compareTop(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String docValue;\n    if (tempBR.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = tempBR.utf8ToString();\n    }\n    return compareValues(topValue, docValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareTop(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int compareTop(int doc) {\n    final BytesRef term = currentDocTerms.get(doc);\n    final String docValue;\n    if (term.length == 0 && docsWithField.get(doc) == false) {\n      docValue = null;\n    } else {\n      docValue = term.utf8ToString();\n    }\n    return compareValues(topValue, docValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59cae262d4251e10e2a034b17c45776f6b4c7e68":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7615b855702e008d91a95a2578bf05d27372f599"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}