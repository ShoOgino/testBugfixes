{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["226f5e862af9059a60fe80d2b27e547bcd95971c","8a255765a5625ff80fba75863de5a16ea392015e","4c807c4005aae1acaf5cebc9af40883985fb89a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"360d15dc189fb48153cb62234f7d20819e4e292e","date":1263562938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"226f5e862af9059a60fe80d2b27e547bcd95971c","date":1266183192,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(curPos, curPos+curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":["bbbdd19493fa8ae4bdac9205ae34e7387f08f304","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = (char[]) termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"226f5e862af9059a60fe80d2b27e547bcd95971c":["360d15dc189fb48153cb62234f7d20819e4e292e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["226f5e862af9059a60fe80d2b27e547bcd95971c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"360d15dc189fb48153cb62234f7d20819e4e292e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"226f5e862af9059a60fe80d2b27e547bcd95971c":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["360d15dc189fb48153cb62234f7d20819e4e292e"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"360d15dc189fb48153cb62234f7d20819e4e292e":["226f5e862af9059a60fe80d2b27e547bcd95971c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}