{"path":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, ScorerContext.def());\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scorerContext.scoreDocsInOrder && scorerContext.topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd86d8c5713fc65e119372f12a3c5fdc47987b56","date":1318525216,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}