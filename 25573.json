{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<SegmentCommitInfo>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentInfoPerCommit> eligibleSegments = new ArrayList<SegmentInfoPerCommit>();\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfoPerCommit info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<SegmentCommitInfo>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<SegmentCommitInfo>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<SegmentCommitInfo>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f0b4a920667fa5fce511270c486fd499f7e71a","date":1399385988,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151e3584e1250f9d055922452701114a33302e49","date":1399403957,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f0b4a920667fa5fce511270c486fd499f7e71a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6613659748fe4411a7dcf85266e55db1f95f7315":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"151e3584e1250f9d055922452701114a33302e49":["c9f0b4a920667fa5fce511270c486fd499f7e71a"],"027bee21e09164c9ee230395405076d1e0034b30":["151e3584e1250f9d055922452701114a33302e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9f0b4a920667fa5fce511270c486fd499f7e71a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9f0b4a920667fa5fce511270c486fd499f7e71a":["151e3584e1250f9d055922452701114a33302e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"151e3584e1250f9d055922452701114a33302e49":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}