{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLazyLoad() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cores.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cores.getCore(\"collection1\");\n      CoreDescriptor cont = core1.getCoreDescriptor();\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cores.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cc.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cores.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cores.getCore(\"collection1\");\n      CoreDescriptor cont = core1.getCoreDescriptor();\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cores.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cc.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() {\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cores.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cores.getCore(\"collection1\");\n      CoreDescriptor cont = core1.getCoreDescriptor();\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cores.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cores.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cores.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d9daa29108c4330a5533a5cddaa9a95e7eb3061","date":1355669188,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cc.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33399cc2618223f11ba493f9a3a2026fe05b579","date":1356813042,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,\n      // that will cause the core to be loaded and this test will fail.\n\n      Collection<String> names = cc.getCoreNames();\n      for (String name : names) {\n        assertFalse(\"collectionLazy2\".equals(name));\n      }\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be swappable\", core1.getCoreDescriptor().isSwappable());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be swappable\", core2.getCoreDescriptor().isSwappable());\n      assertFalse(\"core2 should not be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be swappable\", core3.getCoreDescriptor().isSwappable());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be swappable\", core4.getCoreDescriptor().isSwappable());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be swappable\", core5.getCoreDescriptor().isSwappable());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should  be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should not be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should not be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should  be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collectionLazy2\", \"collectionLazy5\");\n      checkNotInCores(cc, \"collectionLazy3\", \"collectionLazy4\", \"collectionLazy6\", \"collectionLazy7\",\n          \"collectionLazy8\", \"collectionLazy9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collectionLazy3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collectionLazy5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\"));\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\"));\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazyLoad().mjava","sourceNew":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, Arrays.asList(\"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\"));\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazyLoad() throws Exception {\n    CoreContainer cc = init();\n    try {\n\n      // NOTE: This checks the initial state for loading, no need to do this elsewhere.\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection5\");\n      checkNotInCores(cc, \"collection3\", \"collection4\", \"collection6\", \"collection7\",\n          \"collection8\", \"collection9\");\n\n      SolrCore core1 = cc.getCore(\"collection1\");\n      assertFalse(\"core1 should not be transient\", core1.getCoreDescriptor().isTransient());\n      assertTrue(\"core1 should be loadable\", core1.getCoreDescriptor().isLoadOnStartup());\n      assertNotNull(core1.getSolrConfig());\n\n      SolrCore core2 = cc.getCore(\"collection2\");\n      assertTrue(\"core2 should be transient\", core2.getCoreDescriptor().isTransient());\n      assertTrue(\"core2 should be loadable\", core2.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core3 = cc.getCore(\"collection3\");\n      assertTrue(\"core3 should be transient\", core3.getCoreDescriptor().isTransient());\n      assertFalse(\"core3 should not be loadable\", core3.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core4 = cc.getCore(\"collection4\");\n      assertFalse(\"core4 should not be transient\", core4.getCoreDescriptor().isTransient());\n      assertFalse(\"core4 should not be loadable\", core4.getCoreDescriptor().isLoadOnStartup());\n\n      SolrCore core5 = cc.getCore(\"collection5\");\n      assertFalse(\"core5 should not be transient\", core5.getCoreDescriptor().isTransient());\n      assertTrue(\"core5 should be loadable\", core5.getCoreDescriptor().isLoadOnStartup());\n\n      core1.close();\n      core2.close();\n      core3.close();\n      core4.close();\n      core5.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","c33399cc2618223f11ba493f9a3a2026fe05b579"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c33399cc2618223f11ba493f9a3a2026fe05b579","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"30c8e5574b55d57947e989443dfde611646530ee":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["c33399cc2618223f11ba493f9a3a2026fe05b579"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["c33399cc2618223f11ba493f9a3a2026fe05b579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}