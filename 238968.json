{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","commits":[{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\"+codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\"+codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\"+codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\"+codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],int).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, int codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["2e8d7ba2175f47e280231533f7d3016249cea88b","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","d619839baa8ce5503e496b94a9e42ad6f079293f","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}