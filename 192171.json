{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","commits":[{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n  query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2f0c71979827275ab91caba7232e8de375b40dd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f0c71979827275ab91caba7232e8de375b40dd5","date":1182818420,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n  query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","bugFix":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = newBooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = new BooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getBooleanQuery(List, boolean)} instead\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    return getBooleanQuery((List) clauses, disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses Vector that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = newBooleanQuery(disableCoord);\n    for (int i = 0; i < clauses.size(); i++) {\n      query.add((BooleanClause)clauses.elementAt(i));\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getBooleanQuery(Vector,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link Query} object.\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getBooleanQuery(List, boolean)} instead\n   */\n  protected Query getBooleanQuery(Vector clauses, boolean disableCoord)\n    throws ParseException\n  {\n    return getBooleanQuery((List) clauses, disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f0c71979827275ab91caba7232e8de375b40dd5":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["2f0c71979827275ab91caba7232e8de375b40dd5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2f0c71979827275ab91caba7232e8de375b40dd5":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["2f0c71979827275ab91caba7232e8de375b40dd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}