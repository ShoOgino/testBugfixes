{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof TrieDateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else if (ft instanceof SortableIntField) {\n      calc = new IntegerRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableLongField) {\n      calc = new LongRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableFloatField) {\n      calc = new FloatRangeEndpointCalculator(sf);\n    } else if (ft instanceof SortableDoubleField) {\n      calc = new DoubleRangeEndpointCalculator(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed2fa62657d92ccc3a506b15445420de3d094fcb","date":1404143214,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof TrieDateField) {\n      calc = new DateRangeEndpointCalculator(sf, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03298305b51c91a6b0221a7b134ba26578934d39","date":1418532926,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetRangeMethod method = (methodStr==null?FacetRangeMethod.getDefault():FacetRangeMethod.get(methodStr));\n    boolean groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with '\" + \n              GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetRangeMethod.FILTER;\n    }\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n      if (method.equals(FacetRangeMethod.DV)) {\n        // the user has explicitly selected the FacetRangeMethod.DV method\n        log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with field type '\" + \n            DateRangeField.class + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n        method = FacetRangeMethod.FILTER;\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(sf, calc));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(sf, calc));\n    }\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    resOuter.add(key, getFacetRangeCounts(sf, calc));\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final ParsedParams parsed = parseParams(FacetParams.FACET_RANGE, facetRange);\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n    String methodStr = parsed.params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetRangeMethod method = (methodStr==null?FacetRangeMethod.getDefault():FacetRangeMethod.get(methodStr));\n    boolean groupFacet = parsed.params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with '\" + \n              GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetRangeMethod.FILTER;\n    }\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n      if (method.equals(FacetRangeMethod.DV)) {\n        // the user has explicitly selected the FacetRangeMethod.DV method\n        log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with field type '\" + \n            DateRangeField.class + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n        method = FacetRangeMethod.FILTER;\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(sf, calc, parsed));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(sf, calc, parsed));\n    }\n  }\n\n","sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_RANGE, facetRange);\n    String f = facetValue;\n    String methodStr = params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetRangeMethod method = (methodStr==null?FacetRangeMethod.getDefault():FacetRangeMethod.get(methodStr));\n    boolean groupFacet = params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with '\" + \n              GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetRangeMethod.FILTER;\n    }\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n      if (method.equals(FacetRangeMethod.DV)) {\n        // the user has explicitly selected the FacetRangeMethod.DV method\n        log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with field type '\" + \n            DateRangeField.class + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n        method = FacetRangeMethod.FILTER;\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(sf, calc));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(sf, calc));\n    }\n  }\n\n","bugFix":["e135e47842b3fd6a4797b7e4787241b06817efa2","ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts(String,NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  void getFacetRangeCounts(String facetRange, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final ParsedParams parsed = parseParams(FacetParams.FACET_RANGE, facetRange);\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n    String methodStr = parsed.params.get(FacetParams.FACET_RANGE_METHOD);\n    FacetRangeMethod method = (methodStr==null?FacetRangeMethod.getDefault():FacetRangeMethod.get(methodStr));\n    boolean groupFacet = parsed.params.getBool(GroupParams.GROUP_FACET, false);\n    if (groupFacet && method.equals(FacetRangeMethod.DV)) {\n      // the user has explicitly selected the FacetRangeMethod.DV method\n      log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with '\" + \n              GroupParams.GROUP_FACET + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n      method = FacetRangeMethod.FILTER;\n    }\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    RangeEndpointCalculator<?> calc = null;\n\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + f);\n      }\n    } else if (ft instanceof DateRangeField) {\n      calc = new DateRangeFieldEndpointCalculator(sf, null);\n      if (method.equals(FacetRangeMethod.DV)) {\n        // the user has explicitly selected the FacetRangeMethod.DV method\n        log.warn(\"Range facet method '\" + FacetRangeMethod.DV + \"' is not supported together with field type '\" + \n            DateRangeField.class + \"'. Will use method '\" + FacetRangeMethod.FILTER + \"' instead\");\n        method = FacetRangeMethod.FILTER;\n      }\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(sf, calc, parsed));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(sf, calc, parsed));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["03298305b51c91a6b0221a7b134ba26578934d39"],"03298305b51c91a6b0221a7b134ba26578934d39":["ed2fa62657d92ccc3a506b15445420de3d094fcb"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ed2fa62657d92ccc3a506b15445420de3d094fcb":["2106271e380c198349e0f6eac0395bb462913fab"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["3cdb67100dc016748799a77218aa409478372d79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"03298305b51c91a6b0221a7b134ba26578934d39":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","2106271e380c198349e0f6eac0395bb462913fab"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"ed2fa62657d92ccc3a506b15445420de3d094fcb":["03298305b51c91a6b0221a7b134ba26578934d39"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["ed2fa62657d92ccc3a506b15445420de3d094fcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}