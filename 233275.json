{"path":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","commits":[{"id":"203bc84a5a9461a17a2a8e136f872bf4657aaee4","date":1176138824,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry entry = (Map.Entry)it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException e) {\n          // just keep going\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry entry = (Map.Entry)it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n    }\n\n","sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry entry = (Map.Entry)it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException e) {\n          // just keep going\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n    }\n\n","sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry entry = (Map.Entry)it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa4b66eb16ead894fa7130904af6ecf34331f050":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["ef82ff03e4016c705811b2658e81471a645c0e49"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}