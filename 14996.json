{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","commits":[{"id":"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163","date":1291984276,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"/dev/null","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"/dev/null","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"/dev/null","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\")\n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98ccd8374750b99a6402dff830bbe377c9cc4f9","date":1303598901,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f1664166601a0f7376d051dda5dd63c068c313","date":1303641250,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\")\n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\")\n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(TEMP_DIR);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a48ce78ef9c638df43d61dc30b4625347b47016e","date":1308554244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f1664166601a0f7376d051dda5dd63c068c313":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e98ccd8374750b99a6402dff830bbe377c9cc4f9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a48ce78ef9c638df43d61dc30b4625347b47016e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163","e98ccd8374750b99a6402dff830bbe377c9cc4f9"],"e98ccd8374750b99a6402dff830bbe377c9cc4f9":["53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["a3776dccca01c11e7046323cfad46a3b4a471233","a48ce78ef9c638df43d61dc30b4625347b47016e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","e98ccd8374750b99a6402dff830bbe377c9cc4f9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"a48ce78ef9c638df43d61dc30b4625347b47016e":["e98ccd8374750b99a6402dff830bbe377c9cc4f9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24f1664166601a0f7376d051dda5dd63c068c313":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"e98ccd8374750b99a6402dff830bbe377c9cc4f9":["24f1664166601a0f7376d051dda5dd63c068c313","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","a48ce78ef9c638df43d61dc30b4625347b47016e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53f6c67ebf2e8c3ab674868621bfa5e99e4ea163"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a48ce78ef9c638df43d61dc30b4625347b47016e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["24f1664166601a0f7376d051dda5dd63c068c313"],"53f6c67ebf2e8c3ab674868621bfa5e99e4ea163":["a3776dccca01c11e7046323cfad46a3b4a471233","e98ccd8374750b99a6402dff830bbe377c9cc4f9","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["24f1664166601a0f7376d051dda5dd63c068c313","718f8730b97959cb87aaeadc9fafb9513f3c1bfe","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}