{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#runBenchmark(TestData,StandardOptions).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#runBenchmark(TestData,StandardOptions).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Run benchmark using supplied parameters.\n     *\n     * @param params benchmark parameters\n     * @throws Exception\n     */\n    protected void runBenchmark(TestData params, StandardOptions options) throws Exception\n    {\n        System.out.println(\"Start Time: \" + new Date());\n        int runCount = options.getRunCount();\n        for (int i = 0; i < runCount; i++)\n        {\n            TestRunData trd = new TestRunData();\n            trd.startRun();\n            trd.setId(String.valueOf(i));\n            IndexWriter iw = new IndexWriter(params.getDirectory(), params.getAnalyzer(), true);\n            iw.setMergeFactor(params.getMergeFactor());\n            iw.setMaxBufferedDocs(params.getMaxBufferedDocs());\n\n            iw.setUseCompoundFile(params.isCompound());\n            makeIndex(trd, params.getSource(), iw, true, true, false, options);\n            if (params.isOptimize())\n            {\n                TimeData td = new TimeData(\"optimize\");\n                trd.addData(td);\n                td.start();\n                iw.optimize();\n                td.stop();\n                trd.addData(td);\n            }\n            iw.close();\n            QueryData[] queries = params.getQueries();\n            if (queries != null)\n            {\n                IndexReader ir = null;\n                IndexSearcher searcher = null;\n                for (int k = 0; k < queries.length; k++)\n                {\n                    QueryData qd = queries[k];\n                    if (ir != null && qd.reopen)\n                    {\n                        searcher.close();\n                        ir.close();\n                        ir = null;\n                        searcher = null;\n                    }\n                    if (ir == null)\n                    {\n                        ir = IndexReader.open(params.getDirectory());\n                        searcher = new IndexSearcher(ir);\n                    }\n                    Document doc = null;\n                    if (qd.warmup)\n                    {\n                        TimeData td = new TimeData(qd.id + \"-warm\");\n                        for (int m = 0; m < ir.maxDoc(); m++)\n                        {\n                            td.start();\n                            if (ir.isDeleted(m))\n                            {\n                                td.stop();\n                                continue;\n                            }\n                            doc = ir.document(m);\n                            td.stop();\n                        }\n                        trd.addData(td);\n                    }\n                    TimeData td = new TimeData(qd.id + \"-srch\");\n                    td.start();\n                    Hits h = searcher.search(qd.q);\n                    //System.out.println(\"Hits Size: \" + h.length() + \" Query: \" + qd.q);\n                    td.stop();\n                    trd.addData(td);\n                    td = new TimeData(qd.id + \"-trav\");\n                    if (h != null && h.length() > 0)\n                    {\n                        for (int m = 0; m < h.length(); m++)\n                        {\n                            td.start();\n                            int id = h.id(m);\n                            if (qd.retrieve)\n                            {\n                                doc = ir.document(id);\n                            }\n                            td.stop();\n                        }\n                    }\n                    trd.addData(td);\n                }\n                try\n                {\n                    if (searcher != null)\n                    {\n                        searcher.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n                try\n                {\n                    if (ir != null)\n                    {\n                        ir.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n            }\n            trd.endRun();\n            params.getRunData().add(trd);\n            //System.out.println(params[i].showRunData(params[i].getId()));\n            //params.showRunData(params.getId());\n        }\n        System.out.println(\"End Time: \" + new Date());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#runBenchmark(TestData,StandardOptions).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#runBenchmark(TestData,StandardOptions).mjava","sourceNew":"    /**\n     * Run benchmark using supplied parameters.\n     *\n     * @param params benchmark parameters\n     * @throws Exception\n     */\n    protected void runBenchmark(TestData params, StandardOptions options) throws Exception\n    {\n        System.out.println(\"Start Time: \" + new Date());\n        int runCount = options.getRunCount();\n        for (int i = 0; i < runCount; i++)\n        {\n            TestRunData trd = new TestRunData();\n            trd.startRun();\n            trd.setId(String.valueOf(i));\n            IndexWriter iw = new IndexWriter(params.getDirectory(), params.getAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n            iw.setMergeFactor(params.getMergeFactor());\n            iw.setMaxBufferedDocs(params.getMaxBufferedDocs());\n\n            iw.setUseCompoundFile(params.isCompound());\n            makeIndex(trd, params.getSource(), iw, true, true, false, options);\n            if (params.isOptimize())\n            {\n                TimeData td = new TimeData(\"optimize\");\n                trd.addData(td);\n                td.start();\n                iw.optimize();\n                td.stop();\n                trd.addData(td);\n            }\n            iw.close();\n            QueryData[] queries = params.getQueries();\n            if (queries != null)\n            {\n                IndexReader ir = null;\n                IndexSearcher searcher = null;\n                for (int k = 0; k < queries.length; k++)\n                {\n                    QueryData qd = queries[k];\n                    if (ir != null && qd.reopen)\n                    {\n                        searcher.close();\n                        ir.close();\n                        ir = null;\n                        searcher = null;\n                    }\n                    if (ir == null)\n                    {\n                        ir = IndexReader.open(params.getDirectory());\n                        searcher = new IndexSearcher(ir);\n                    }\n                    Document doc = null;\n                    if (qd.warmup)\n                    {\n                        TimeData td = new TimeData(qd.id + \"-warm\");\n                        for (int m = 0; m < ir.maxDoc(); m++)\n                        {\n                            td.start();\n                            if (ir.isDeleted(m))\n                            {\n                                td.stop();\n                                continue;\n                            }\n                            doc = ir.document(m);\n                            td.stop();\n                        }\n                        trd.addData(td);\n                    }\n                    TimeData td = new TimeData(qd.id + \"-srch\");\n                    td.start();\n                    Hits h = searcher.search(qd.q);\n                    //System.out.println(\"Hits Size: \" + h.length() + \" Query: \" + qd.q);\n                    td.stop();\n                    trd.addData(td);\n                    td = new TimeData(qd.id + \"-trav\");\n                    if (h != null && h.length() > 0)\n                    {\n                        for (int m = 0; m < h.length(); m++)\n                        {\n                            td.start();\n                            int id = h.id(m);\n                            if (qd.retrieve)\n                            {\n                                doc = ir.document(id);\n                            }\n                            td.stop();\n                        }\n                    }\n                    trd.addData(td);\n                }\n                try\n                {\n                    if (searcher != null)\n                    {\n                        searcher.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n                try\n                {\n                    if (ir != null)\n                    {\n                        ir.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n            }\n            trd.endRun();\n            params.getRunData().add(trd);\n            //System.out.println(params[i].showRunData(params[i].getId()));\n            //params.showRunData(params.getId());\n        }\n        System.out.println(\"End Time: \" + new Date());\n    }\n\n","sourceOld":"    /**\n     * Run benchmark using supplied parameters.\n     *\n     * @param params benchmark parameters\n     * @throws Exception\n     */\n    protected void runBenchmark(TestData params, StandardOptions options) throws Exception\n    {\n        System.out.println(\"Start Time: \" + new Date());\n        int runCount = options.getRunCount();\n        for (int i = 0; i < runCount; i++)\n        {\n            TestRunData trd = new TestRunData();\n            trd.startRun();\n            trd.setId(String.valueOf(i));\n            IndexWriter iw = new IndexWriter(params.getDirectory(), params.getAnalyzer(), true);\n            iw.setMergeFactor(params.getMergeFactor());\n            iw.setMaxBufferedDocs(params.getMaxBufferedDocs());\n\n            iw.setUseCompoundFile(params.isCompound());\n            makeIndex(trd, params.getSource(), iw, true, true, false, options);\n            if (params.isOptimize())\n            {\n                TimeData td = new TimeData(\"optimize\");\n                trd.addData(td);\n                td.start();\n                iw.optimize();\n                td.stop();\n                trd.addData(td);\n            }\n            iw.close();\n            QueryData[] queries = params.getQueries();\n            if (queries != null)\n            {\n                IndexReader ir = null;\n                IndexSearcher searcher = null;\n                for (int k = 0; k < queries.length; k++)\n                {\n                    QueryData qd = queries[k];\n                    if (ir != null && qd.reopen)\n                    {\n                        searcher.close();\n                        ir.close();\n                        ir = null;\n                        searcher = null;\n                    }\n                    if (ir == null)\n                    {\n                        ir = IndexReader.open(params.getDirectory());\n                        searcher = new IndexSearcher(ir);\n                    }\n                    Document doc = null;\n                    if (qd.warmup)\n                    {\n                        TimeData td = new TimeData(qd.id + \"-warm\");\n                        for (int m = 0; m < ir.maxDoc(); m++)\n                        {\n                            td.start();\n                            if (ir.isDeleted(m))\n                            {\n                                td.stop();\n                                continue;\n                            }\n                            doc = ir.document(m);\n                            td.stop();\n                        }\n                        trd.addData(td);\n                    }\n                    TimeData td = new TimeData(qd.id + \"-srch\");\n                    td.start();\n                    Hits h = searcher.search(qd.q);\n                    //System.out.println(\"Hits Size: \" + h.length() + \" Query: \" + qd.q);\n                    td.stop();\n                    trd.addData(td);\n                    td = new TimeData(qd.id + \"-trav\");\n                    if (h != null && h.length() > 0)\n                    {\n                        for (int m = 0; m < h.length(); m++)\n                        {\n                            td.start();\n                            int id = h.id(m);\n                            if (qd.retrieve)\n                            {\n                                doc = ir.document(id);\n                            }\n                            td.stop();\n                        }\n                    }\n                    trd.addData(td);\n                }\n                try\n                {\n                    if (searcher != null)\n                    {\n                        searcher.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n                try\n                {\n                    if (ir != null)\n                    {\n                        ir.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n            }\n            trd.endRun();\n            params.getRunData().add(trd);\n            //System.out.println(params[i].showRunData(params[i].getId()));\n            //params.showRunData(params.getId());\n        }\n        System.out.println(\"End Time: \" + new Date());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f55f56ccbdfcad354e67291558fdec36be2341c8","date":1244730392,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#runBenchmark(TestData,StandardOptions).mjava","sourceNew":null,"sourceOld":"    /**\n     * Run benchmark using supplied parameters.\n     *\n     * @param params benchmark parameters\n     * @throws Exception\n     */\n    protected void runBenchmark(TestData params, StandardOptions options) throws Exception\n    {\n        System.out.println(\"Start Time: \" + new Date());\n        int runCount = options.getRunCount();\n        for (int i = 0; i < runCount; i++)\n        {\n            TestRunData trd = new TestRunData();\n            trd.startRun();\n            trd.setId(String.valueOf(i));\n            IndexWriter iw = new IndexWriter(params.getDirectory(), params.getAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n            iw.setMergeFactor(params.getMergeFactor());\n            iw.setMaxBufferedDocs(params.getMaxBufferedDocs());\n\n            iw.setUseCompoundFile(params.isCompound());\n            makeIndex(trd, params.getSource(), iw, true, true, false, options);\n            if (params.isOptimize())\n            {\n                TimeData td = new TimeData(\"optimize\");\n                trd.addData(td);\n                td.start();\n                iw.optimize();\n                td.stop();\n                trd.addData(td);\n            }\n            iw.close();\n            QueryData[] queries = params.getQueries();\n            if (queries != null)\n            {\n                IndexReader ir = null;\n                IndexSearcher searcher = null;\n                for (int k = 0; k < queries.length; k++)\n                {\n                    QueryData qd = queries[k];\n                    if (ir != null && qd.reopen)\n                    {\n                        searcher.close();\n                        ir.close();\n                        ir = null;\n                        searcher = null;\n                    }\n                    if (ir == null)\n                    {\n                        ir = IndexReader.open(params.getDirectory());\n                        searcher = new IndexSearcher(ir);\n                    }\n                    Document doc = null;\n                    if (qd.warmup)\n                    {\n                        TimeData td = new TimeData(qd.id + \"-warm\");\n                        for (int m = 0; m < ir.maxDoc(); m++)\n                        {\n                            td.start();\n                            if (ir.isDeleted(m))\n                            {\n                                td.stop();\n                                continue;\n                            }\n                            doc = ir.document(m);\n                            td.stop();\n                        }\n                        trd.addData(td);\n                    }\n                    TimeData td = new TimeData(qd.id + \"-srch\");\n                    td.start();\n                    Hits h = searcher.search(qd.q);\n                    //System.out.println(\"Hits Size: \" + h.length() + \" Query: \" + qd.q);\n                    td.stop();\n                    trd.addData(td);\n                    td = new TimeData(qd.id + \"-trav\");\n                    if (h != null && h.length() > 0)\n                    {\n                        for (int m = 0; m < h.length(); m++)\n                        {\n                            td.start();\n                            int id = h.id(m);\n                            if (qd.retrieve)\n                            {\n                                doc = ir.document(id);\n                            }\n                            td.stop();\n                        }\n                    }\n                    trd.addData(td);\n                }\n                try\n                {\n                    if (searcher != null)\n                    {\n                        searcher.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n                try\n                {\n                    if (ir != null)\n                    {\n                        ir.close();\n                    }\n                }\n                catch (Exception e)\n                {\n                }\n                ;\n            }\n            trd.endRun();\n            params.getRunData().add(trd);\n            //System.out.println(params[i].showRunData(params[i].getId()));\n            //params.showRunData(params.getId());\n        }\n        System.out.println(\"End Time: \" + new Date());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f55f56ccbdfcad354e67291558fdec36be2341c8":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f55f56ccbdfcad354e67291558fdec36be2341c8"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"f55f56ccbdfcad354e67291558fdec36be2341c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}