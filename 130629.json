{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#rewriteToBlockSize(int).mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#rewriteToBlockSize(int).mjava","pathOld":"/dev/null","sourceNew":"  private void rewriteToBlockSize(int targetBlockBits) {\n    assert targetBlockBits <= maxBitsPerBlock;\n\n    // We copy over data blocks to an output with one-larger block bit size.\n    // We also discard references to blocks as we're copying to allow GC to\n    // clean up partial results in case of memory pressure.\n    ByteBuffersDataOutput cloned = new ByteBuffersDataOutput(targetBlockBits, targetBlockBits, blockAllocate, NO_REUSE);\n    ByteBuffer block;\n    while ((block = blocks.pollFirst()) != null) {\n      block.flip();\n      cloned.writeBytes(block);\n      if (blockReuse != NO_REUSE) {\n        blockReuse.accept(block);\n      }\n    }\n\n    assert blocks.isEmpty();\n    this.blockBits = targetBlockBits;\n    blocks.addAll(cloned.blocks);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"679def3e975e7c840728e0f1123a2785fc68b3f9","date":1601298488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#rewriteToBlockSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#rewriteToBlockSize(int).mjava","sourceNew":"  private void rewriteToBlockSize(int targetBlockBits) {\n    assert targetBlockBits <= maxBitsPerBlock;\n\n    // We copy over data blocks to an output with one-larger block bit size.\n    // We also discard references to blocks as we're copying to allow GC to\n    // clean up partial results in case of memory pressure.\n    ByteBuffersDataOutput cloned = new ByteBuffersDataOutput(targetBlockBits, targetBlockBits, blockAllocate, NO_REUSE);\n    ByteBuffer block;\n    while ((block = blocks.pollFirst()) != null) {\n      block.flip();\n      cloned.writeBytes(block);\n      if (blockReuse != NO_REUSE) {\n        blockReuse.accept(block);\n      }\n    }\n\n    assert blocks.isEmpty();\n    this.blockBits = targetBlockBits;\n    blocks.addAll(cloned.blocks);\n    ramBytesUsed = cloned.ramBytesUsed;\n  }\n\n","sourceOld":"  private void rewriteToBlockSize(int targetBlockBits) {\n    assert targetBlockBits <= maxBitsPerBlock;\n\n    // We copy over data blocks to an output with one-larger block bit size.\n    // We also discard references to blocks as we're copying to allow GC to\n    // clean up partial results in case of memory pressure.\n    ByteBuffersDataOutput cloned = new ByteBuffersDataOutput(targetBlockBits, targetBlockBits, blockAllocate, NO_REUSE);\n    ByteBuffer block;\n    while ((block = blocks.pollFirst()) != null) {\n      block.flip();\n      cloned.writeBytes(block);\n      if (blockReuse != NO_REUSE) {\n        blockReuse.accept(block);\n      }\n    }\n\n    assert blocks.isEmpty();\n    this.blockBits = targetBlockBits;\n    blocks.addAll(cloned.blocks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"679def3e975e7c840728e0f1123a2785fc68b3f9":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["679def3e975e7c840728e0f1123a2785fc68b3f9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"679def3e975e7c840728e0f1123a2785fc68b3f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["679def3e975e7c840728e0f1123a2785fc68b3f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}