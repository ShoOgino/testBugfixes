{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61558dab896ba60794837a7dd3b3be5b7940044d","date":1376939269,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#CheapBastardDocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  CheapBastardDocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      DiskDocValuesFormat.VERSION_CURRENT,\n                                      DiskDocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 DiskDocValuesFormat.VERSION_CURRENT,\n                                                 DiskDocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56be5c9792e4a329cf6468240a4f8ff532f426c","date":1382600931,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    final int version;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81b32c0ea0fbae1d5372e3e589383bcddcc9fd4","date":1382602022,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_CURRENT,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d23948f5639b3564f4350b02407694eb44ad6e82","date":1391200788,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_CURRENT,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8376536b651fde872bbc15edad6cda0ec3f6a51c","date":1392306302,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<Integer,NumericEntry>();\n      ords = new HashMap<Integer,NumericEntry>();\n      ordIndexes = new HashMap<Integer,NumericEntry>();\n      binaries = new HashMap<Integer,BinaryEntry>();\n      sortedSets = new HashMap<Integer,SortedSetEntry>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6120217e09092280e618050d052131ebcf6802d5","date":1395430033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    IndexInput in = state.directory.openInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (in.getFilePointer() != in.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + metaName + \"\\\": read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37bbe660229a1c295260800f4ee03365b37fa15c","date":1400939801,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.openInput(dataName, state.context);\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b612f3f700a1ca999f12198b7a33c65b4a96fd0","date":1406127397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70179a348a4367cb9fcf2d721a289651a8c125ac","date":1406551647,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = StringHelper.getVersionComparator().compare(ver, \"4.9.0\") < 0;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver;\n    try {\n      ver = Version.parseLeniently(state.segmentInfo.getVersion());\n    } catch (IllegalArgumentException e) {\n      ver = null;\n    }\n    lenientFieldInfoCheck = ver == null || !ver.onOrAfter(Version.LUCENE_4_9);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = Version.LUCENE_4_9_0.onOrAfter(ver);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    String ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = StringHelper.getVersionComparator().compare(ver, \"4.9.0\") < 0;\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = Version.LUCENE_4_9_0.onOrAfter(ver);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = Version.LUCENE_4_9_0.onOrAfter(ver);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#Lucene45DocValuesProducer(SegmentReadState,String,String,String,String).mjava","sourceNew":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = Version.LUCENE_4_9_0.onOrAfter(ver);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","sourceOld":"  /** expert: instantiates a new reader */\n  @SuppressWarnings(\"deprecation\")\n  protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension) throws IOException {\n    Version ver = state.segmentInfo.getVersion();\n    lenientFieldInfoCheck = Version.LUCENE_4_9_0.onOrAfter(ver);\n    String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n    // read in the entries from the metadata file.\n    ChecksumIndexInput in = state.directory.openChecksumInput(metaName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      version = CodecUtil.checkHeader(in, metaCodec, \n                                      Lucene45DocValuesFormat.VERSION_START,\n                                      Lucene45DocValuesFormat.VERSION_CURRENT);\n      numerics = new HashMap<>();\n      ords = new HashMap<>();\n      ordIndexes = new HashMap<>();\n      binaries = new HashMap<>();\n      sortedSets = new HashMap<>();\n      readFields(in, state.fieldInfos);\n\n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(in);\n      } else {\n        CodecUtil.checkEOF(in);\n      }\n\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n    this.data = state.directory.openInput(dataName, state.context);\n    success = false;\n    try {\n      final int version2 = CodecUtil.checkHeader(data, dataCodec, \n                                                 Lucene45DocValuesFormat.VERSION_START,\n                                                 Lucene45DocValuesFormat.VERSION_CURRENT);\n      if (version != version2) {\n        throw new CorruptIndexException(\"Format versions mismatch\");\n      }\n      \n      if (version >= Lucene45DocValuesFormat.VERSION_CHECKSUM) {\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(data);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this.data);\n      }\n    }\n    \n    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6120217e09092280e618050d052131ebcf6802d5","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["6120217e09092280e618050d052131ebcf6802d5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8376536b651fde872bbc15edad6cda0ec3f6a51c"],"61558dab896ba60794837a7dd3b3be5b7940044d":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"8376536b651fde872bbc15edad6cda0ec3f6a51c":["d23948f5639b3564f4350b02407694eb44ad6e82"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["37bbe660229a1c295260800f4ee03365b37fa15c"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61558dab896ba60794837a7dd3b3be5b7940044d"],"b7605579001505896d48b07160075a5c8b8e128e":["1f3b037cd083286b2af89f96e768f85dcd8072d6","0567bdc5c86c94ced64201187cfcef2417d76dda"],"057a1793765d068ea9302f1a29e21734ee58d41e":["70179a348a4367cb9fcf2d721a289651a8c125ac"],"37bbe660229a1c295260800f4ee03365b37fa15c":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["057a1793765d068ea9302f1a29e21734ee58d41e","4cc45c615dbb82bf79d5f9550286098367874fbf"],"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["057a1793765d068ea9302f1a29e21734ee58d41e"],"e81b32c0ea0fbae1d5372e3e589383bcddcc9fd4":["e56be5c9792e4a329cf6468240a4f8ff532f426c"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["1f3b037cd083286b2af89f96e768f85dcd8072d6","0567bdc5c86c94ced64201187cfcef2417d76dda"],"70179a348a4367cb9fcf2d721a289651a8c125ac":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"d23948f5639b3564f4350b02407694eb44ad6e82":["e81b32c0ea0fbae1d5372e3e589383bcddcc9fd4"],"6120217e09092280e618050d052131ebcf6802d5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","0567bdc5c86c94ced64201187cfcef2417d76dda","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6120217e09092280e618050d052131ebcf6802d5"],"61558dab896ba60794837a7dd3b3be5b7940044d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"8376536b651fde872bbc15edad6cda0ec3f6a51c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","37bbe660229a1c295260800f4ee03365b37fa15c","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"4b612f3f700a1ca999f12198b7a33c65b4a96fd0":["70179a348a4367cb9fcf2d721a289651a8c125ac"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e56be5c9792e4a329cf6468240a4f8ff532f426c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"057a1793765d068ea9302f1a29e21734ee58d41e":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"37bbe660229a1c295260800f4ee03365b37fa15c":["4b612f3f700a1ca999f12198b7a33c65b4a96fd0"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e81b32c0ea0fbae1d5372e3e589383bcddcc9fd4":["d23948f5639b3564f4350b02407694eb44ad6e82"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["61558dab896ba60794837a7dd3b3be5b7940044d"],"70179a348a4367cb9fcf2d721a289651a8c125ac":["057a1793765d068ea9302f1a29e21734ee58d41e"],"d23948f5639b3564f4350b02407694eb44ad6e82":["8376536b651fde872bbc15edad6cda0ec3f6a51c"],"6120217e09092280e618050d052131ebcf6802d5":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["e81b32c0ea0fbae1d5372e3e589383bcddcc9fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}