{"path":"solr/core/src/test/org/apache/solr/handler/component/ShardsWhitelistTest#setupClusters().mjava","commits":[{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ShardsWhitelistTest#setupClusters().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    final String[] clusterIds = new String[] {IMPLICIT_CLUSTER_KEY, EXPLICIT_CLUSTER_KEY};\n\n    numShards = 2; // +random().nextInt(2);\n    numReplicas = 1; // +random().nextInt(2);\n    maxShardsPerNode = 1; // +random().nextInt(2);\n    nodesPerCluster = (numShards * numReplicas + (maxShardsPerNode - 1)) / maxShardsPerNode;\n\n    final StringBuilder sb = new StringBuilder();\n\n    doSetupClusters(clusterIds,\n        new DefaultClusterCreateFunction() {\n\n          @Override\n          public MiniSolrCloudCluster apply(String clusterId) {\n            try {\n              final MiniSolrCloudCluster cluster = new SolrCloudTestCase.Builder(nodesPerCluster(clusterId),\n                  createTempDir())\n                      .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n                      .withSolrXml(MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\n                          MiniSolrCloudCluster.SOLR_TESTS_SHARDS_WHITELIST, EXPLICIT_WHITELIST_PROPERTY + clusterId))\n                      .build();\n              return cluster;\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas, maxShardsPerNode) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            appendClusterNodes(sb, \",\", cluster);\n            if (clusterId.equals(EXPLICIT_CLUSTER_KEY)) {\n              System.setProperty(EXPLICIT_WHITELIST_PROPERTY + clusterId, sb.toString());\n              for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n                try {\n                  runner.stop();\n                  runner.start(true);\n                } catch (Exception e) {\n                  throw new RuntimeException(\"Unable to restart runner\", e);\n                }\n              }\n            }\n            doAccept(COLLECTION_NAME, cluster);\n          }\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ShardsWhitelistTest#setupClusters().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ShardsWhitelistTest#setupClusters().mjava","sourceNew":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    final String[] clusterIds = new String[] {IMPLICIT_CLUSTER_KEY, EXPLICIT_CLUSTER_KEY};\n\n    numShards = 2; // +random().nextInt(2);\n    numReplicas = 1; // +random().nextInt(2);\n    nodesPerCluster = numShards * numReplicas;\n\n    final StringBuilder sb = new StringBuilder();\n\n    doSetupClusters(clusterIds,\n        new DefaultClusterCreateFunction() {\n\n          @Override\n          public MiniSolrCloudCluster apply(String clusterId) {\n            try {\n              final MiniSolrCloudCluster cluster = new SolrCloudTestCase.Builder(nodesPerCluster(clusterId),\n                  createTempDir())\n                      .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n                      .withSolrXml(MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\n                          MiniSolrCloudCluster.SOLR_TESTS_SHARDS_WHITELIST, EXPLICIT_WHITELIST_PROPERTY + clusterId))\n                      .build();\n              return cluster;\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            appendClusterNodes(sb, \",\", cluster);\n            if (clusterId.equals(EXPLICIT_CLUSTER_KEY)) {\n              System.setProperty(EXPLICIT_WHITELIST_PROPERTY + clusterId, sb.toString());\n              for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n                try {\n                  runner.stop();\n                  runner.start(true);\n                } catch (Exception e) {\n                  throw new RuntimeException(\"Unable to restart runner\", e);\n                }\n              }\n            }\n            doAccept(COLLECTION_NAME, cluster);\n          }\n        });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClusters() throws Exception {\n\n    final String[] clusterIds = new String[] {IMPLICIT_CLUSTER_KEY, EXPLICIT_CLUSTER_KEY};\n\n    numShards = 2; // +random().nextInt(2);\n    numReplicas = 1; // +random().nextInt(2);\n    maxShardsPerNode = 1; // +random().nextInt(2);\n    nodesPerCluster = (numShards * numReplicas + (maxShardsPerNode - 1)) / maxShardsPerNode;\n\n    final StringBuilder sb = new StringBuilder();\n\n    doSetupClusters(clusterIds,\n        new DefaultClusterCreateFunction() {\n\n          @Override\n          public MiniSolrCloudCluster apply(String clusterId) {\n            try {\n              final MiniSolrCloudCluster cluster = new SolrCloudTestCase.Builder(nodesPerCluster(clusterId),\n                  createTempDir())\n                      .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n                      .withSolrXml(MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\n                          MiniSolrCloudCluster.SOLR_TESTS_SHARDS_WHITELIST, EXPLICIT_WHITELIST_PROPERTY + clusterId))\n                      .build();\n              return cluster;\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n\n          @Override\n          protected int nodesPerCluster(String clusterId) {\n            return nodesPerCluster;\n          }\n        },\n        new DefaultClusterInitFunction(numShards, numReplicas, maxShardsPerNode) {\n          @Override\n          public void accept(String clusterId, MiniSolrCloudCluster cluster) {\n            appendClusterNodes(sb, \",\", cluster);\n            if (clusterId.equals(EXPLICIT_CLUSTER_KEY)) {\n              System.setProperty(EXPLICIT_WHITELIST_PROPERTY + clusterId, sb.toString());\n              for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n                try {\n                  runner.stop();\n                  runner.start(true);\n                } catch (Exception e) {\n                  throw new RuntimeException(\"Unable to restart runner\", e);\n                }\n              }\n            }\n            doAccept(COLLECTION_NAME, cluster);\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d51e7db479b42602c7e23ba871b177387268179":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"4d51e7db479b42602c7e23ba871b177387268179":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d51e7db479b42602c7e23ba871b177387268179"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}