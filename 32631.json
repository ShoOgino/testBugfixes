{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        if (readOnly)\n          return new ReadOnlyDirectoryReader(directory, infos, deletionPolicy, termInfosIndexDivisor, codecs2);\n        else\n          return new DirectoryReader(directory, infos, deletionPolicy, false, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        if (readOnly)\n          return new ReadOnlyDirectoryReader(directory, infos, deletionPolicy, termInfosIndexDivisor, codecs2);\n        else\n          return new DirectoryReader(directory, infos, deletionPolicy, false, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","date":1288888250,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecProvider = codecs == null ? CodecProvider.getDefault()\n        : codecs;\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos(codecProvider);\n        infos.read(directory, segmentFileName, codecProvider);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecProvider);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","bugFix":["406e7055a3e99d3fa6ce49a555a51dd18b321806","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecProvider = codecs == null ? CodecProvider.getDefault()\n        : codecs;\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos(codecProvider);\n        infos.read(directory, segmentFileName, codecProvider);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecProvider);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecProvider = codecs == null ? CodecProvider.getDefault()\n        : codecs;\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos(codecProvider);\n        infos.read(directory, segmentFileName, codecProvider);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecProvider);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecs2;\n    if (codecs == null) {\n      codecs2 = CodecProvider.getDefault();\n    } else {\n      codecs2 = codecs;\n    }\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName, codecs2);\n        if (readOnly)\n          return new ReadOnlyDirectoryReader(directory, infos, deletionPolicy, termInfosIndexDivisor, codecs2);\n        else\n          return new DirectoryReader(directory, infos, deletionPolicy, false, termInfosIndexDivisor, codecs2);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int,CodecProvider).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor, CodecProvider codecs) throws CorruptIndexException, IOException {\n    final CodecProvider codecProvider = codecs == null ? CodecProvider.getDefault()\n        : codecs;\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos(codecProvider);\n        infos.read(directory, segmentFileName, codecProvider);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor, codecProvider);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["406e7055a3e99d3fa6ce49a555a51dd18b321806","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["85a883878c0af761245ab048babc63d099f835f3","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["7b91922b55d15444d554721b352861d028eb8278","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}