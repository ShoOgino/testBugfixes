{"path":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","commits":[{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"/dev/null","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4196a8f99ce1dc39a13b325cd9fc21616fa54164","date":1314268949,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(newField(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"4196a8f99ce1dc39a13b325cd9fc21616fa54164":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["2f49143da0a5d278a72f741432047fcfa6da996e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4196a8f99ce1dc39a13b325cd9fc21616fa54164"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4196a8f99ce1dc39a13b325cd9fc21616fa54164":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2f49143da0a5d278a72f741432047fcfa6da996e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4196a8f99ce1dc39a13b325cd9fc21616fa54164","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}