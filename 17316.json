{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","commits":[{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the iterator to exactly {@code target} and return whether\n   *  {@code target} has a value.\n   *  {@code target} must be greater than or equal to the current\n   *  {@link #docID() doc ID} and must be a valid doc ID, ie. &ge; 0 and\n   *  &lt; {@code maxDoc}.\n   *  After this method returns, {@link #docID()} retuns {@code target}. */\n  public abstract boolean advanceExact(int target) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the iterator to exactly {@code target} and return whether\n   *  {@code target} has a value.\n   *  {@code target} must be greater than or equal to the current\n   *  {@link #docID() doc ID} and must be a valid doc ID, ie. &ge; 0 and\n   *  &lt; {@code maxDoc}.\n   *  After this method returns, {@link #docID()} retuns {@code target}. */\n  public abstract boolean advanceExact(int target) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Advance the iterator to exactly {@code target} and return whether\n   *  {@code target} has a value.\n   *  {@code target} must be greater than or equal to the current\n   *  {@link #docID() doc ID} and must be a valid doc ID, ie. &ge; 0 and\n   *  &lt; {@code maxDoc}.\n   *  After this method returns, {@link #docID()} retuns {@code target}. */\n  public abstract boolean advanceExact(int target) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesIterator#advanceExact(int).mjava","sourceNew":"  /** Advance the iterator to exactly {@code target} and return whether\n   *  {@code target} has a value.\n   *  {@code target} must be greater than or equal to the current\n   *  {@link #docID() doc ID} and must be a valid doc ID, ie. &ge; 0 and\n   *  &lt; {@code maxDoc}.\n   *  After this method returns, {@link #docID()} returns {@code target}. */\n  public abstract boolean advanceExact(int target) throws IOException;\n\n","sourceOld":"  /** Advance the iterator to exactly {@code target} and return whether\n   *  {@code target} has a value.\n   *  {@code target} must be greater than or equal to the current\n   *  {@link #docID() doc ID} and must be a valid doc ID, ie. &ge; 0 and\n   *  &lt; {@code maxDoc}.\n   *  After this method returns, {@link #docID()} retuns {@code target}. */\n  public abstract boolean advanceExact(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2af44fa9bd43d5df330d6438c1af390323f7d567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}