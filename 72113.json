{"path":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n    // clone reader\n    SegmentReader clone;\n    if (readOnly) \n      clone = new ReadOnlySegmentReader();\n    else\n      clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      clone.readOnly = readOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4517bc1885b0992d66724c359b9d47da67ab30f2","date":1233977424,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"785a8d5c6c956bfae3cc7d0a7665c73da0e6756d","date":1235158645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab","date":1235909556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c64d3fc8f08f82501acbe761d551a660fd4770cf","date":1237728118,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f55685835776d0aadf522e7988dc8ddf78db8245","date":1242848339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fe49edd7581c377876998430f9547519f41a60a","date":1242906321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      coreRef.incRef();\n      clone.coreRef = coreRef;\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n      clone.fieldsReaderOrig = fieldsReaderOrig;\n      \n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.setDisableFakeNorms(getDisableFakeNorms());\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"277b20588f94e26ec21ffdfc360528133991372e","date":1256467913,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incRef();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75269f4dedadda2b3bd49e0e009adf4c158f7a42","date":1261219500,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.pendingDeleteCount = pendingDeleteCount;\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["c64d3fc8f08f82501acbe761d551a660fd4770cf"],"785a8d5c6c956bfae3cc7d0a7665c73da0e6756d":["4517bc1885b0992d66724c359b9d47da67ab30f2"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["785a8d5c6c956bfae3cc7d0a7665c73da0e6756d"],"c64d3fc8f08f82501acbe761d551a660fd4770cf":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"277b20588f94e26ec21ffdfc360528133991372e":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"75269f4dedadda2b3bd49e0e009adf4c158f7a42":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["5fe49edd7581c377876998430f9547519f41a60a"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f55685835776d0aadf522e7988dc8ddf78db8245":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fe49edd7581c377876998430f9547519f41a60a":["f55685835776d0aadf522e7988dc8ddf78db8245"],"4517bc1885b0992d66724c359b9d47da67ab30f2":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["277b20588f94e26ec21ffdfc360528133991372e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["75269f4dedadda2b3bd49e0e009adf4c158f7a42"]},"commit2Childs":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["f55685835776d0aadf522e7988dc8ddf78db8245"],"785a8d5c6c956bfae3cc7d0a7665c73da0e6756d":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["c64d3fc8f08f82501acbe761d551a660fd4770cf"],"c64d3fc8f08f82501acbe761d551a660fd4770cf":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"277b20588f94e26ec21ffdfc360528133991372e":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"75269f4dedadda2b3bd49e0e009adf4c158f7a42":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["4517bc1885b0992d66724c359b9d47da67ab30f2"],"f55685835776d0aadf522e7988dc8ddf78db8245":["5fe49edd7581c377876998430f9547519f41a60a"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["277b20588f94e26ec21ffdfc360528133991372e"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"5fe49edd7581c377876998430f9547519f41a60a":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"4517bc1885b0992d66724c359b9d47da67ab30f2":["785a8d5c6c956bfae3cc7d0a7665c73da0e6756d"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["75269f4dedadda2b3bd49e0e009adf4c158f7a42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}