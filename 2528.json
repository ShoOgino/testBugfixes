{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String,String).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","sourceNew":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    String field,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    field=field.intern();\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Marks documents in a specific range. Code borrowed from original RangeFilter and simplified (and returns number of terms) */\n  private int setBits(final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits, String lowerTerm, String upperTerm) throws IOException {\n    //System.out.println(stringToHexDigits(lowerTerm)+\" TO \"+stringToHexDigits(upperTerm));\n    int count=0,len=lowerTerm.length();\n    final String field;\n    if (len<trieVariant.TRIE_CODED_LENGTH) {\n      // lower precision value is in helper field\n      field=(this.field + trieVariant.LOWER_PRECISION_FIELD_NAME_SUFFIX).intern();\n      // add padding before lower precision values to group them\n      lowerTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(lowerTerm).toString();\n      upperTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(upperTerm).toString();\n      // length is longer by 1 char because of padding\n      len++;\n    } else {\n      // full precision value is in original field\n      field=this.field;\n    }\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\n    try {\n      do {\n        final Term term = enumerator.term();\n        if (term!=null && term.field()==field) {\n          // break out when upperTerm reached or length of term is different\n          final String t=term.text();\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\n          // we have a good term, find the docs\n          count++;\n          termDocs.seek(enumerator);\n          while (termDocs.next()) bits.set(termDocs.doc());\n        } else break;\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String,String).mjava","sourceNew":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    String field,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    field=field.intern();\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}