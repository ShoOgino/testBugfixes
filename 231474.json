{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (autoCommit) {\n        assertTrue(policy.numOnCommit > 3*(N+1)-1);\n      } else {\n        assertEquals(2*(N+1), policy.numOnCommit);\n      }\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(query);\n        assertEquals(16, hits.length());\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(query);\n      assertEquals(0, hits.length());\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query);\n            assertEquals(expectedCount, hits.length());\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.LIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5604780c9f065ff8595a882a210f65ce7c63cf3e","date":1241173552,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(2*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<4;pass++) {\n\n      boolean autoCommit = pass < 2;\n      boolean useCompoundFile = (pass % 2) > 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false, policy);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit when autoCommit=false:\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit when autoCommit=false:\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, policy);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      if (!autoCommit)\n        assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.  Only check this in the\n          // autoCommit false case:\n          if (!autoCommit) {\n            searcher = new IndexSearcher(reader);\n            hits = searcher.search(query, null, 1000).scoreDocs;\n            assertEquals(expectedCount, hits.length);\n            searcher.close();\n            if (expectedCount == 0) {\n              expectedCount = 16;\n            } else if (expectedCount == 16) {\n              expectedCount = 17;\n            } else if (expectedCount == 17) {\n              expectedCount = 0;\n            }\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND)\n            .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND)\n            .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"5604780c9f065ff8595a882a210f65ce7c63cf3e":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"67006a60923e2124212d3baa0d29b444bcbd8373":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5604780c9f065ff8595a882a210f65ce7c63cf3e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["67006a60923e2124212d3baa0d29b444bcbd8373"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5604780c9f065ff8595a882a210f65ce7c63cf3e"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5604780c9f065ff8595a882a210f65ce7c63cf3e"],"5604780c9f065ff8595a882a210f65ce7c63cf3e":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"67006a60923e2124212d3baa0d29b444bcbd8373":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["67006a60923e2124212d3baa0d29b444bcbd8373"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"8b6187898fc4413ccd18229711786550a280383c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e82780afe6097066eb5befb86e9432f077667e3d":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}