{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","date":1374966910,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92009ce6b3696f548a1c7eb9fcf8cab29b541426","date":1375140262,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","date":1386062370,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n      \n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      \n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<String, String[]>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if its already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      if (!isFormData(req)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \" + req.getContentType());\n      }\n\n      return parseParamsAndFillStreams(req, streams, null);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.FormDataRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      if (!isFormData(req)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \" + req.getContentType());\n      }\n\n      return parseParamsAndFillStreams(req, streams, null);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if (!isFormData(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n      }\n\n      final Map<String,String[]> map = new HashMap<>();\n      \n      // also add possible URL parameters and include into the map (parsed using UTF-8):\n      final String qs = req.getQueryString();\n      if (qs != null) {\n        parseQueryString(qs, map);\n      }\n      \n      // may be -1, so we check again later. But if it's already greater we can stop processing!\n      final long totalLength = req.getContentLength();\n      final long maxLength = ((long) uploadLimitKB) * 1024L;\n      if (totalLength > maxLength) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n          totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n\n      // get query String from request body, using the charset given in content-type:\n      final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n      final Charset charset = (cs == null) ? StandardCharsets.UTF_8 : Charset.forName(cs);\n      InputStream in = null;\n      try {\n        in = req.getInputStream();\n        final long bytesRead = parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map, false);\n        if (bytesRead == 0L && totalLength > 0L) {\n          throw getParameterIncompatibilityException();\n        }\n      } catch (IOException ioe) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n      } catch (IllegalStateException ise) {\n        throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n      } finally {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      \n      return new MultiMapSolrParams(map);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","0d17ec5164debc23076db7fd11d0331f201583b5"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7d89d7e4e5101347833eea558851bf4209218619"],"0d17ec5164debc23076db7fd11d0331f201583b5":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["92009ce6b3696f548a1c7eb9fcf8cab29b541426","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d17ec5164debc23076db7fd11d0331f201583b5"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}