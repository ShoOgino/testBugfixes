{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","commits":[{"id":"1d6b7628166e3e58a411c83f120233cbaf3fc052","date":1199324898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","pathOld":"/dev/null","sourceNew":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = (PerfTask) tasks.get(k);\n        anyExhaustableTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustableTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17545f768b4195b31e1007eedb907431f58f7833","date":1199373641,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","sourceNew":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = (PerfTask) tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","sourceOld":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = (PerfTask) tasks.get(k);\n        anyExhaustableTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustableTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","sourceNew":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","sourceOld":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = (PerfTask) tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","sourceNew":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n    if (!parallel && logByTimeMsec != 0 && !letChildReport) {\n      countsByTime = new int[1];\n    }\n  }\n\n","sourceOld":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#initTasksArray().mjava","sourceNew":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n    if (!parallel && logByTimeMsec != 0 && !letChildReport) {\n      countsByTime = new int[1];\n    }\n  }\n\n","sourceOld":"  private void initTasksArray() {\n    if (tasksArray == null) {\n      final int numTasks = tasks.size();\n      tasksArray = new PerfTask[numTasks];\n      for(int k=0;k<numTasks;k++) {\n        tasksArray[k] = tasks.get(k);\n        anyExhaustibleTasks |= tasksArray[k] instanceof ResetInputsTask;\n        anyExhaustibleTasks |= tasksArray[k] instanceof TaskSequence;\n      }\n    }\n    if (!parallel && logByTimeMsec != 0 && !letChildReport) {\n      countsByTime = new int[1];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["17545f768b4195b31e1007eedb907431f58f7833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"17545f768b4195b31e1007eedb907431f58f7833":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["17545f768b4195b31e1007eedb907431f58f7833"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"17545f768b4195b31e1007eedb907431f58f7833":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}