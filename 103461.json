{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#testFieldInfos().mjava","commits":[{"id":"4c1c835c1d1d2594b34b55026a015b3f13afb477","date":1518518197,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#testFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldInfos() throws Exception{\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(NoMergePolicy.INSTANCE));\n\n    Document d1 = new Document();\n    for (int i = 0; i < 15; i++) {\n      d1.add(new StringField(\"f\" + i, \"v\" + i, Field.Store.YES));\n    }\n    writer.addDocument(d1);\n    writer.commit();\n\n    Document d2 = new Document();\n    d2.add(new StringField(\"f0\", \"v0\", Field.Store.YES));\n    d2.add(new StringField(\"f15\", \"v15\", Field.Store.YES));\n    d2.add(new StringField(\"f16\", \"v16\", Field.Store.YES));\n    writer.addDocument(d2);\n    writer.commit();\n\n    Document d3 = new Document();\n    writer.addDocument(d3);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(3, sis.size());\n\n    FieldInfos fis1 = IndexWriter.readFieldInfos(sis.info(0));\n    FieldInfos fis2 = IndexWriter.readFieldInfos(sis.info(1));\n    FieldInfos fis3 = IndexWriter.readFieldInfos(sis.info(2));\n\n    // testing dense FieldInfos\n    Iterator<FieldInfo>  it = fis1.iterator();\n    int i = 0;\n    while(it.hasNext()) {\n      FieldInfo fi = it.next();\n      assertEquals(i, fi.number);\n      assertEquals(\"f\" + i , fi.name);\n      assertEquals(\"f\" + i, fis1.fieldInfo(i).name); //lookup by number\n      assertEquals(\"f\" + i, fis1.fieldInfo(\"f\" + i).name); //lookup by name\n      i++;\n    }\n\n    // testing sparse FieldInfos\n    assertEquals(\"f0\", fis2.fieldInfo(0).name); //lookup by number\n    assertEquals(\"f0\", fis2.fieldInfo(\"f0\").name); //lookup by name\n    assertNull(fis2.fieldInfo(1));\n    assertNull(fis2.fieldInfo(\"f1\"));\n    assertEquals(\"f15\", fis2.fieldInfo(15).name);\n    assertEquals(\"f15\", fis2.fieldInfo(\"f15\").name);\n    assertEquals(\"f16\", fis2.fieldInfo(16).name);\n    assertEquals(\"f16\", fis2.fieldInfo(\"f16\").name);\n\n    // testing empty FieldInfos\n    assertNull(fis3.fieldInfo(0)); //lookup by number\n    assertNull(fis3.fieldInfo(\"f0\")); //lookup by name\n    assertEquals(0, fis3.size());\n    Iterator<FieldInfo> it3 = fis3.iterator();\n    assertFalse(it3.hasNext());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#testFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldInfos() throws Exception{\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(NoMergePolicy.INSTANCE));\n\n    Document d1 = new Document();\n    for (int i = 0; i < 15; i++) {\n      d1.add(new StringField(\"f\" + i, \"v\" + i, Field.Store.YES));\n    }\n    writer.addDocument(d1);\n    writer.commit();\n\n    Document d2 = new Document();\n    d2.add(new StringField(\"f0\", \"v0\", Field.Store.YES));\n    d2.add(new StringField(\"f15\", \"v15\", Field.Store.YES));\n    d2.add(new StringField(\"f16\", \"v16\", Field.Store.YES));\n    writer.addDocument(d2);\n    writer.commit();\n\n    Document d3 = new Document();\n    writer.addDocument(d3);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(3, sis.size());\n\n    FieldInfos fis1 = IndexWriter.readFieldInfos(sis.info(0));\n    FieldInfos fis2 = IndexWriter.readFieldInfos(sis.info(1));\n    FieldInfos fis3 = IndexWriter.readFieldInfos(sis.info(2));\n\n    // testing dense FieldInfos\n    Iterator<FieldInfo>  it = fis1.iterator();\n    int i = 0;\n    while(it.hasNext()) {\n      FieldInfo fi = it.next();\n      assertEquals(i, fi.number);\n      assertEquals(\"f\" + i , fi.name);\n      assertEquals(\"f\" + i, fis1.fieldInfo(i).name); //lookup by number\n      assertEquals(\"f\" + i, fis1.fieldInfo(\"f\" + i).name); //lookup by name\n      i++;\n    }\n\n    // testing sparse FieldInfos\n    assertEquals(\"f0\", fis2.fieldInfo(0).name); //lookup by number\n    assertEquals(\"f0\", fis2.fieldInfo(\"f0\").name); //lookup by name\n    assertNull(fis2.fieldInfo(1));\n    assertNull(fis2.fieldInfo(\"f1\"));\n    assertEquals(\"f15\", fis2.fieldInfo(15).name);\n    assertEquals(\"f15\", fis2.fieldInfo(\"f15\").name);\n    assertEquals(\"f16\", fis2.fieldInfo(16).name);\n    assertEquals(\"f16\", fis2.fieldInfo(\"f16\").name);\n\n    // testing empty FieldInfos\n    assertNull(fis3.fieldInfo(0)); //lookup by number\n    assertNull(fis3.fieldInfo(\"f0\")); //lookup by name\n    assertEquals(0, fis3.size());\n    Iterator<FieldInfo> it3 = fis3.iterator();\n    assertFalse(it3.hasNext());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c1c835c1d1d2594b34b55026a015b3f13afb477":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c1c835c1d1d2594b34b55026a015b3f13afb477"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c1c835c1d1d2594b34b55026a015b3f13afb477","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"4c1c835c1d1d2594b34b55026a015b3f13afb477":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}