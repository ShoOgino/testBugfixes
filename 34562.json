{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","pathOld":"/dev/null","sourceNew":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","sourceNew":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {\n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","sourceNew":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {\n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#assertSame(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","sourceNew":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {\n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocValuesRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {\n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#assertSame(String).mjava","sourceNew":null,"sourceOld":"  /** check that the # of hits is the same as if the query\n   * is run against the inverted index\n   */\n  protected void assertSame(String regexp) throws IOException {\n    RegexpQuery docValues = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n    docValues.setRewriteMethod(new DocTermOrdsRewriteMethod());\n    RegexpQuery inverted = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);\n   \n    TopDocs invertedDocs = searcher1.search(inverted, 25);\n    TopDocs docValuesDocs = searcher2.search(docValues, 25);\n\n    CheckHits.checkEqual(inverted, invertedDocs.scoreDocs, docValuesDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c84485629d80d203608e8975a1139de9933cc38","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c84485629d80d203608e8975a1139de9933cc38":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"5c84485629d80d203608e8975a1139de9933cc38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}