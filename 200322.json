{"path":"solr/core/src/test/org/apache/solr/cloud/LIROnShardRestartTest#testSeveralReplicasInLIR().mjava","commits":[{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIROnShardRestartTest#testSeveralReplicasInLIR().mjava","pathOld":"/dev/null","sourceNew":"  public void testSeveralReplicasInLIR() throws Exception {\n    String collection = \"severalReplicasInLIR\";\n    CollectionAdminRequest.createCollection(collection, 1, 3)\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collection, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collection, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collection);\n\n    DocCollection docCollection = getCollectionState(collection);\n    Map<JettySolrRunner, String> nodeNameToJetty = cluster.getJettySolrRunners().stream()\n        .collect(Collectors.toMap(jetty -> jetty, JettySolrRunner::getNodeName));\n    ChaosMonkey.stop(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all not live\",\n        ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 45000));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      for (Replica replica : docCollection.getReplicas()) {\n        zkShardTerms.removeTerm(replica.getName());\n      }\n    }\n\n    Map<String,Object> stateObj = Utils.makeMap();\n    stateObj.put(ZkStateReader.STATE_PROP, \"down\");\n    stateObj.put(\"createdByNodeName\", \"test\");\n    stateObj.put(\"createdByCoreNodeName\", \"test\");\n    byte[] znodeData = Utils.toJSON(stateObj);\n\n    Replica replicaNotInLIR = docCollection.getReplicas().get(random().nextInt(3));\n    for (Replica replica : docCollection.getReplicas()) {\n      if (replica.getName().equals(replicaNotInLIR.getName())) continue;\n      try {\n        cluster.getZkClient().makePath(\"/collections/\" + collection + \"/leader_initiated_recovery/shard1/\" + replica.getName(),\n            znodeData, true);\n      } catch (KeeperException.NodeExistsException e) {\n\n      }\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) continue;\n      jetty.start();\n    }\n    waitForState(\"Timeout waiting for no leader\", collection, (liveNodes, collectionState) -> {\n      Replica leader = collectionState.getSlice(\"shard1\").getLeader();\n      return leader == null;\n    });\n\n    // only 2 replicas join the election and all of them are in LIR state, no one should win the election\n    List<String> oldElectionNodes = getElectionNodes(collection, \"shard1\", cluster.getZkClient());\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.CURRENT_TIME);\n    while (!timeOut.hasTimedOut()) {\n      List<String> electionNodes = getElectionNodes(collection, \"shard1\", cluster.getZkClient());\n      electionNodes.retainAll(oldElectionNodes);\n      if (electionNodes.isEmpty()) break;\n    }\n    assertFalse(\"Timeout waiting for replicas rejoin election\", timeOut.hasTimedOut());\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) {\n        jetty.start();\n      }\n    }\n    waitForState(\"Timeout waiting for new leader\", collection, (liveNodes, collectionState) -> {\n      Replica leader = collectionState.getSlice(\"shard1\").getLeader();\n      return leader != null;\n    });\n    waitForState(\"Timeout waiting for new leader\", collection, clusterShape(1, 3));\n\n    assertEquals(2L, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e17aaf87787d71a71e24ffcebe989d02f078efd2","date":1540263539,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIROnShardRestartTest#testSeveralReplicasInLIR().mjava","sourceNew":null,"sourceOld":"  public void testSeveralReplicasInLIR() throws Exception {\n    String collection = \"severalReplicasInLIR\";\n    CollectionAdminRequest.createCollection(collection, 1, 3)\n        .process(cluster.getSolrClient());\n    cluster.getSolrClient().add(collection, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collection, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collection);\n\n    DocCollection docCollection = getCollectionState(collection);\n    Map<JettySolrRunner, String> nodeNameToJetty = cluster.getJettySolrRunners().stream()\n        .collect(Collectors.toMap(jetty -> jetty, JettySolrRunner::getNodeName));\n    ChaosMonkey.stop(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all not live\",\n        ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 45000));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      for (Replica replica : docCollection.getReplicas()) {\n        zkShardTerms.removeTerm(replica.getName());\n      }\n    }\n\n    Map<String,Object> stateObj = Utils.makeMap();\n    stateObj.put(ZkStateReader.STATE_PROP, \"down\");\n    stateObj.put(\"createdByNodeName\", \"test\");\n    stateObj.put(\"createdByCoreNodeName\", \"test\");\n    byte[] znodeData = Utils.toJSON(stateObj);\n\n    Replica replicaNotInLIR = docCollection.getReplicas().get(random().nextInt(3));\n    for (Replica replica : docCollection.getReplicas()) {\n      if (replica.getName().equals(replicaNotInLIR.getName())) continue;\n      try {\n        cluster.getZkClient().makePath(\"/collections/\" + collection + \"/leader_initiated_recovery/shard1/\" + replica.getName(),\n            znodeData, true);\n      } catch (KeeperException.NodeExistsException e) {\n\n      }\n    }\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) continue;\n      jetty.start();\n    }\n    waitForState(\"Timeout waiting for no leader\", collection, (liveNodes, collectionState) -> {\n      Replica leader = collectionState.getSlice(\"shard1\").getLeader();\n      return leader == null;\n    });\n\n    // only 2 replicas join the election and all of them are in LIR state, no one should win the election\n    List<String> oldElectionNodes = getElectionNodes(collection, \"shard1\", cluster.getZkClient());\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.CURRENT_TIME);\n    while (!timeOut.hasTimedOut()) {\n      List<String> electionNodes = getElectionNodes(collection, \"shard1\", cluster.getZkClient());\n      electionNodes.retainAll(oldElectionNodes);\n      if (electionNodes.isEmpty()) break;\n    }\n    assertFalse(\"Timeout waiting for replicas rejoin election\", timeOut.hasTimedOut());\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) {\n        jetty.start();\n      }\n    }\n    waitForState(\"Timeout waiting for new leader\", collection, (liveNodes, collectionState) -> {\n      Replica leader = collectionState.getSlice(\"shard1\").getLeader();\n      return leader != null;\n    });\n    waitForState(\"Timeout waiting for new leader\", collection, clusterShape(1, 3));\n\n    assertEquals(2L, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e17aaf87787d71a71e24ffcebe989d02f078efd2":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e17aaf87787d71a71e24ffcebe989d02f078efd2"]},"commit2Childs":{"e17aaf87787d71a71e24ffcebe989d02f078efd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["e17aaf87787d71a71e24ffcebe989d02f078efd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}