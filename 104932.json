{"path":"lucene/core/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean,boolean).mjava","commits":[{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean).mjava","sourceNew":"  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit, boolean commitOnClose) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()).setCommitOnClose(commitOnClose));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n    doc.add(newTextField(\"id\", \"0\", Field.Store.NO));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","sourceOld":"  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n    doc.add(newTextField(\"id\", \"0\", Field.Store.NO));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean,boolean).mjava","sourceNew":"  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit, boolean commitOnClose) throws IOException {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()).setCommitOnClose(commitOnClose));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n    doc.add(newTextField(\"id\", \"0\", Field.Store.NO));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","sourceOld":"  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit, boolean commitOnClose) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()).setCommitOnClose(commitOnClose));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n    doc.add(newTextField(\"id\", \"0\", Field.Store.NO));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285cdc737de75b7cc7c284a156b20214deb67bca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}