{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(Document).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( Document doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","sourceNew":"  public final SolrDocument toSolrDocument( StoredDocument doc ) \n  {\n    return ResponseWriterUtil.toSolrDocument(doc, schema);\n  }\n\n","sourceOld":"  public final SolrDocument toSolrDocument( StoredDocument doc )\n  {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        } \n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#toSolrDocument(StoredDocument).mjava","sourceNew":null,"sourceOld":"  public final SolrDocument toSolrDocument( StoredDocument doc ) \n  {\n    return ResponseWriterUtil.toSolrDocument(doc, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}