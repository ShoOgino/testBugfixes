{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc seg=\" + segment + \" fp=\" + freqIn.getFilePointer());\n      while(true) {\n        if (ord == limit) {\n          //if (DEBUG) System.out.println(\"      return doc=\" + NO_MORE_DOCS);\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n        // if (DEBUG) System.out.println(\"      code=\" + code);\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc seg=\" + segment + \" fp=\" + freqIn.getFilePointer());\n      while(true) {\n        if (ord == limit) {\n          //if (DEBUG) System.out.println(\"      return doc=\" + NO_MORE_DOCS);\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n        // if (DEBUG) System.out.println(\"      code=\" + code);\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc seg=\" + segment + \" fp=\" + freqIn.getFilePointer());\n      while(true) {\n        if (ord == limit) {\n          //if (DEBUG) System.out.println(\"      return doc=\" + NO_MORE_DOCS);\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n        // if (DEBUG) System.out.println(\"      code=\" + code);\n        if (omitTF) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          break;\n        }\n      }\n\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc return doc=\" + doc);\n      return (doc = accum);\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc seg=\" + segment + \" fp=\" + freqIn.getFilePointer());\n      while(true) {\n        if (ord == limit) {\n          //if (DEBUG) System.out.println(\"      return doc=\" + NO_MORE_DOCS);\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n        // if (DEBUG) System.out.println(\"      code=\" + code);\n        if (omitTF) {\n          doc += code;\n        } else {\n          doc += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while (++start < count) {\n        int d = docs[start];\n        if (liveDocs == null || liveDocs.get(d)) {\n          freq = freqs[start];\n          return doc = d;\n        }\n      }\n      return doc = refill();\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc seg=\" + segment + \" fp=\" + freqIn.getFilePointer());\n      while(true) {\n        if (ord == limit) {\n          //if (DEBUG) System.out.println(\"      return doc=\" + NO_MORE_DOCS);\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n        // if (DEBUG) System.out.println(\"      code=\" + code);\n        if (omitTF) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = freqIn.readVInt();     // else read freq\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          break;\n        }\n      }\n\n      //if (DEBUG) System.out.println(\"    stpr.nextDoc return doc=\" + doc);\n      return (doc = accum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while (++start < count) {\n        int d = docs[start];\n        if (liveDocs == null || liveDocs.get(d)) {\n          freq = freqs[start];\n          return doc = d;\n        }\n      }\n      return doc = refill();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}