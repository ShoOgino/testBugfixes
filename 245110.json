{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double).mjava","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908e262be655c65579ec6d94f228d47b663da975","date":1576571938,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73ab989727307be90eb75c2ce4ef41d383974f3","date":1580322291,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b73ab989727307be90eb75c2ce4ef41d383974f3":["908e262be655c65579ec6d94f228d47b663da975"],"908e262be655c65579ec6d94f228d47b663da975":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","908e262be655c65579ec6d94f228d47b663da975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["908e262be655c65579ec6d94f228d47b663da975","b945b8f5bba0303382bc69d60c0c287714f23328","b0b597c65628ca9e73913a07e81691f8229bae35"],"b73ab989727307be90eb75c2ce4ef41d383974f3":["c568a1e2a5125c2245150eebb030a81baa158b31"],"908e262be655c65579ec6d94f228d47b663da975":["b73ab989727307be90eb75c2ce4ef41d383974f3","b945b8f5bba0303382bc69d60c0c287714f23328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}