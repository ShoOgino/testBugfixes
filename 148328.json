{"path":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","sourceNew":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    Iterator<Term> iterator = pb.iterator();\n    assertTrue(iterator.hasNext());\n    assertEquals(term, iterator.next());\n  }\n\n","sourceOld":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    Iterator<Term> iterator = pb.iterator();\n    assertTrue(iterator.hasNext());\n    assertEquals(term, iterator.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","sourceNew":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    TermIterator iter = pb.iterator();\n    assertTrue(iter.next());\n    assertEquals(\"foo\", iter.field);\n    assertEquals(\"bogus\", iter.bytes.utf8ToString());\n    assertTrue(iter.next());\n    assertNull(iter.field);\n  }\n\n","sourceOld":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    Iterator<Term> iterator = pb.iterator();\n    assertTrue(iterator.hasNext());\n    assertEquals(term, iterator.next());\n  }\n\n","bugFix":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258f227b48a4dbfc180f6ec70f172469d6a2bef8","date":1428687213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testOne().mjava","sourceNew":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    TermIterator iter = pb.iterator();\n    assertNotNull(iter.next());\n    assertEquals(\"foo\", iter.field());\n    assertEquals(\"bogus\", iter.bytes.utf8ToString());\n    assertNull(iter.next());\n  }\n\n","sourceOld":"  public void testOne() {\n    Term term = new Term(\"foo\", \"bogus\");\n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    b.add(term);\n    PrefixCodedTerms pb = b.finish();\n    TermIterator iter = pb.iterator();\n    assertTrue(iter.next());\n    assertEquals(\"foo\", iter.field);\n    assertEquals(\"bogus\", iter.bytes.utf8ToString());\n    assertTrue(iter.next());\n    assertNull(iter.field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"]},"commit2Childs":{"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}