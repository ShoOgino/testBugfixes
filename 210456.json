{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (in.isDeleted(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (in.isDeleted(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (in.isDeleted(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":["422a649a45aaa37e53615faeca74d891f876a139"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f367dfb9086b92a13c77e2d31112c715cd4502c","date":1290190924,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) throws IOException {\n      super(SlowMultiReaderWrapper.wrap(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) throws IOException {\n      super(SlowMultiReaderWrapper.wrap(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(in);\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (in.isDeleted(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      dels = new OpenBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        oldDels = new OpenBitSet(in.maxDoc());\n        final Bits oldDelBits = MultiFields.getDeletedDocs(in);\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) oldDels.set(i);\n        }\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      undeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      undeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      undeleteAll(); // initialize main bitset\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      doUndeleteAll(); // initialize main bitset\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a118fcb91dbf1aea61227687b4241d7b136558d","date":1323554852,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader), false /* dont close */);\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      undeleteAll(); // initialize main bitset\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader), false /* dont close */);\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader in) {\n      super(new SlowMultiReaderWrapper(in));\n      undeleteAll(); // initialize main bitset\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16b247172554109d0914d72ba5a881d46bd5b9a0","date":1330214539,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader));\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader), false /* dont close */);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader));\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader), false /* dont close */);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#FakeDeleteIndexReader(IndexReader).mjava","sourceNew":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader));\n    }\n\n","sourceOld":"    public FakeDeleteIndexReader(IndexReader reader) throws IOException {\n      super(initSubReaders(reader));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"16b247172554109d0914d72ba5a881d46bd5b9a0":["7a118fcb91dbf1aea61227687b4241d7b136558d"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7a118fcb91dbf1aea61227687b4241d7b136558d","16b247172554109d0914d72ba5a881d46bd5b9a0"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7f367dfb9086b92a13c77e2d31112c715cd4502c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7a118fcb91dbf1aea61227687b4241d7b136558d"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["51c34a3639838887e7997850b6be80f838a4d6f7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","51c34a3639838887e7997850b6be80f838a4d6f7"],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["51c34a3639838887e7997850b6be80f838a4d6f7","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["51c34a3639838887e7997850b6be80f838a4d6f7","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["16b247172554109d0914d72ba5a881d46bd5b9a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["406e7055a3e99d3fa6ce49a555a51dd18b321806","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"16b247172554109d0914d72ba5a881d46bd5b9a0":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["16b247172554109d0914d72ba5a881d46bd5b9a0","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"51c34a3639838887e7997850b6be80f838a4d6f7":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7f367dfb9086b92a13c77e2d31112c715cd4502c":["51c34a3639838887e7997850b6be80f838a4d6f7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7a118fcb91dbf1aea61227687b4241d7b136558d"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["7f367dfb9086b92a13c77e2d31112c715cd4502c","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}