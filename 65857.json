{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    final int blockShift = TestUtil.nextInt(random(), DirectMonotonicWriter.MIN_BLOCK_SHIFT, DirectMonotonicWriter.MAX_BLOCK_SHIFT);\n    final int numValues = TestUtil.nextInt(random(), 1, 1 << 20);\n    List<Long> actualValues = new ArrayList<>();\n    long previous = random().nextLong();\n    actualValues.add(previous);\n    for (int i = 1; i < numValues; ++i) {\n      previous += random().nextInt(1 << random().nextInt(20));\n      actualValues.add(previous);\n    }\n\n    final long dataLength;\n    try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n        IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n      DirectMonotonicWriter w = DirectMonotonicWriter.getInstance(metaOut, dataOut, numValues, blockShift);\n      for (long v : actualValues) {\n        w.add(v);\n      }\n      w.finish();\n      dataLength = dataOut.getFilePointer();\n    }\n\n    try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n        IndexInput dataIn = dir.openInput(\"data\", IOContext.DEFAULT)) {\n      DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, numValues, blockShift);\n      LongValues values = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0, dataLength));\n      for (int i = 0; i < numValues; ++i) {\n        assertEquals(actualValues.get(i).longValue(), values.get(i));\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1760beb4787f185cd296f5a1c28ba4bcea7025cc","date":1448305531,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    final int iters = atLeast(3);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      final int blockShift = TestUtil.nextInt(random(), DirectMonotonicWriter.MIN_BLOCK_SHIFT, DirectMonotonicWriter.MAX_BLOCK_SHIFT);\n      final int maxNumValues = 1 << 20;\n      final int numValues;\n      if (random().nextBoolean()) {\n        // random number\n        numValues = TestUtil.nextInt(random(), 1, maxNumValues);\n      } else {\n        // multiple of the block size\n        final int numBlocks = TestUtil.nextInt(random(), 0, maxNumValues >>> blockShift);\n        numValues = TestUtil.nextInt(random(), 0, numBlocks) << blockShift;\n      }\n      List<Long> actualValues = new ArrayList<>();\n      long previous = random().nextLong();\n      if (numValues > 0) {\n        actualValues.add(previous);\n      }\n      for (int i = 1; i < numValues; ++i) {\n        previous += random().nextInt(1 << random().nextInt(20));\n        actualValues.add(previous);\n      }\n  \n      final long dataLength;\n      try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n          IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicWriter w = DirectMonotonicWriter.getInstance(metaOut, dataOut, numValues, blockShift);\n        for (long v : actualValues) {\n          w.add(v);\n        }\n        w.finish();\n        dataLength = dataOut.getFilePointer();\n      }\n  \n      try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n          IndexInput dataIn = dir.openInput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, numValues, blockShift);\n        LongValues values = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0, dataLength));\n        for (int i = 0; i < numValues; ++i) {\n          assertEquals(actualValues.get(i).longValue(), values.get(i));\n        }\n      }\n  \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    final int blockShift = TestUtil.nextInt(random(), DirectMonotonicWriter.MIN_BLOCK_SHIFT, DirectMonotonicWriter.MAX_BLOCK_SHIFT);\n    final int numValues = TestUtil.nextInt(random(), 1, 1 << 20);\n    List<Long> actualValues = new ArrayList<>();\n    long previous = random().nextLong();\n    actualValues.add(previous);\n    for (int i = 1; i < numValues; ++i) {\n      previous += random().nextInt(1 << random().nextInt(20));\n      actualValues.add(previous);\n    }\n\n    final long dataLength;\n    try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n        IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n      DirectMonotonicWriter w = DirectMonotonicWriter.getInstance(metaOut, dataOut, numValues, blockShift);\n      for (long v : actualValues) {\n        w.add(v);\n      }\n      w.finish();\n      dataLength = dataOut.getFilePointer();\n    }\n\n    try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n        IndexInput dataIn = dir.openInput(\"data\", IOContext.DEFAULT)) {\n      DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, numValues, blockShift);\n      LongValues values = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0, dataLength));\n      for (int i = 0; i < numValues; ++i) {\n        assertEquals(actualValues.get(i).longValue(), values.get(i));\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":["a870f9917149dc600c4ad4417d615c1795de5864"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectMonotonic#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Random random = random();\n    final int iters = atLeast(random, 3);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      final int blockShift = TestUtil.nextInt(random, DirectMonotonicWriter.MIN_BLOCK_SHIFT, DirectMonotonicWriter.MAX_BLOCK_SHIFT);\n      final int maxNumValues = 1 << 20;\n      final int numValues;\n      if (random.nextBoolean()) {\n        // random number\n        numValues = TestUtil.nextInt(random, 1, maxNumValues);\n      } else {\n        // multiple of the block size\n        final int numBlocks = TestUtil.nextInt(random, 0, maxNumValues >>> blockShift);\n        numValues = TestUtil.nextInt(random, 0, numBlocks) << blockShift;\n      }\n      List<Long> actualValues = new ArrayList<>();\n      long previous = random.nextLong();\n      if (numValues > 0) {\n        actualValues.add(previous);\n      }\n      for (int i = 1; i < numValues; ++i) {\n        previous += random.nextInt(1 << random.nextInt(20));\n        actualValues.add(previous);\n      }\n  \n      final long dataLength;\n      try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n          IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicWriter w = DirectMonotonicWriter.getInstance(metaOut, dataOut, numValues, blockShift);\n        for (long v : actualValues) {\n          w.add(v);\n        }\n        w.finish();\n        dataLength = dataOut.getFilePointer();\n      }\n  \n      try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n          IndexInput dataIn = dir.openInput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, numValues, blockShift);\n        LongValues values = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0, dataLength));\n        for (int i = 0; i < numValues; ++i) {\n          assertEquals(actualValues.get(i).longValue(), values.get(i));\n        }\n      }\n  \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    final int iters = atLeast(3);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      final int blockShift = TestUtil.nextInt(random(), DirectMonotonicWriter.MIN_BLOCK_SHIFT, DirectMonotonicWriter.MAX_BLOCK_SHIFT);\n      final int maxNumValues = 1 << 20;\n      final int numValues;\n      if (random().nextBoolean()) {\n        // random number\n        numValues = TestUtil.nextInt(random(), 1, maxNumValues);\n      } else {\n        // multiple of the block size\n        final int numBlocks = TestUtil.nextInt(random(), 0, maxNumValues >>> blockShift);\n        numValues = TestUtil.nextInt(random(), 0, numBlocks) << blockShift;\n      }\n      List<Long> actualValues = new ArrayList<>();\n      long previous = random().nextLong();\n      if (numValues > 0) {\n        actualValues.add(previous);\n      }\n      for (int i = 1; i < numValues; ++i) {\n        previous += random().nextInt(1 << random().nextInt(20));\n        actualValues.add(previous);\n      }\n  \n      final long dataLength;\n      try (IndexOutput metaOut = dir.createOutput(\"meta\", IOContext.DEFAULT);\n          IndexOutput dataOut = dir.createOutput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicWriter w = DirectMonotonicWriter.getInstance(metaOut, dataOut, numValues, blockShift);\n        for (long v : actualValues) {\n          w.add(v);\n        }\n        w.finish();\n        dataLength = dataOut.getFilePointer();\n      }\n  \n      try (IndexInput metaIn = dir.openInput(\"meta\", IOContext.READONCE);\n          IndexInput dataIn = dir.openInput(\"data\", IOContext.DEFAULT)) {\n        DirectMonotonicReader.Meta meta = DirectMonotonicReader.loadMeta(metaIn, numValues, blockShift);\n        LongValues values = DirectMonotonicReader.getInstance(meta, dataIn.randomAccessSlice(0, dataLength));\n        for (int i = 0; i < numValues; ++i) {\n          assertEquals(actualValues.get(i).longValue(), values.get(i));\n        }\n      }\n  \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1760beb4787f185cd296f5a1c28ba4bcea7025cc":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"1760beb4787f185cd296f5a1c28ba4bcea7025cc":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a870f9917149dc600c4ad4417d615c1795de5864":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}