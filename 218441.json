{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"/dev/null","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, docDeltaBuffer);\n\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          docDeltaBuffer[i] = code >>> 1;\n          if ((code & 1) != 0) {\n            freqBuffer[i] = 1;\n          } else {\n            freqBuffer[i] = docIn.readVInt();\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aed6489ab771989e9105eff4656265bdfb15d89f","date":1342808296,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          docDeltaBuffer[i] = code >>> 1;\n          if ((code & 1) != 0) {\n            freqBuffer[i] = 1;\n          } else {\n            freqBuffer[i] = docIn.readVInt();\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, docDeltaBuffer);\n\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          docDeltaBuffer[i] = code >>> 1;\n          if ((code & 1) != 0) {\n            freqBuffer[i] = 1;\n          } else {\n            freqBuffer[i] = docIn.readVInt();\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          docDeltaBuffer[i] = code >>> 1;\n          if ((code & 1) != 0) {\n            freqBuffer[i] = 1;\n          } else {\n            freqBuffer[i] = docIn.readVInt();\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74bd7635df51d421ac314f25514733c8f4c69981","date":1344466925,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, freqBuffer);\n      } else {\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        // if (DEBUG) {\n        //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        if (DEBUG) {\n          System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"/dev/null","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        // if (DEBUG) {\n        //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"/dev/null","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        // if (DEBUG) {\n        //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        // if (DEBUG) {\n        //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        // if (DEBUG) {\n        //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, freqBuffer);\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt doc block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, true);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"74bd7635df51d421ac314f25514733c8f4c69981":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["8081d5018e8846bf4080f2809432c759996e749f"],"aed6489ab771989e9105eff4656265bdfb15d89f":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["aed6489ab771989e9105eff4656265bdfb15d89f"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["74bd7635df51d421ac314f25514733c8f4c69981"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"74bd7635df51d421ac314f25514733c8f4c69981":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["74bd7635df51d421ac314f25514733c8f4c69981"],"aed6489ab771989e9105eff4656265bdfb15d89f":["8081d5018e8846bf4080f2809432c759996e749f"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["aed6489ab771989e9105eff4656265bdfb15d89f"],"8081d5018e8846bf4080f2809432c759996e749f":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}