{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long ord = docValues.getOrd(segDoc);\n            if (ord != -1) {\n              long val = toGlobal.get(ord);\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n          Bits docsWithField = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n            docsWithField = DocValues.getDocsWithField(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            long val = values.get(segDoc);\n            if (val != 0 || docsWithField.get(segDoc)) {\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = globalDocValues::lookupOrd;\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":["3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0138536655ed6adafa2e07c09cd3c9572112922f","date":1497930179,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              for (int i = 0; i < values.docValueCount(); i++) {\n                collectValFirstPhase(segDoc, values.nextValue());\n              }\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":["677081274af275e5542f60ea1611826c49f04213"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              for (int i = 0; i < values.docValueCount(); i++) {\n                collectValFirstPhase(segDoc, values.nextValue());\n              }\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              for (int i = 0; i < values.docValueCount(); i++) {\n                collectValFirstPhase(segDoc, values.nextValue());\n              }\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      // TODO support SortedNumericDocValues\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"677081274af275e5542f60ea1611826c49f04213","date":1505842785,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              for (int i = 0; i < values.docValueCount(); i++) {\n                collectValFirstPhase(segDoc, values.nextValue());\n              }\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":["0138536655ed6adafa2e07c09cd3c9572112922f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              for (int i = 0; i < values.docValueCount(); i++) {\n                collectValFirstPhase(segDoc, values.nextValue());\n              }\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public boolean needsScores() { return false; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > values.docID()) {\n              values.advance(segDoc);\n            }\n            if (segDoc == values.docID()) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c4d6b8597fb14c3cd5890594baba39dd1fb29a","date":1541705657,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (docValues.advanceExact(segDoc)) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (segDoc > docValues.docID()) {\n              docValues.advance(segDoc);\n            }\n            if (segDoc == docValues.docID()) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95904004e26fe5b84dcda2fa112ebf7cc9721a60","date":1560149781,"type":3,"author":"Tim Underwood","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#collectDocs().mjava","sourceNew":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (docValues.advanceExact(segDoc)) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1, count = values.docValueCount(); i < count; i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  private void collectDocs() throws IOException {\n    if (calc instanceof TermOrdCalc) { // Strings\n\n      // TODO support SortedSetDocValues\n      SortedDocValues globalDocValues = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      ((TermOrdCalc)calc).lookupOrdFunction = ord -> {\n        try {\n          return globalDocValues.lookupOrd(ord);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedDocValues docValues = globalDocValues; // this segment/leaf. NN\n          LongValues toGlobal = LongValues.IDENTITY; // this segment to global ordinal. NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            if (globalDocValues instanceof MultiDocValues.MultiSortedDocValues) {\n              MultiDocValues.MultiSortedDocValues multiDocValues = (MultiDocValues.MultiSortedDocValues) globalDocValues;\n              docValues = multiDocValues.values[ctx.ord];\n              toGlobal = multiDocValues.mapping.getGlobalOrds(ctx.ord);\n            }\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (docValues.advanceExact(segDoc)) {\n              long val = toGlobal.get(docValues.ordValue());\n              collectValFirstPhase(segDoc, val);\n            }\n          }\n        });\n\n    } else { // Numeric:\n\n      if (sf.multiValued()) {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          SortedNumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getSortedNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              long l = values.nextValue(); // This document must have at least one value\n              collectValFirstPhase(segDoc, l);\n              for (int i = 1; i < values.docValueCount(); i++) {\n                long lnew = values.nextValue();\n                if (lnew != l) { // Skip the value if it's equal to the last one, we don't want to double-count it\n                  collectValFirstPhase(segDoc, lnew);\n                }\n                l = lnew;\n              }\n\n            }\n          }\n        });\n      } else {\n        DocSetUtil.collectSortedDocSet(fcontext.base, fcontext.searcher.getIndexReader(), new SimpleCollector() {\n          NumericDocValues values = null; //NN\n\n          @Override public ScoreMode scoreMode() { return ScoreMode.COMPLETE_NO_SCORES; }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext ctx) throws IOException {\n            setNextReaderFirstPhase(ctx);\n            values = DocValues.getNumeric(ctx.reader(), sf.getName());\n          }\n\n          @Override\n          public void collect(int segDoc) throws IOException {\n            if (values.advanceExact(segDoc)) {\n              collectValFirstPhase(segDoc, values.longValue());\n            }\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["417142ff08fda9cf0b72d5133e63097a166c6458"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["e1c4d6b8597fb14c3cd5890594baba39dd1fb29a"],"0138536655ed6adafa2e07c09cd3c9572112922f":["f7558b5077dd4abd457be151475f13b541f4f13e"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["417142ff08fda9cf0b72d5133e63097a166c6458","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"28288370235ed02234a64753cdbf0c6ec096304a":["f7558b5077dd4abd457be151475f13b541f4f13e","0138536655ed6adafa2e07c09cd3c9572112922f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"677081274af275e5542f60ea1611826c49f04213":["28288370235ed02234a64753cdbf0c6ec096304a"],"417142ff08fda9cf0b72d5133e63097a166c6458":["677081274af275e5542f60ea1611826c49f04213","9fc47cb7b4346802411bb432f501ed0673d7119e"],"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","677081274af275e5542f60ea1611826c49f04213"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["602cca3f75af03832471d8324bbc5b977a02969c"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["677081274af275e5542f60ea1611826c49f04213"],"e1c4d6b8597fb14c3cd5890594baba39dd1fb29a":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["f7558b5077dd4abd457be151475f13b541f4f13e","0138536655ed6adafa2e07c09cd3c9572112922f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["0138536655ed6adafa2e07c09cd3c9572112922f","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"95904004e26fe5b84dcda2fa112ebf7cc9721a60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0138536655ed6adafa2e07c09cd3c9572112922f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["e1c4d6b8597fb14c3cd5890594baba39dd1fb29a"],"28288370235ed02234a64753cdbf0c6ec096304a":["677081274af275e5542f60ea1611826c49f04213"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"677081274af275e5542f60ea1611826c49f04213":["417142ff08fda9cf0b72d5133e63097a166c6458","04af4a840c8f501ba34e09e382b8f8ace82aa51e","9fc47cb7b4346802411bb432f501ed0673d7119e"],"602cca3f75af03832471d8324bbc5b977a02969c":["bc8f206328a706450934717bec7ccc22ad166fc0","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"e1c4d6b8597fb14c3cd5890594baba39dd1fb29a":["95904004e26fe5b84dcda2fa112ebf7cc9721a60"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}