{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionWithPolicyAndMaxShardsPerNode().mjava","commits":[{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionWithPolicyAndMaxShardsPerNode().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionWithPolicyAndMaxShardsPerNode() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    Map original = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    Map data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    List clusterPolicy = (List) data.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    CollectionAdminRequest.createCollection(\"myColl\", \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"Did create unexpected new policy  \" + Utils.toJSONString(data),\n       null,  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl\"));\n    CollectionAdminRequest.createCollection(\"myColl2\", \"conf\", 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    assertEquals(\"Did not create expected new policy  \" + Utils.toJSONString(data),\n        \"<5\",  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl2[0]/replica\"));\n\n    CollectionAdminRequest.deleteCollection(\"myColl2\").process(cluster.getSolrClient());\n\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"Did not delete new policy  \" + Utils.toJSONString(data),\n        null,  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl2\"));\n\n    solrClient.getZkStateReader().getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(original), true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dbef1afa8336d38a4301a545999d1e21f8fa","date":1502941879,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionWithPolicyAndMaxShardsPerNode().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionWithPolicyAndMaxShardsPerNode() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    Map original = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    Map data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    List clusterPolicy = (List) data.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    CollectionAdminRequest.createCollection(\"myColl\", \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"Did create unexpected new policy  \" + Utils.toJSONString(data),\n       null,  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl\"));\n    CollectionAdminRequest.createCollection(\"myColl2\", \"conf\", 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    assertEquals(\"Did not create expected new policy  \" + Utils.toJSONString(data),\n        \"<5\",  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl2[0]/replica\"));\n\n    CollectionAdminRequest.deleteCollection(\"myColl2\").process(cluster.getSolrClient());\n\n    data = Utils.getJson(solrClient.getZkStateReader().getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"Did not delete new policy  \" + Utils.toJSONString(data),\n        null,  Utils.getObjectByPath(data, false, \"policies/COLL_POLICY_myColl2\"));\n\n    solrClient.getZkStateReader().getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(original), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4328dbef1afa8336d38a4301a545999d1e21f8fa":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0806aac02ecbbdc6b5d9705ae15da193219c7af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4328dbef1afa8336d38a4301a545999d1e21f8fa":[],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["4328dbef1afa8336d38a4301a545999d1e21f8fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4328dbef1afa8336d38a4301a545999d1e21f8fa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}