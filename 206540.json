{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    // nocommit ok?  SI is immutable!?\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f","date":1337803847,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    // nocommit ok?  SI is immutable!?\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"479fba77febd29e498fc4a430359e4cf88341da7","date":1357213856,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    return new SegmentInfoPerCommit(info, delCount, delGen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, docValuesGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteDocValuesGen = nextWriteDocValuesGen;\n    \n    other.updatesFiles.addAll(updatesFiles);\n    \n    other.fieldDocValuesGens.putAll(fieldDocValuesGens);\n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;\n    \n    other.updatesFiles.addAll(updatesFiles);\n    \n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, docValuesGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteDocValuesGen = nextWriteDocValuesGen;\n    \n    other.updatesFiles.addAll(updatesFiles);\n    \n    other.fieldDocValuesGens.putAll(fieldDocValuesGens);\n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f13fb377f9b5df46af44bf90a2e507a884f2c30","date":1380476222,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;\n    \n    // deep clone\n    for (Entry<Long,Set<String>> e : genUpdatesFiles.entrySet()) {\n      other.genUpdatesFiles.put(e.getKey(), new HashSet<String>(e.getValue()));\n    }\n    \n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;\n    \n    other.updatesFiles.addAll(updatesFiles);\n    \n    return other;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCommitInfo#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#clone().mjava","sourceNew":"  @Override\n  public SegmentCommitInfo clone() {\n    SegmentCommitInfo other = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;\n    \n    // deep clone\n    for (Entry<Long,Set<String>> e : genUpdatesFiles.entrySet()) {\n      other.genUpdatesFiles.put(e.getKey(), new HashSet<String>(e.getValue()));\n    }\n    \n    return other;\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfoPerCommit clone() {\n    SegmentInfoPerCommit other = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n    // Not clear that we need to carry over nextWriteDelGen\n    // (i.e. do we ever clone after a failed write and\n    // before the next successful write?), but just do it to\n    // be safe:\n    other.nextWriteDelGen = nextWriteDelGen;\n    other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;\n    \n    // deep clone\n    for (Entry<Long,Set<String>> e : genUpdatesFiles.entrySet()) {\n      other.genUpdatesFiles.put(e.getKey(), new HashSet<String>(e.getValue()));\n    }\n    \n    return other;\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["479fba77febd29e498fc4a430359e4cf88341da7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","479fba77febd29e498fc4a430359e4cf88341da7"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3c0b74d0a1220dbfbdb366a60df468dbb2c285f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8435160e9702b19398118ddf76b61c846612b6a4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"479fba77febd29e498fc4a430359e4cf88341da7":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["8435160e9702b19398118ddf76b61c846612b6a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8435160e9702b19398118ddf76b61c846612b6a4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3c0b74d0a1220dbfbdb366a60df468dbb2c285f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","479fba77febd29e498fc4a430359e4cf88341da7"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["b3c0b74d0a1220dbfbdb366a60df468dbb2c285f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"8435160e9702b19398118ddf76b61c846612b6a4":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"479fba77febd29e498fc4a430359e4cf88341da7":["e072d0b1fc19e0533d8ce432eed245196bca6fde","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}