{"path":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7896cf1e46aab37432760018befa9a411c0e2500","date":1283176044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListWriter#bufferSkip(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes the current skip data to the buffers. The current document frequency determines\n   * the max level is skip data is to be written to. \n   * \n   * @param df the current document frequency \n   * @throws IOException\n   */\n  void bufferSkip(int df) throws IOException {\n    int numLevels;\n   \n    // determine max level\n    for (numLevels = 0; (df % skipInterval) == 0 && numLevels < numberOfSkipLevels; df /= skipInterval) {\n      numLevels++;\n    }\n    \n    long childPointer = 0;\n    \n    for (int level = 0; level < numLevels; level++) {\n      writeSkipData(level, skipBuffer[level]);\n      \n      long newChildPointer = skipBuffer[level].getFilePointer();\n      \n      if (level != 0) {\n        // store child pointers for all levels except the lowest\n        skipBuffer[level].writeVLong(childPointer);\n      }\n      \n      //remember the childPointer for the next level\n      childPointer = newChildPointer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7896cf1e46aab37432760018befa9a411c0e2500"],"7896cf1e46aab37432760018befa9a411c0e2500":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7896cf1e46aab37432760018befa9a411c0e2500"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7896cf1e46aab37432760018befa9a411c0e2500":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7896cf1e46aab37432760018befa9a411c0e2500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}