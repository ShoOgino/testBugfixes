{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n    boolean useCompoundFile = getUseCompoundFile();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd), useCompoundFile));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1), useCompoundFile));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.asList().subList(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(Collections.singletonList(infos.info(expungeCandidate))));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.asList().subList(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(Collections.singletonList(infos.info(expungeCandidate))));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.asList().subList(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(Collections.singletonList(infos.info(expungeCandidate))));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.range(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(infos.range(expungeCandidate, expungeCandidate + 1)));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findBalancedMerges(SegmentInfos,int,int,boolean).mjava","sourceNew":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.asList().subList(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(Collections.singletonList(infos.info(expungeCandidate))));\n    }\n    \n    return spec;\n  }\n\n","sourceOld":"  private MergeSpecification findBalancedMerges(SegmentInfos infos, int infoLen, int maxNumSegments, boolean partialExpunge)\n    throws IOException {\n    if (infoLen <= maxNumSegments) return null;\n    \n    MergeSpecification spec = new MergeSpecification();\n\n    // use Viterbi algorithm to find the best segmentation.\n    // we will try to minimize the size variance of resulting segments.\n    \n    double[][] variance = createVarianceTable(infos, infoLen, maxNumSegments);\n    \n    final int maxMergeSegments = infoLen - maxNumSegments + 1;\n    double[] sumVariance = new double[maxMergeSegments];\n    int[][] backLink = new int[maxNumSegments][maxMergeSegments];\n    \n    for(int i = (maxMergeSegments - 1); i >= 0; i--) {\n      sumVariance[i] = variance[0][i];\n      backLink[0][i] = 0;\n    }\n    for(int i = 1; i < maxNumSegments; i++) {\n      for(int j = (maxMergeSegments - 1); j >= 0; j--) {\n        double minV = Double.MAX_VALUE;\n        int minK = 0;\n        for(int k = j; k >= 0; k--) {\n          double v = sumVariance[k] + variance[i + k][j - k];\n          if(v < minV) {\n            minV = v;\n            minK = k;\n          }\n        }\n        sumVariance[j] = minV;\n        backLink[i][j] = minK;\n      }\n    }\n    \n    // now, trace back the back links to find all merges,\n    // also find a candidate for partial expunge if requested\n    int mergeEnd = infoLen;\n    int prev = maxMergeSegments - 1;\n    int expungeCandidate = -1;\n    int maxDelCount = 0;\n    for(int i = maxNumSegments - 1; i >= 0; i--) {\n      prev = backLink[i][prev];\n      int mergeStart = i + prev;\n      if((mergeEnd - mergeStart) > 1) {\n        spec.add(new OneMerge(infos.asList().subList(mergeStart, mergeEnd)));\n      } else {\n        if(partialExpunge) {\n          SegmentInfo info = infos.info(mergeStart);\n          int delCount = info.getDelCount();\n          if(delCount > maxDelCount) {\n            expungeCandidate = mergeStart;\n            maxDelCount = delCount;\n          }\n        }\n      }\n      mergeEnd = mergeStart;\n    }\n    \n    if(partialExpunge && maxDelCount > 0) {\n      // expunge deletes\n      spec.add(new OneMerge(Collections.singletonList(infos.info(expungeCandidate))));\n    }\n    \n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","38a62612cfa4e104080d89d7751a8f1a258ac335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38a62612cfa4e104080d89d7751a8f1a258ac335","4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}