{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp () throws Exception {\n    super.setUp();\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    indexDir = new File(tempDir, \"RAMDirIndex\");\n    \n    Directory dir = FSDirectory.open(indexDir);\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(new Field(\"content\", English.intToEnglish(i).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp () throws Exception {\n    super.setUp();\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    indexDir = new File(tempDir, \"RAMDirIndex\");\n    \n    Directory dir = FSDirectory.open(indexDir);\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(new Field(\"content\", English.intToEnglish(i).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fc7a3f8b8f998d16508a727a16ef12e569ffeec","date":1269627219,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp () throws Exception {\n    super.setUp();\n    String tempDir = System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\"));\n    if (tempDir == null)\n      throw new IOException(\"System property tempDir undefined, cannot run test\");\n    indexDir = new File(tempDir, \"RAMDirIndex\");\n    \n    Directory dir = FSDirectory.open(indexDir);\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(new Field(\"content\", English.intToEnglish(i).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp () throws Exception {\n    super.setUp();\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    indexDir = new File(tempDir, \"RAMDirIndex\");\n    \n    Directory dir = FSDirectory.open(indexDir);\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(new Field(\"content\", English.intToEnglish(i).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":null,"sourceOld":"  // setup the index\n  @Override\n  public void setUp () throws Exception {\n    super.setUp();\n    String tempDir = System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\"));\n    if (tempDir == null)\n      throw new IOException(\"System property tempDir undefined, cannot run test\");\n    indexDir = new File(tempDir, \"RAMDirIndex\");\n    \n    Directory dir = FSDirectory.open(indexDir);\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(new Field(\"content\", English.intToEnglish(i).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fc7a3f8b8f998d16508a727a16ef12e569ffeec":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["4fc7a3f8b8f998d16508a727a16ef12e569ffeec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4fc7a3f8b8f998d16508a727a16ef12e569ffeec":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4fc7a3f8b8f998d16508a727a16ef12e569ffeec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}