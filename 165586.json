{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    assertTrue(fields.size() == 1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0be47c1e9683f179d813acfa62b299a35b677e2f","date":1375187656,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","sourceNew":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    assertTrue(fields.size() == 1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","sourceNew":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testJustEmptyField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testEmptyField().mjava","sourceNew":"  public void testJustEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyField() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(newStringField(\"\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    int fieldCount = fields.size();\n    // -1 is allowed, if the codec doesn't implement fields.size():\n    assertTrue(fieldCount == 1 || fieldCount == -1);\n    Terms terms = ar.terms(\"\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator(null);\n    assertNotNull(termsEnum.next());\n    assertEquals(termsEnum.term(), new BytesRef(\"something\"));\n    assertNull(termsEnum.next());\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0be47c1e9683f179d813acfa62b299a35b677e2f"],"0be47c1e9683f179d813acfa62b299a35b677e2f":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a45bec74b98f6fc05f52770cfb425739e6563960":["0be47c1e9683f179d813acfa62b299a35b677e2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"0be47c1e9683f179d813acfa62b299a35b677e2f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}