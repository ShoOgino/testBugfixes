{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getAliases(boolean).mjava","sourceNew":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n\n          this.aliases = new CollectionAdminRequest.ListAliases().process(client).getAliasesAsLists();\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work\"\n                + \" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\", e);\n            this.aliases = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n\n          Map<String, List<String>> aliases = new CollectionAdminRequest.ListAliases().process(client).getAliasesAsLists();\n          this.aliases = aliases;\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work\"\n                + \" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\", e);\n            this.aliases = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from \" +\n              Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","sourceNew":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n\n          CollectionAdminResponse response = new CollectionAdminRequest.ListAliases().process(client);\n          this.aliases = response.getAliasesAsLists();\n          this.aliasProperties = response.getAliasProperties(); // side-effect\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work\"\n                + \" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\", e);\n            this.aliases = Collections.emptyMap();\n            this.aliasProperties = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n\n          this.aliases = new CollectionAdminRequest.ListAliases().process(client).getAliasesAsLists();\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work\"\n                + \" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\", e);\n            this.aliases = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getAliases(boolean).mjava","sourceNew":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n\n          CollectionAdminResponse response = new CollectionAdminRequest.ListAliases().process(client);\n          this.aliases = response.getAliasesAsLists();\n          this.aliasProperties = response.getAliasProperties(); // side-effect\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work {}\"\n                ,\"unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\"\n                , e);\n            this.aliases = Collections.emptyMap();\n            this.aliasProperties = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getAliases(boolean forceFetch) {\n    if (this.liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest aliases information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n\n    if (forceFetch || this.aliases == null ||\n        TimeUnit.SECONDS.convert((System.nanoTime() - aliasesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n\n          CollectionAdminResponse response = new CollectionAdminRequest.ListAliases().process(client);\n          this.aliases = response.getAliasesAsLists();\n          this.aliasProperties = response.getAliasProperties(); // side-effect\n          this.aliasesTimestamp = System.nanoTime();\n          return Collections.unmodifiableMap(this.aliases);\n        } catch (SolrServerException | RemoteSolrException | IOException e) {\n          // Situation where we're hitting an older Solr which doesn't have LISTALIASES\n          if (e instanceof RemoteSolrException && ((RemoteSolrException)e).code()==400) {\n            log.warn(\"LISTALIASES not found, possibly using older Solr server. Aliases won't work\"\n                + \" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server\", e);\n            this.aliases = Collections.emptyMap();\n            this.aliasProperties = Collections.emptyMap();\n            this.aliasesTimestamp = System.nanoTime();\n            return aliases;\n          }\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n\n      throw new RuntimeException(\"Tried fetching aliases using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkHost.\");\n    } else {\n      return Collections.unmodifiableMap(this.aliases); // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813335f324f8bd40ae4d83d8391674b42b536cc0":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}