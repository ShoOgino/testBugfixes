{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesStream().mjava","commits":[{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n    cache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96c0517ff9245636a3c4971947e2abf0dfe38c8d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesStream().mjava","sourceNew":"  @Test\n  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    //Test using a different termFreq field then the default count(*)\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n    cache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    //Test using a different termFreq field then the default count(*)\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96c0517ff9245636a3c4971947e2abf0dfe38c8d":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96c0517ff9245636a3c4971947e2abf0dfe38c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96c0517ff9245636a3c4971947e2abf0dfe38c8d"]},"commit2Childs":{"96c0517ff9245636a3c4971947e2abf0dfe38c8d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["96c0517ff9245636a3c4971947e2abf0dfe38c8d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}