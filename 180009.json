{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   *\n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager#pickShards(String).mjava","sourceNew":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   *\n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pick one replica from each shard to send the shard requests to.\n   * \n   * @param collection that is being queried\n   * @throws IOException if an exception occurs while finding replicas\n   */\n  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c84df91ca6a2e8d6f26f185663112546a27f6b45","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c84df91ca6a2e8d6f26f185663112546a27f6b45","30c8e5574b55d57947e989443dfde611646530ee"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}