{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","commits":[{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = _TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = _TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = _TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = _TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<Term>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRandom().mjava","sourceNew":null,"sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      Document doc = new Document();\n      doc.add(newStringField(field, string, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    int numQueries = atLeast(10);\n    for (int i = 0; i < numQueries; i++) {\n      Collections.shuffle(terms, random());\n      int numTerms = 1 + random().nextInt(\n          Math.min(BooleanQuery.getMaxClauseCount(), terms.size()));\n      BooleanQuery bq = new BooleanQuery();\n      for (int j = 0; j < numTerms; j++) {\n        bq.add(new BooleanClause(new TermQuery(terms.get(j)), Occur.SHOULD));\n      }\n      TopDocs queryResult = searcher.search(new ConstantScoreQuery(bq), reader.maxDoc());\n      \n      MatchAllDocsQuery matchAll = new MatchAllDocsQuery();\n      final TermsFilter filter = termsFilter(singleField, terms.subList(0, numTerms));;\n      TopDocs filterResult = searcher.search(matchAll, filter, reader.maxDoc());\n      assertEquals(filterResult.totalHits, queryResult.totalHits);\n      ScoreDoc[] scoreDocs = filterResult.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) {\n        assertEquals(scoreDocs[j].doc, queryResult.scoreDocs[j].doc);\n      }\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}