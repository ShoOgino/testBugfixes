{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","commits":[{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n    \n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n    \n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51a2db0abe886e592b27151529b09efc818dac80","date":1559220196,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n    \n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n    \n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n    \n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n    \n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    Path zkDir = createTempDir();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    String zkDir = createTempDir().toString();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/SolrZkClientTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    Path zkDir = createTempDir();\n    log.info(\"ZooKeeper dataDir:{}\", zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(1)\n        .addConfig(\"_default\", new File(ExternalPaths.DEFAULT_CONFIGSET).toPath())\n        .configure();\n    solrClient = getCloudSolrClient(cluster.getZkServer().getZkAddress());\n\n    final String SCHEME = \"digest\";\n    final String AUTH = \"user:pass\";\n\n    Path zkDir = createTempDir();\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n\n    try (SolrZkClient client = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      // Set up chroot\n      client.makePath(\"/solr\", false, true);\n    }\n\n    defaultClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    defaultClient.makePath(PATH, true);\n\n    aclClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkACLProvider createZkACLProvider() {\n        return new DefaultZkACLProvider() {\n          @Override\n          protected List<ACL> createGlobalACLsToAdd() {\n            try {\n              Id id = new Id(SCHEME, DigestAuthenticationProvider.generateDigest(AUTH));\n              return Collections.singletonList(new ACL(ZooDefs.Perms.ALL, id));\n            } catch (NoSuchAlgorithmException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n    };\n\n    credentialsClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT) {\n      @Override\n      protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n        return new DefaultZkCredentialsProvider() {\n          @Override\n          protected Collection<ZkCredentials> createCredentials() {\n            return Collections.singleton(new ZkCredentials(SCHEME, AUTH.getBytes(StandardCharsets.UTF_8)));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"51a2db0abe886e592b27151529b09efc818dac80":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["67cf727e72c71906ffd390c61b50a1c60f2ebd49","51a2db0abe886e592b27151529b09efc818dac80"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["51a2db0abe886e592b27151529b09efc818dac80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51a2db0abe886e592b27151529b09efc818dac80":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["51a2db0abe886e592b27151529b09efc818dac80","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}