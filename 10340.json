{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","commits":[{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<CategoryPath,FacetsAggregator> perCategoryAggregator = new HashMap<CategoryPath,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<CategoryPath,FacetsAggregator> perCategoryAggregator = new HashMap<CategoryPath,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","sourceNew":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<FacetLabel,FacetsAggregator> perCategoryAggregator = new HashMap<FacetLabel,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<CategoryPath,FacetsAggregator> perCategoryAggregator = new HashMap<CategoryPath,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<FacetLabel,FacetsAggregator> perCategoryAggregator = new HashMap<FacetLabel,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#getAggregator().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the {@link FacetsAggregator} to use for aggregating the categories\n   * found in the result documents.\n   */\n  public FacetsAggregator getAggregator() {\n    Map<CategoryListParams,List<FacetRequest>> requestsPerCLP = groupRequests();\n\n    // optimize for all-CountFacetRequest and single category list (common case)\n    if (requestsPerCLP.size() == 1) {\n      boolean allCount = true;\n      for (FacetRequest fr : searchParams.facetRequests) {\n        if (!(fr instanceof CountFacetRequest)) {\n          allCount = false;\n          break;\n        }\n      }\n      if (allCount) {\n        return requestsPerCLP.values().iterator().next().get(0).createFacetsAggregator(searchParams.indexingParams);\n      }\n    }\n    \n    // If we're here it means the facet requests are spread across multiple\n    // category lists, or there are multiple types of facet requests, or both.\n    // Therefore create a per-CategoryList mapping of FacetsAggregators.\n    Map<CategoryListParams,FacetsAggregator> perCLPAggregator = new HashMap<CategoryListParams,FacetsAggregator>();\n    for (Entry<CategoryListParams,List<FacetRequest>> e : requestsPerCLP.entrySet()) {\n      CategoryListParams clp = e.getKey();\n      List<FacetRequest> requests = e.getValue();\n      Map<Class<? extends FacetsAggregator>,FacetsAggregator> aggClasses = new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n      Map<CategoryPath,FacetsAggregator> perCategoryAggregator = new HashMap<CategoryPath,FacetsAggregator>();\n      for (FacetRequest fr : requests) {\n        FacetsAggregator fa = fr.createFacetsAggregator(searchParams.indexingParams);\n        if (fa == null) {\n          throw new IllegalArgumentException(\"this accumulator only supports requests that create a FacetsAggregator: \" + fr);\n        }\n        Class<? extends FacetsAggregator> faClass = fa.getClass();\n        if (!aggClasses.containsKey(faClass)) {\n          aggClasses.put(faClass, fa);\n        } else {\n          fa = aggClasses.get(faClass);\n        }\n        perCategoryAggregator.put(fr.categoryPath, fa);\n      }\n      \n      if (aggClasses.size() == 1) { // only one type of facet request\n        perCLPAggregator.put(clp, aggClasses.values().iterator().next());\n      } else {\n        perCLPAggregator.put(clp, new MultiFacetsAggregator(perCategoryAggregator));\n      }\n    }\n\n    return new PerCategoryListAggregator(perCLPAggregator, searchParams.indexingParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","d33e19a97046248623a7591aeaa6547233fd15e2"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}