{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","sourceOld":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","sourceOld":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","sourceOld":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["0521546db127e358ced1772a9d696dbdd255b203","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0521546db127e358ced1772a9d696dbdd255b203":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}