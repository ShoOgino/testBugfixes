{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          @Override\n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          @Override\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          @Override\n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          @Override\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          @Override\n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          @Override\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {              \n          @Override\n          public boolean skipTo(int docId) throws IOException {\n            return it.skipTo(docId);\n          }\n          @Override\n          public long nextCategory() throws IOException {\n            long res = it.nextCategory();\n            if (res>Integer.MAX_VALUE) {\n              return res;\n            }\n            return res>1 ? res-1 : res+1;\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean setNextReader(AtomicReaderContext context) throws IOException {\n            return it.setNextReader(context);\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean setNextReader(AtomicReaderContext context) throws IOException {\n            return it.setNextReader(context);\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean init() throws IOException {\n            return it.init();\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":null,"sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean setNextReader(AtomicReaderContext context) throws IOException {\n            return it.setNextReader(context);\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#messCachedData(CategoryListCache,CategoryListParams).mjava","sourceNew":null,"sourceOld":"  /** Mess the cached data for this {@link CategoryListParams} */\n  private void messCachedData(CategoryListCache clCache, CategoryListParams clp) {\n    final CategoryListData cld = clCache.get(clp);\n    CategoryListData badCld = new CategoryListData() {\n      @Override\n      public CategoryListIterator iterator(int partition)  throws IOException {\n        final CategoryListIterator it = cld.iterator(partition);\n        return new CategoryListIterator() {\n          @Override\n          public void getOrdinals(int docID, IntsRef ints) throws IOException {\n            it.getOrdinals(docID, ints);\n            for (int i = 0; i < ints.length; i++) {\n              if (ints.ints[i] > 1) {\n                ints.ints[i]--;\n              } else {\n                ints.ints[i]++;\n              }\n            }\n          }\n          @Override\n          public boolean setNextReader(AtomicReaderContext context) throws IOException {\n            return it.setNextReader(context);\n          }\n        };\n      }\n    };\n    clCache.register(clp, badCld);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}