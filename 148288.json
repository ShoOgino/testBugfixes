{"path":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionBinarySearch(int[],int,int[],int,int[]).mjava","commits":[{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Puts the intersection of a and b into the target array and returns the size.\n   * lena should be smaller than lenb */\n  protected static int intersectionBinarySearch(int[] a, int lena, int[] b, int lenb, int[] target) {\n    int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int icount = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          target[icount++] = doca;\n          low = mid+1;  // found it, so start at next element\n          break;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n    }\n\n    return icount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersectionBinarySearch(int[],int,int[],int,int[]).mjava","pathOld":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionBinarySearch(int[],int,int[],int,int[]).mjava","sourceNew":"  /** Puts the intersection of a and b into the target array and returns the size.\n   * lena should be smaller than lenb */\n  protected static int intersectionBinarySearch(int[] a, int lena, int[] b, int lenb, int[] target) {\n    int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int icount = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          target[icount++] = doca;\n          low = mid+1;  // found it, so start at next element\n          break;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n    }\n\n    return icount;\n  }\n\n","sourceOld":"  /** Puts the intersection of a and b into the target array and returns the size.\n   * lena should be smaller than lenb */\n  protected static int intersectionBinarySearch(int[] a, int lena, int[] b, int lenb, int[] target) {\n    int step = (lenb/lena)+1;\n    step = step + step;\n\n\n    int icount = 0;\n    int low = 0;\n    int max = lenb-1;\n\n    for (int i=0; i<lena; i++) {\n      int doca = a[i];\n\n      int high = max;\n\n      int probe = low + step;     // 40% improvement!\n\n      // short linear probe to see if we can drop the high pointer in one big jump.\n      if (probe<high) {\n        if (b[probe]>=doca) {\n          // success!  we cut down the upper bound by a lot in one step!\n          high=probe;\n        } else {\n          // relative failure... we get to move the low pointer, but not my much\n          low=probe+1;\n\n          // reprobe worth it? it appears so!\n          probe = low + step;\n          if (probe<high) {\n            if (b[probe]>=doca) {\n              high=probe;\n            } else {\n              low=probe+1;\n            }\n          }\n        }\n      }\n\n\n      // binary search\n      while (low <= high) {\n        int mid = (low+high) >>> 1;\n        int docb = b[mid];\n\n        if (docb < doca) {\n          low = mid+1;\n        }\n        else if (docb > doca) {\n          high = mid-1;\n        }\n        else {\n          target[icount++] = doca;\n          low = mid+1;  // found it, so start at next element\n          break;\n        }\n      }\n      // Didn't find it... low is now positioned on the insertion point,\n      // which is higher than what we were looking for, so continue using\n      // the same low point.\n    }\n\n    return icount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["30391436869a41b74d4ba7098c40d955b686a10c"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}