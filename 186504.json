{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheSanityChecker#getAllDescendantReaderKeys(Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by {@code seed.getCoreCacheKey()}\n   */\n  private List<Object> getAllDescendantReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      final Object obj = all.get(i);\n      // TODO: We don't check closed readers here (as getTopReaderContext\n      // throws AlreadyClosedException), what should we do? Reflection?\n      if (obj instanceof IndexReader) {\n        try {\n          final List<IndexReaderContext> childs =\n            ((IndexReader) obj).getContext().children();\n          if (childs != null) { // it is composite reader\n            for (final IndexReaderContext ctx : childs) {\n              all.add(ctx.reader().getCoreCacheKey());\n            }\n          }\n        } catch (AlreadyClosedException ace) {\n          // ignore this reader\n        }\n      }\n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"d211216c83f01894810543d1c107160a9ae3650b":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["d211216c83f01894810543d1c107160a9ae3650b","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}