{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":null,"sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":null,"sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":null,"sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["af2638813028b254a88b418ebeafb541afb49653","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["af2638813028b254a88b418ebeafb541afb49653","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}