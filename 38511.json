{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalize().mjava","commits":[{"id":"807005c99d2f1db14e67f84c60b9a5be2ce93974","date":1494295491,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalize().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNormalize() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String cexpr = \"let(a=\"+expr1+\", c=col(a, price_f), tuple(n=normalize(c), c=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Double> col = (List<Double>)tuple.get(\"c\");\n    List<Double> normalized = (List<Double>)tuple.get(\"n\");\n\n    assertTrue(col.size() == normalized.size());\n\n    double total = 0.0D;\n\n    for(double d : normalized) {\n      total += d;\n    }\n\n    double mean = total/normalized.size();\n    assert(Math.round(mean) == 0);\n\n    double sd = 0;\n    for (int i = 0; i < normalized.size(); i++)\n    {\n      sd += Math.pow(normalized.get(i) - mean, 2) / normalized.size();\n    }\n    double standardDeviation = Math.sqrt(sd);\n\n    assertTrue(Math.round(standardDeviation) == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalize().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNormalize() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String cexpr = \"let(a=\"+expr1+\", c=col(a, price_f), tuple(n=normalize(c), c=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Double> col = (List<Double>)tuple.get(\"c\");\n    List<Double> normalized = (List<Double>)tuple.get(\"n\");\n\n    assertTrue(col.size() == normalized.size());\n\n    double total = 0.0D;\n\n    for(double d : normalized) {\n      total += d;\n    }\n\n    double mean = total/normalized.size();\n    assert(Math.round(mean) == 0);\n\n    double sd = 0;\n    for (int i = 0; i < normalized.size(); i++)\n    {\n      sd += Math.pow(normalized.get(i) - mean, 2) / normalized.size();\n    }\n    double standardDeviation = Math.sqrt(sd);\n\n    assertTrue(Math.round(standardDeviation) == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e33001cc090cf359296602fc5b76486f1eff2553","date":1509673049,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalize().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNormalize() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String cexpr = \"let(a=\"+expr1+\", c=col(a, price_f), tuple(n=normalize(c), c=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Double> col = (List<Double>)tuple.get(\"c\");\n    List<Double> normalized = (List<Double>)tuple.get(\"n\");\n\n    assertTrue(col.size() == normalized.size());\n\n    double total = 0.0D;\n\n    for(double d : normalized) {\n      total += d;\n    }\n\n    double mean = total/normalized.size();\n    assert(Math.round(mean) == 0);\n\n    double sd = 0;\n    for (int i = 0; i < normalized.size(); i++)\n    {\n      sd += Math.pow(normalized.get(i) - mean, 2) / normalized.size();\n    }\n    double standardDeviation = Math.sqrt(sd);\n\n    assertTrue(Math.round(standardDeviation) == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalize().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNormalize() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String cexpr = \"let(a=\"+expr1+\", c=col(a, price_f), tuple(n=normalize(c), c=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Double> col = (List<Double>)tuple.get(\"c\");\n    List<Double> normalized = (List<Double>)tuple.get(\"n\");\n\n    assertTrue(col.size() == normalized.size());\n\n    double total = 0.0D;\n\n    for(double d : normalized) {\n      total += d;\n    }\n\n    double mean = total/normalized.size();\n    assert(Math.round(mean) == 0);\n\n    double sd = 0;\n    for (int i = 0; i < normalized.size(); i++)\n    {\n      sd += Math.pow(normalized.get(i) - mean, 2) / normalized.size();\n    }\n    double standardDeviation = Math.sqrt(sd);\n\n    assertTrue(Math.round(standardDeviation) == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","807005c99d2f1db14e67f84c60b9a5be2ce93974"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["807005c99d2f1db14e67f84c60b9a5be2ce93974","e33001cc090cf359296602fc5b76486f1eff2553"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e33001cc090cf359296602fc5b76486f1eff2553":["807005c99d2f1db14e67f84c60b9a5be2ce93974"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","807005c99d2f1db14e67f84c60b9a5be2ce93974"],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["e9017cf144952056066919f1ebc7897ff9bd71b1","d523b8189b211dd1630166aa77b8c88bb48b3fcc","e33001cc090cf359296602fc5b76486f1eff2553"],"e33001cc090cf359296602fc5b76486f1eff2553":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}