{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException\n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2252a4efd304715a7a65ac0c9b167d312d09997a","date":1427361661,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException\n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":["060a4475f4072d4ea46bb4ec479dbaf1f207901a","bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(\"path\", path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.docs.matches());\n                  docs.setStart(ctx.docs.offset());\n                  docs.setMaxScore(ctx.docs.maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1dd4c767080690e6ad6aa46d1722fd11ca163b0","date":1463951417,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbdd035c502312d32111b9642ba3dbd5c52ee64f","date":1488346355,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument(doc);\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if (docs.size() > 0) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore(docs.getMaxScore());\n                tmp.setNumFound(docs.getNumFound());\n                tmp.setStart(docs.getStart());\n                docs = tmp;\n              }\n              callback.streamDocListInfo(docs.getNumFound(), docs.getStart(), docs.getMaxScore());\n              super.writeSolrDocumentList(docs);\n            }\n\n          }.setWritableDocFields(resolver). marshal(rsp.getValues(), out);\n\n          InputStream in = out.toInputStream();\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","e5ac9c2d15e75a72c2c461039fb6789654439323","4d3e8520fd031bab31fd0e4d480e55958bc45efe","2252a4efd304715a7a65ac0c9b167d312d09997a","a1dd4c767080690e6ad6aa46d1722fd11ca163b0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d154325f4d910828621eb42e4b1caadeb80aa60","date":1498774713,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f066545eaa084a3826a0179349c1dfa38506a3d1","date":1524109051,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), request.getContentStreams());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try(InputStream in = out.toInputStream()){\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":["060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"060a4475f4072d4ea46bb4ec479dbaf1f207901a","date":1528389530,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":["f066545eaa084a3826a0179349c1dfa38506a3d1","2252a4efd304715a7a65ac0c9b167d312d09997a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), Collections.singleton(new ContentStreamBase() {\n          @Override\n          public InputStream getStream() throws IOException {\n            BAOS baos = new BAOS();\n            new BinaryRequestWriter().write(request, baos);\n            return new ByteArrayInputStream(baos.getbuf());\n          }\n          @Override\n          public String getContentType() {\n            return CommonParams.JAVABIN_MIME;\n\n          }\n        }));\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, request.getContentStreams());\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d470946953c3ba2bd69d984efbfdc9017ddbb85","date":1569425608,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4","date":1592286410,"type":3,"author":"Nazerke Seidan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) {\n        req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String coreName) throws SolrServerException, IOException {\n\n    String path = request.getPath();\n    if (path == null || !path.startsWith(\"/\")) {\n      path = \"/select\";\n    }\n\n    SolrRequestHandler handler = coreContainer.getRequestHandler(path);\n    if (handler != null) {\n      try {\n        SolrQueryRequest req = _parser.buildRequestFrom(null, request.getParams(), getContentStreams(request));\n        req.getContext().put(\"httpMethod\", request.getMethod().name());\n        req.getContext().put(PATH, path);\n        SolrQueryResponse resp = new SolrQueryResponse();\n        handler.handleRequest(req, resp);\n        checkForExceptions(resp);\n        return BinaryResponseWriter.getParsedResponse(req, resp);\n      } catch (IOException | SolrException iox) {\n        throw iox;\n      } catch (Exception ex) {\n        throw new SolrServerException(ex);\n      }\n    }\n\n    if (coreName == null) {\n      coreName = this.coreName;\n      if (coreName == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No core specified on request and no default core has been set.\");\n      }\n    }\n\n    // Check for cores action\n    SolrQueryRequest req = null;\n    try (SolrCore core = coreContainer.getCore(coreName)) {\n\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No such core: \" + coreName);\n      }\n\n      SolrParams params = request.getParams();\n      if (params == null) {\n        params = new ModifiableSolrParams();\n      }\n\n      // Extract the handler from the path or params\n      handler = core.getRequestHandler(path);\n      if (handler == null) {\n        if (\"/select\".equals(path) || \"/select/\".equalsIgnoreCase(path)) {\n          String qt = params.get(CommonParams.QT);\n          handler = core.getRequestHandler(qt);\n          if (handler == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + qt);\n          }\n        }\n      }\n\n      if (handler == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \" + path);\n      }\n\n      req = _parser.buildRequestFrom(core, params, getContentStreams(request));\n      req.getContext().put(PATH, path);\n      req.getContext().put(\"httpMethod\", request.getMethod().name());\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n\n      core.execute(handler, req, rsp);\n      checkForExceptions(rsp);\n\n      // Check if this should stream results\n      if (request.getStreamingResponseCallback() != null) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver =\n              new BinaryResponseWriter.Resolver(req, rsp.getReturnFields()) {\n                @Override\n                public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n                  // write an empty list...\n                  SolrDocumentList docs = new SolrDocumentList();\n                  docs.setNumFound(ctx.getDocList().matches());\n                  docs.setNumFoundExact(ctx.getDocList().hitCountRelation() == Relation.EQUAL_TO);\n                  docs.setStart(ctx.getDocList().offset());\n                  docs.setMaxScore(ctx.getDocList().maxScore());\n                  codec.writeSolrDocumentList(docs);\n\n                  // This will transform\n                  writeResultsBody(ctx, codec);\n                }\n              };\n\n\n          try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n            createJavaBinCodec(callback, resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n            try (InputStream in = out.toInputStream()) {\n              return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n            }\n          }\n        } catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n\n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch (IOException | SolrException iox) {\n      throw iox;\n    } catch (Exception ex) {\n      throw new SolrServerException(ex);\n    } finally {\n      if (req != null) req.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["f066545eaa084a3826a0179349c1dfa38506a3d1"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["2d470946953c3ba2bd69d984efbfdc9017ddbb85"],"f066545eaa084a3826a0179349c1dfa38506a3d1":["0d154325f4d910828621eb42e4b1caadeb80aa60"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"0d154325f4d910828621eb42e4b1caadeb80aa60":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","d470c8182e92b264680e34081b75e70a9f2b3c89"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","a1dd4c767080690e6ad6aa46d1722fd11ca163b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2252a4efd304715a7a65ac0c9b167d312d09997a"],"a1dd4c767080690e6ad6aa46d1722fd11ca163b0":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f066545eaa084a3826a0179349c1dfa38506a3d1","060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","0d154325f4d910828621eb42e4b1caadeb80aa60"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["2252a4efd304715a7a65ac0c9b167d312d09997a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f066545eaa084a3826a0179349c1dfa38506a3d1","060a4475f4072d4ea46bb4ec479dbaf1f207901a"]},"commit2Childs":{"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2d470946953c3ba2bd69d984efbfdc9017ddbb85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f066545eaa084a3826a0179349c1dfa38506a3d1":["060a4475f4072d4ea46bb4ec479dbaf1f207901a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["0d154325f4d910828621eb42e4b1caadeb80aa60","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"0d154325f4d910828621eb42e4b1caadeb80aa60":["f066545eaa084a3826a0179349c1dfa38506a3d1","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","a1dd4c767080690e6ad6aa46d1722fd11ca163b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["2252a4efd304715a7a65ac0c9b167d312d09997a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"a1dd4c767080690e6ad6aa46d1722fd11ca163b0":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}