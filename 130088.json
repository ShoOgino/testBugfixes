{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNamedSnapshot(String).mjava","commits":[{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":0,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNamedSnapshot(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the snapshot with the specified name. If the directory\n   * storing the snapshot is not the same as the *current* core index directory,\n   * then delete the files corresponding to this snapshot. Otherwise we leave the\n   * index files related to snapshot as is (assuming the underlying Solr IndexDeletionPolicy\n   * will clean them up appropriately).\n   *\n   * @param commitName The name of the snapshot to be deleted.\n   * @throws IOException in case of I/O error.\n   */\n  public void deleteNamedSnapshot(String commitName) throws IOException {\n    // Note this lock is required to prevent multiple snapshot deletions from\n    // opening multiple IndexWriter instances simultaneously.\n    this.snapshotDelLock.lock();\n    try {\n      Optional<SnapshotMetaData> metadata = snapshotMgr.release(commitName);\n      if (metadata.isPresent()) {\n        long gen = metadata.get().getGenerationNumber();\n        String indexDirPath = metadata.get().getIndexDirPath();\n\n        if (!indexDirPath.equals(getIndexDir())) {\n          Directory d = getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, \"none\");\n          try {\n            Collection<SnapshotMetaData> snapshots = snapshotMgr.listSnapshotsInIndexDir(indexDirPath);\n            log.info(\"Following snapshots exist in the index directory {} : {}\", indexDirPath, snapshots);\n            if (snapshots.isEmpty()) {// No snapshots remain in this directory. Can be cleaned up!\n              log.info(\"Removing index directory {} since all named snapshots are deleted.\", indexDirPath);\n              getDirectoryFactory().remove(d);\n            } else {\n              SolrSnapshotManager.deleteSnapshotIndexFiles(this, d, gen);\n            }\n          } finally {\n            getDirectoryFactory().release(d);\n          }\n        }\n      }\n    } finally {\n      snapshotDelLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#deleteNamedSnapshot(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the snapshot with the specified name. If the directory\n   * storing the snapshot is not the same as the *current* core index directory,\n   * then delete the files corresponding to this snapshot. Otherwise we leave the\n   * index files related to snapshot as is (assuming the underlying Solr IndexDeletionPolicy\n   * will clean them up appropriately).\n   *\n   * @param commitName The name of the snapshot to be deleted.\n   * @throws IOException in case of I/O error.\n   */\n  public void deleteNamedSnapshot(String commitName) throws IOException {\n    // Note this lock is required to prevent multiple snapshot deletions from\n    // opening multiple IndexWriter instances simultaneously.\n    this.snapshotDelLock.lock();\n    try {\n      Optional<SnapshotMetaData> metadata = snapshotMgr.release(commitName);\n      if (metadata.isPresent()) {\n        long gen = metadata.get().getGenerationNumber();\n        String indexDirPath = metadata.get().getIndexDirPath();\n\n        if (!indexDirPath.equals(getIndexDir())) {\n          Directory d = getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, \"none\");\n          try {\n            Collection<SnapshotMetaData> snapshots = snapshotMgr.listSnapshotsInIndexDir(indexDirPath);\n            log.info(\"Following snapshots exist in the index directory {} : {}\", indexDirPath, snapshots);\n            if (snapshots.isEmpty()) {// No snapshots remain in this directory. Can be cleaned up!\n              log.info(\"Removing index directory {} since all named snapshots are deleted.\", indexDirPath);\n              getDirectoryFactory().remove(d);\n            } else {\n              SolrSnapshotManager.deleteSnapshotIndexFiles(this, d, gen);\n            }\n          } finally {\n            getDirectoryFactory().release(d);\n          }\n        }\n      }\n    } finally {\n      snapshotDelLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e13696c44d3e2405098726359ab81dab178e7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e13696c44d3e2405098726359ab81dab178e7bc"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e13696c44d3e2405098726359ab81dab178e7bc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}