{"path":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", request.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", req.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", frsp.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n        log.info(\"Query : {}\", request.getQueryString()); // logOk\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", request.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n        log.info(\"Query : {}\", request.getQueryString()); // nowarn\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n        log.info(\"Query : {}\", request.getQueryString()); // logOk\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}