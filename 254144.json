{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","commits":[{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":null,"sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}