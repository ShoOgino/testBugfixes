{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","sourceNew":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","sourceNew":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#readQueries(BufferedReader).mjava","sourceNew":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":"  /**\n   * Read quality queries from trec format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    StringBuilder sb;\n    try {\n      while (null!=(sb=read(reader,\"<top>\",null,false,false))) {\n        HashMap<String,String> fields = new HashMap<String,String>();\n        // id\n        sb = read(reader,\"<num>\",null,true,false);\n        int k = sb.indexOf(\":\");\n        String id = sb.substring(k+1).trim();\n        // title\n        sb = read(reader,\"<title>\",null,true,false);\n        k = sb.indexOf(\">\");\n        String title = sb.substring(k+1).trim();\n        // description\n        read(reader,\"<desc>\",null,false,false);\n        sb.setLength(0);\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"<narr>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String description = sb.toString().trim();\n        // narrative\n        sb.setLength(0);\n        while ((line = reader.readLine()) != null) {\n          if (line.startsWith(\"</top>\"))\n            break;\n          if (sb.length() > 0) sb.append(' ');\n          sb.append(line);\n        }\n        String narrative = sb.toString().trim();\n        // we got a topic!\n        fields.put(\"title\",title);\n        fields.put(\"description\",description);\n        fields.put(\"narrative\", narrative);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}