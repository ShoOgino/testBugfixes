{"path":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","commits":[{"id":"c40a0ea58c1ec1102274abff270cbfc06591bc27","date":1355874707,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    PagedBytes pb = new PagedBytes(15);\n    PagedBytesDataOutput dataOutput = pb.getDataOutput();\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    pb.freeze(true);\n\n    PagedBytesDataInput dataInput = pb.getDataInput();\n    lastFP = 0;\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n\n      byte[] bytesIn = new byte[numBytes];\n      dataInput.readBytes(bytesIn, 0, numBytes);\n      assertTrue(Arrays.equals(bytes, bytesIn));\n\n      long fp = dataInput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    PagedBytes pb = new PagedBytes(15);\n    PagedBytesDataOutput dataOutput = pb.getDataOutput();\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    pb.freeze(true);\n\n    PagedBytesDataInput dataInput = pb.getDataInput();\n    lastFP = 0;\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n\n      byte[] bytesIn = new byte[numBytes];\n      dataInput.readBytes(bytesIn, 0, numBytes);\n      assertTrue(Arrays.equals(bytes, bytesIn));\n\n      long fp = dataInput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    PagedBytes pb = new PagedBytes(15);\n    PagedBytesDataOutput dataOutput = pb.getDataOutput();\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    pb.freeze(true);\n\n    PagedBytesDataInput dataInput = pb.getDataInput();\n    lastFP = 0;\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n\n      byte[] bytesIn = new byte[numBytes];\n      dataInput.readBytes(bytesIn, 0, numBytes);\n      assertTrue(Arrays.equals(bytes, bytesIn));\n\n      long fp = dataInput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38ab816bc6a9fe7bbc1fdf0cd7543540d02417ee","date":1359986974,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    PagedBytes pb = new PagedBytes(15);\n    PagedBytesDataOutput dataOutput = pb.getDataOutput();\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    pb.freeze(true);\n\n    PagedBytesDataInput dataInput = pb.getDataInput();\n    lastFP = 0;\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 100000);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n\n      byte[] bytesIn = new byte[numBytes];\n      dataInput.readBytes(bytesIn, 0, numBytes);\n      assertTrue(Arrays.equals(bytes, bytesIn));\n\n      long fp = dataInput.getPosition();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n  }\n\n","bugFix":["c40a0ea58c1ec1102274abff270cbfc06591bc27"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = _TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"test2BPagedBytes\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    PagedBytes pb = new PagedBytes(15);\n    IndexOutput dataOutput = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    long netBytes = 0;\n    long seed = random().nextLong();\n    long lastFP = 0;\n    Random r2 = new Random(seed);\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      dataOutput.writeBytes(bytes, bytes.length);\n      long fp = dataOutput.getFilePointer();\n      assert fp == lastFP + numBytes;\n      lastFP = fp;\n      netBytes += numBytes;\n    }\n    dataOutput.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    pb.copy(input, input.length());\n    input.close();\n    PagedBytes.Reader reader = pb.freeze(true);\n\n    r2 = new Random(seed);\n    netBytes = 0;\n    while(netBytes < 1.1*Integer.MAX_VALUE) {\n      int numBytes = TestUtil.nextInt(r2, 1, 32768);\n      byte[] bytes = new byte[numBytes];\n      r2.nextBytes(bytes);\n      BytesRef expected = new BytesRef(bytes);\n\n      BytesRef actual = new BytesRef();\n      reader.fillSlice(actual, netBytes, numBytes);\n      assertEquals(expected, actual);\n\n      netBytes += numBytes;\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c40a0ea58c1ec1102274abff270cbfc06591bc27"],"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c40a0ea58c1ec1102274abff270cbfc06591bc27","38ab816bc6a9fe7bbc1fdf0cd7543540d02417ee"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"38ab816bc6a9fe7bbc1fdf0cd7543540d02417ee":["fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"c40a0ea58c1ec1102274abff270cbfc06591bc27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["38ab816bc6a9fe7bbc1fdf0cd7543540d02417ee"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c40a0ea58c1ec1102274abff270cbfc06591bc27"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"38ab816bc6a9fe7bbc1fdf0cd7543540d02417ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c40a0ea58c1ec1102274abff270cbfc06591bc27":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}