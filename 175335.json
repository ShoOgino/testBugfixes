{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, Filter filter, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, wrapFilter(query, filter), numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"308eabc0d18aa58a75b0a130d08524e98661807b","date":1425056617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous\n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous\n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous\n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous\n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous\n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","308eabc0d18aa58a75b0a130d08524e98661807b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["308eabc0d18aa58a75b0a130d08524e98661807b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"308eabc0d18aa58a75b0a130d08524e98661807b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["308eabc0d18aa58a75b0a130d08524e98661807b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","308eabc0d18aa58a75b0a130d08524e98661807b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"308eabc0d18aa58a75b0a130d08524e98661807b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}