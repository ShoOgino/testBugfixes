{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cbc4730743fac2e69e7d622848778d3ad9f2151","date":1502282443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = node;\n    in.setPosition(address);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","date":1571070636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED || flags == ARCS_AS_ARRAY_WITH_GAPS) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      //System.out.println(\"  fixed length arc\");\n      // Special arc which is actually a node header for fixed length arcs.\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.arcIdx = -1;\n      if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        readPresenceBytes(arc, in);\n        arc.firstLabel = readLabel(in);\n      }\n      arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = in.readByte();\n    if (flags == ARCS_AS_ARRAY_PACKED) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      if (flags == ARCS_AS_ARRAY_PACKED) {\n        arc.arcIdx = -1;\n      } else {\n        arc.arcIdx = Integer.MIN_VALUE;\n      }\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      //System.out.println(\"  fixed length arc\");\n      // Special arc which is actually a node header for fixed length arcs.\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.arcIdx = -1;\n      if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        readPresenceBytes(arc, in);\n        arc.firstLabel = readLabel(in);\n        arc.presenceIndex = -1;\n      }\n      arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(long nodeAddress, Arc<T> arc, final BytesReader in) throws IOException {\n    in.setPosition(nodeAddress);\n    //System.out.println(\"   flags=\" + arc.flags);\n\n    byte flags = arc.nodeFlags = in.readByte();\n    if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n      //System.out.println(\"  fixed length arc\");\n      // Special arc which is actually a node header for fixed length arcs.\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readVInt();\n      arc.arcIdx = -1;\n      if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        readPresenceBytes(arc, in);\n        arc.firstLabel = readLabel(in);\n      }\n      arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = nodeAddress;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9cbc4730743fac2e69e7d622848778d3ad9f2151"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["6244579a467d5f2673ac98265d74bddbea1a8114"],"6244579a467d5f2673ac98265d74bddbea1a8114":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","6244579a467d5f2673ac98265d74bddbea1a8114"],"71d31a7d5773508492505519bb5230b87c8937ad":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["c0e7448656541edc407546460641f47950451b16"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["6244579a467d5f2673ac98265d74bddbea1a8114","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["6244579a467d5f2673ac98265d74bddbea1a8114","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"b0b597c65628ca9e73913a07e81691f8229bae35":["54204c8a3ca26aeafd273139fc29baf70d0f6786","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["c0e7448656541edc407546460641f47950451b16","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"6244579a467d5f2673ac98265d74bddbea1a8114":["9cbc4730743fac2e69e7d622848778d3ad9f2151","199dfa410f1fdbfd3294106b04096cce5ed34b21","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["f8061ddd97f3352007d927dae445884a6f3d857b","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","b0b597c65628ca9e73913a07e81691f8229bae35"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["71d31a7d5773508492505519bb5230b87c8937ad","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","f8061ddd97f3352007d927dae445884a6f3d857b","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}