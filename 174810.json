{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#step3b(StringBuffer).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#step3b(StringBuffer).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#step3b(StringBuffer).mjava","sourceNew":"  /**\n   * <p>A d-suffix, or derivational suffix, enables a new word,\n   * often with a different grammatical category, or with a different\n   * sense, to be built from another word. Whether a d-suffix can be\n   * attached is discovered not from the rules of grammar, but by\n   * referring to a dictionary. So in English, ness can be added to\n   * certain adjectives to form corresponding nouns (littleness,\n   * kindness, foolishness ...) but not to all adjectives\n   * (not for example, to big, cruel, wise ...) d-suffixes can be\n   * used to change meaning, often in rather exotic ways.</p>\n   * Remove \"ing\", \"end\", \"ig\", \"lijk\", \"baar\" and \"bar\"\n   *\n   * @param sb String being stemmed\n   */\n  private void step3b(StringBuffer sb) {\n    if (_R2 >= sb.length())\n      return;\n    String s = sb.toString();\n    int index = 0;\n\n    if ((s.endsWith(\"end\") || s.endsWith(\"ing\")) &&\n        (index = s.length() - 3) >= _R2) {\n      sb.delete(index, index + 3);\n      if (sb.charAt(index - 2) == 'i' &&\n          sb.charAt(index - 1) == 'g') {\n        if (sb.charAt(index - 3) != 'e' & index - 2 >= _R2) {\n          index -= 2;\n          sb.delete(index, index + 2);\n        }\n      } else {\n        unDouble(sb, index);\n      }\n      return;\n    }\n    if (s.endsWith(\"ig\") &&\n        (index = s.length() - 2) >= _R2\n    ) {\n      if (sb.charAt(index - 1) != 'e')\n        sb.delete(index, index + 2);\n      return;\n    }\n    if (s.endsWith(\"lijk\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      step2(sb);\n      return;\n    }\n    if (s.endsWith(\"baar\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      return;\n    }\n    if (s.endsWith(\"bar\") &&\n        (index = s.length() - 3) >= _R2\n    ) {\n      if (_removedE)\n        sb.delete(index, index + 3);\n      return;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>A d-suffix, or derivational suffix, enables a new word,\n   * often with a different grammatical category, or with a different\n   * sense, to be built from another word. Whether a d-suffix can be\n   * attached is discovered not from the rules of grammar, but by\n   * referring to a dictionary. So in English, ness can be added to\n   * certain adjectives to form corresponding nouns (littleness,\n   * kindness, foolishness ...) but not to all adjectives\n   * (not for example, to big, cruel, wise ...) d-suffixes can be\n   * used to change meaning, often in rather exotic ways.</p>\n   * Remove \"ing\", \"end\", \"ig\", \"lijk\", \"baar\" and \"bar\"\n   *\n   * @param sb String being stemmed\n   */\n  private void step3b(StringBuffer sb) {\n    if (_R2 >= sb.length())\n      return;\n    String s = sb.toString();\n    int index = 0;\n\n    if ((s.endsWith(\"end\") || s.endsWith(\"ing\")) &&\n        (index = s.length() - 3) >= _R2) {\n      sb.delete(index, index + 3);\n      if (sb.charAt(index - 2) == 'i' &&\n          sb.charAt(index - 1) == 'g') {\n        if (sb.charAt(index - 3) != 'e' & index - 2 >= _R2) {\n          index -= 2;\n          sb.delete(index, index + 2);\n        }\n      } else {\n        unDouble(sb, index);\n      }\n      return;\n    }\n    if (s.endsWith(\"ig\") &&\n        (index = s.length() - 2) >= _R2\n    ) {\n      if (sb.charAt(index - 1) != 'e')\n        sb.delete(index, index + 2);\n      return;\n    }\n    if (s.endsWith(\"lijk\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      step2(sb);\n      return;\n    }\n    if (s.endsWith(\"baar\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      return;\n    }\n    if (s.endsWith(\"bar\") &&\n        (index = s.length() - 3) >= _R2\n    ) {\n      if (_removedE)\n        sb.delete(index, index + 3);\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer#step3b(StringBuffer).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemmer#step3b(StringBuffer).mjava","sourceNew":"  /**\n   * <p>A d-suffix, or derivational suffix, enables a new word,\n   * often with a different grammatical category, or with a different\n   * sense, to be built from another word. Whether a d-suffix can be\n   * attached is discovered not from the rules of grammar, but by\n   * referring to a dictionary. So in English, ness can be added to\n   * certain adjectives to form corresponding nouns (littleness,\n   * kindness, foolishness ...) but not to all adjectives\n   * (not for example, to big, cruel, wise ...) d-suffixes can be\n   * used to change meaning, often in rather exotic ways.</p>\n   * Remove \"ing\", \"end\", \"ig\", \"lijk\", \"baar\" and \"bar\"\n   *\n   * @param sb String being stemmed\n   */\n  private void step3b(StringBuffer sb) {\n    if (_R2 >= sb.length())\n      return;\n    String s = sb.toString();\n    int index = 0;\n\n    if ((s.endsWith(\"end\") || s.endsWith(\"ing\")) &&\n        (index = s.length() - 3) >= _R2) {\n      sb.delete(index, index + 3);\n      if (sb.charAt(index - 2) == 'i' &&\n          sb.charAt(index - 1) == 'g') {\n        if (sb.charAt(index - 3) != 'e' & index - 2 >= _R2) {\n          index -= 2;\n          sb.delete(index, index + 2);\n        }\n      } else {\n        unDouble(sb, index);\n      }\n      return;\n    }\n    if (s.endsWith(\"ig\") &&\n        (index = s.length() - 2) >= _R2\n    ) {\n      if (sb.charAt(index - 1) != 'e')\n        sb.delete(index, index + 2);\n      return;\n    }\n    if (s.endsWith(\"lijk\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      step2(sb);\n      return;\n    }\n    if (s.endsWith(\"baar\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      return;\n    }\n    if (s.endsWith(\"bar\") &&\n        (index = s.length() - 3) >= _R2\n    ) {\n      if (_removedE)\n        sb.delete(index, index + 3);\n      return;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>A d-suffix, or derivational suffix, enables a new word,\n   * often with a different grammatical category, or with a different\n   * sense, to be built from another word. Whether a d-suffix can be\n   * attached is discovered not from the rules of grammar, but by\n   * referring to a dictionary. So in English, ness can be added to\n   * certain adjectives to form corresponding nouns (littleness,\n   * kindness, foolishness ...) but not to all adjectives\n   * (not for example, to big, cruel, wise ...) d-suffixes can be\n   * used to change meaning, often in rather exotic ways.</p>\n   * Remove \"ing\", \"end\", \"ig\", \"lijk\", \"baar\" and \"bar\"\n   *\n   * @param sb String being stemmed\n   */\n  private void step3b(StringBuffer sb) {\n    if (_R2 >= sb.length())\n      return;\n    String s = sb.toString();\n    int index = 0;\n\n    if ((s.endsWith(\"end\") || s.endsWith(\"ing\")) &&\n        (index = s.length() - 3) >= _R2) {\n      sb.delete(index, index + 3);\n      if (sb.charAt(index - 2) == 'i' &&\n          sb.charAt(index - 1) == 'g') {\n        if (sb.charAt(index - 3) != 'e' & index - 2 >= _R2) {\n          index -= 2;\n          sb.delete(index, index + 2);\n        }\n      } else {\n        unDouble(sb, index);\n      }\n      return;\n    }\n    if (s.endsWith(\"ig\") &&\n        (index = s.length() - 2) >= _R2\n    ) {\n      if (sb.charAt(index - 1) != 'e')\n        sb.delete(index, index + 2);\n      return;\n    }\n    if (s.endsWith(\"lijk\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      step2(sb);\n      return;\n    }\n    if (s.endsWith(\"baar\") &&\n        (index = s.length() - 4) >= _R2\n    ) {\n      sb.delete(index, index + 4);\n      return;\n    }\n    if (s.endsWith(\"bar\") &&\n        (index = s.length() - 3) >= _R2\n    ) {\n      if (_removedE)\n        sb.delete(index, index + 3);\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}