{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","commits":[{"id":"47081d784f5fff71bb715c806c824b50901392fb","date":1378303234,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(ByteArrayDataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, IOUtils.CHARSET_UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(ByteArrayDataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, IOUtils.CHARSET_UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, StandardCharsets.UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, IOUtils.CHARSET_UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, StandardCharsets.UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, IOUtils.CHARSET_UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"078fa9e94da55eaa1aa1e7393aa84ba7cc986864","date":1418310060,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, StandardCharsets.UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readZInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, readZFloat(in));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, readTLong(in));\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, readZDouble(in));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, StandardCharsets.UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, Float.intBitsToFloat(in.readInt()));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, in.readLong());\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, Double.longBitsToDouble(in.readLong()));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, data);\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readZInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, readZFloat(in));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, readTLong(in));\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, readZDouble(in));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, new String(data, StandardCharsets.UTF_8));\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readZInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, readZFloat(in));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, readTLong(in));\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, readZDouble(in));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#readField(DataInput,StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        visitor.stringField(info, in.readString());\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readZInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, readZFloat(in));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, readTLong(in));\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, readZDouble(in));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","sourceOld":"  private static void readField(DataInput in, StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    switch (bits & TYPE_MASK) {\n      case BYTE_ARR:\n        int length = in.readVInt();\n        byte[] data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.binaryField(info, data);\n        break;\n      case STRING:\n        length = in.readVInt();\n        data = new byte[length];\n        in.readBytes(data, 0, length);\n        visitor.stringField(info, data);\n        break;\n      case NUMERIC_INT:\n        visitor.intField(info, in.readZInt());\n        break;\n      case NUMERIC_FLOAT:\n        visitor.floatField(info, readZFloat(in));\n        break;\n      case NUMERIC_LONG:\n        visitor.longField(info, readTLong(in));\n        break;\n      case NUMERIC_DOUBLE:\n        visitor.doubleField(info, readZDouble(in));\n        break;\n      default:\n        throw new AssertionError(\"Unknown type flag: \" + Integer.toHexString(bits));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":["47081d784f5fff71bb715c806c824b50901392fb","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"7d89d7e4e5101347833eea558851bf4209218619":["47081d784f5fff71bb715c806c824b50901392fb"],"47081d784f5fff71bb715c806c824b50901392fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["47081d784f5fff71bb715c806c824b50901392fb"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["500188ac33da6ce742a5b18858f34701ef16c77a"],"7d89d7e4e5101347833eea558851bf4209218619":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864","5eb2511ababf862ea11e10761c70ee560cd84510"],"47081d784f5fff71bb715c806c824b50901392fb":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}