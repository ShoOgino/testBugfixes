{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":["aab56102a66ad6123bbc7a10ec65d998b5e6117a","c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["d9405f486872f1e416304dfe389741f4ee2f8a4d","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","f2126b84bd093fa3d921582a109a0ee578c28126"],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}