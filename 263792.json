{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? 'I' : '-' );\n    flags.append( (t != null && t.isTokenized())         ? 'T' : '-' );\n    flags.append( (f != null && f.stored())              ? 'S' : '-' );\n    flags.append( (f != null && f.multiValued())         ? 'M' : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? 'V' : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? 'o' : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? 'p' : '-' );\n    flags.append( (f != null && f.omitNorms())           ? 'O' : '-' );\n    flags.append( (lazy)                                 ? 'L' : '-' );\n    flags.append( (binary)                               ? 'B' : '-' );\n    flags.append( (f != null && f.isCompressed())        ? 'C' : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? 'f' : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? 'l' : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a68b3240cf63c0ebea7a73b217a999a8f585c6","date":1190911422,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.isCompressed())        ? FieldFlag.COMPRESSED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? 'I' : '-' );\n    flags.append( (t != null && t.isTokenized())         ? 'T' : '-' );\n    flags.append( (f != null && f.stored())              ? 'S' : '-' );\n    flags.append( (f != null && f.multiValued())         ? 'M' : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? 'V' : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? 'o' : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? 'p' : '-' );\n    flags.append( (f != null && f.omitNorms())           ? 'O' : '-' );\n    flags.append( (lazy)                                 ? 'L' : '-' );\n    flags.append( (binary)                               ? 'B' : '-' );\n    flags.append( (f != null && f.isCompressed())        ? 'C' : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? 'f' : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? 'l' : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f","date":1235359663,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.isCompressed())        ? FieldFlag.COMPRESSED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.isCompressed())        ? FieldFlag.COMPRESSED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac","date":1268682985,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.isCompressed())        ? FieldFlag.COMPRESSED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlags(SchemaField).mjava","sourceNew":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","sourceOld":"  /**\n   * @return a string representing a SchemaField's flags.  \n   */\n  private static String getFieldFlags( SchemaField f )\n  {\n    FieldType t = (f==null) ? null : f.getType();\n    \n    // see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549\n    boolean lazy = false; // \"lazy\" is purely a property of reading fields\n    boolean binary = false; // Currently not possible\n    \n    StringBuilder flags = new StringBuilder();\n    flags.append( (f != null && f.indexed())             ? FieldFlag.INDEXED.getAbbreviation() : '-' );\n    flags.append( (t != null && t.isTokenized())         ? FieldFlag.TOKENIZED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.stored())              ? FieldFlag.STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.multiValued())         ? FieldFlag.MULTI_VALUED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermVector() )    ? FieldFlag.TERM_VECTOR_STORED.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermOffsets() )   ? FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation() : '-' );\n    flags.append( (f != null && f.storeTermPositions() ) ? FieldFlag.TERM_VECTOR_POSITION.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitNorms())           ? FieldFlag.OMIT_NORMS.getAbbreviation() : '-' );\n    flags.append( (f != null && f.omitTf())              ? FieldFlag.OMIT_TF.getAbbreviation() : '-' );\n    flags.append( (lazy)                                 ? FieldFlag.LAZY.getAbbreviation() : '-' );\n    flags.append( (binary)                               ? FieldFlag.BINARY.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingFirst() )   ? FieldFlag.SORT_MISSING_FIRST.getAbbreviation() : '-' );\n    flags.append( (f != null && f.sortMissingLast() )    ? FieldFlag.SORT_MISSING_LAST.getAbbreviation() : '-' );\n    return flags.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["2070bf73ffa1039a505000f99ea245884ff19e11"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["d1a4c3e86c634e830c1a7217c6bc2b5dc709259f"],"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["d1a4c3e86c634e830c1a7217c6bc2b5dc709259f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}