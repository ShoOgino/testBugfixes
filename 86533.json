{"path":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","commits":[{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<Integer>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","sourceNew":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<Integer>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","sourceNew":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(i);\n    }\n    assertEquals(\"within list\", Integer.valueOf(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(i);\n      assertEquals(\"within list\", Integer.valueOf(i - 9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(Integer.valueOf(15), list.get(0));\n    list.resize(10);\n    assertEquals(Integer.valueOf(15), list.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","sourceNew":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(i);\n    }\n    assertEquals(\"within list\", Integer.valueOf(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(i);\n      assertEquals(\"within list\", Integer.valueOf(i - 9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(Integer.valueOf(15), list.get(0));\n    list.resize(10);\n    assertEquals(Integer.valueOf(15), list.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/CircularListTest#testCircularList().mjava","sourceNew":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(i);\n    }\n    assertEquals(\"within list\", Integer.valueOf(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(i);\n      assertEquals(\"within list\", Integer.valueOf(i - 9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(Integer.valueOf(15), list.get(0));\n    list.resize(10);\n    assertEquals(Integer.valueOf(15), list.get(0));\n  }\n\n","sourceOld":"  @Test\n  public void testCircularList() throws IOException {\n    CircularList<Integer> list = new CircularList<>(10);\n    for(int i=0;i<10; i++) {\n      list.add(new Integer(i));\n    }\n    assertEquals(\"within list\", new Integer(0), list.get(0));\n    for(int i=10;i<20; i++) {\n      list.add(new Integer(i));\n      assertEquals(\"within list\", new Integer(i-9), list.get(0));\n    }\n    \n    // now try the resize\n    list.resize(5);\n    assertEquals(new Integer(15), list.get(0));\n    list.resize(10);\n    assertEquals(new Integer(15), list.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}