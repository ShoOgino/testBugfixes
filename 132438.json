{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return this.getBoost() == other.getBoost()\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && Arrays.equals(disjuncts, other.disjuncts);\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && this.disjuncts.equals(other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param other another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && Arrays.equals(disjuncts, other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true iff we represent the same query as o\n   * @param other another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param o another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (! (o instanceof DisjunctionMaxQuery) ) return false;\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\n    return super.equals(o)\n            && this.tieBreakerMultiplier == other.tieBreakerMultiplier\n            && Arrays.equals(disjuncts, other.disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fedec6d8ae130c34ebe64b1286b236c15f822df","date":1578925324,"type":3,"author":"0xflotus","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true if we represent the same query as other\n   * @param other another object\n   * @return true if other is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param other another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#equals(Object).mjava","sourceNew":"  /** Return true if we represent the same query as other\n   * @param other another object\n   * @return true if other is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Return true iff we represent the same query as o\n   * @param other another object\n   * @return true iff o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us\n   */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fedec6d8ae130c34ebe64b1286b236c15f822df":["0e7bc21595222ae4f75509300fbb7726691f387f"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0fedec6d8ae130c34ebe64b1286b236c15f822df"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["0e7bc21595222ae4f75509300fbb7726691f387f","0fedec6d8ae130c34ebe64b1286b236c15f822df"]},"commit2Childs":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0fedec6d8ae130c34ebe64b1286b236c15f822df":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0e7bc21595222ae4f75509300fbb7726691f387f":["0fedec6d8ae130c34ebe64b1286b236c15f822df","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}