{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#visit(int).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#visit(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int).mjava","sourceNew":"    @Override\n    public void visit(int docID) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, not filtering each hit, should only be invoked when the cell is inside the query shape:\n      assert lastCompareResult == Relation.CELL_INSIDE_QUERY;\n      in.visit(docID);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, not filtering each hit, should only be invoked when the cell is inside the query shape:\n      assert lastCompareResult == Relation.CELL_INSIDE_QUERY;\n      in.visit(docID);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#visit(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int).mjava","sourceNew":"    @Override\n    public void visit(int docID) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, not filtering each hit, should only be invoked when the cell is inside the query shape:\n      assert lastCompareResult == Relation.CELL_INSIDE_QUERY;\n      in.visit(docID);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, not filtering each hit, should only be invoked when the cell is inside the query shape:\n      assert lastCompareResult == Relation.CELL_INSIDE_QUERY;\n      in.visit(docID);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}