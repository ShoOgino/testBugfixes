{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#traverseZkTree(String,ZkVisitor).mjava","commits":[{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#traverseZkTree(String,ZkVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively visit a zk tree rooted at path and apply the given visitor to each path. Exists as a separate method\n   * because some of the logic can get nuanced.\n   *\n   * @param path the path to start from\n   * @param visitor the operation to perform on each path\n   */\n  private void traverseZkTree(final String path, final ZkVisitor visitor) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't do anything to the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        traverseZkTree(path + string, visitor);\n      } else {\n        traverseZkTree(path + \"/\" + string, visitor);\n      }\n    }\n    visitor.visit(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":5,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#traverseZkTree(SolrZkClient,String,VISIT_ORDER,ZkVisitor).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#traverseZkTree(String,ZkVisitor).mjava","sourceNew":"  /**\n   * Recursively visit a zk tree rooted at path and apply the given visitor to each path. Exists as a separate method\n   * because some of the logic can get nuanced.\n   *\n   * @param path       the path to start from\n   * @param visitOrder whether to call the visitor at the at the ending or beginning of the run.\n   * @param visitor    the operation to perform on each path\n   */\n  public static void traverseZkTree(SolrZkClient zkClient, final String path, final VISIT_ORDER visitOrder, final ZkVisitor visitor)\n      throws InterruptedException, KeeperException {\n    if (visitOrder == VISIT_ORDER.VISIT_PRE) {\n      visitor.visit(path);\n    }\n    List<String> children;\n    try {\n      children = zkClient.getChildren(path, null, true);\n    } catch (KeeperException.NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't do anything to the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.startsWith(\"/zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        traverseZkTree(zkClient, path + string, visitOrder, visitor);\n      } else {\n        traverseZkTree(zkClient, path + \"/\" + string, visitOrder, visitor);\n      }\n    }\n    if (visitOrder == VISIT_ORDER.VISIT_POST) {\n      visitor.visit(path);\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively visit a zk tree rooted at path and apply the given visitor to each path. Exists as a separate method\n   * because some of the logic can get nuanced.\n   *\n   * @param path the path to start from\n   * @param visitor the operation to perform on each path\n   */\n  private void traverseZkTree(final String path, final ZkVisitor visitor) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't do anything to the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        traverseZkTree(path + string, visitor);\n      } else {\n        traverseZkTree(path + \"/\" + string, visitor);\n      }\n    }\n    visitor.visit(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#traverseZkTree(String,ZkVisitor).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively visit a zk tree rooted at path and apply the given visitor to each path. Exists as a separate method\n   * because some of the logic can get nuanced.\n   *\n   * @param path the path to start from\n   * @param visitor the operation to perform on each path\n   */\n  private void traverseZkTree(final String path, final ZkVisitor visitor) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't do anything to the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        traverseZkTree(path + string, visitor);\n      } else {\n        traverseZkTree(path + \"/\" + string, visitor);\n      }\n    }\n    visitor.visit(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["67cf727e72c71906ffd390c61b50a1c60f2ebd49","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}