{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","commits":[{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    String rootId = getHashableId();\n\n    boolean isVersion = version != 0;\n\n    for (SolrInputDocument sdoc : all) {\n      sdoc.setField(IndexSchema.ROOT_FIELD_NAME, rootId);\n      if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    String rootId = getHashableId();\n\n    boolean isVersion = version != 0;\n\n    for (SolrInputDocument sdoc : all) {\n      sdoc.setField(IndexSchema.ROOT_FIELD_NAME, rootId);\n      if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    String rootId = getHashableId();\n\n    boolean isVersion = version != 0;\n\n    for (SolrInputDocument sdoc : all) {\n      sdoc.setField(IndexSchema.ROOT_FIELD_NAME, rootId);\n      if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","sourceNew":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    final String rootId = getHashableId();\n    final SolrInputField versionSif = solrDoc.get(CommonParams.VERSION_FIELD);\n\n    for (SolrInputDocument sdoc : all) {\n      addRootField(sdoc, rootId);\n      if (versionSif != null) {\n        addVersionField(sdoc, versionSif);\n      }\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","sourceOld":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    String rootId = getHashableId();\n\n    boolean isVersion = version != 0;\n\n    for (SolrInputDocument sdoc : all) {\n      sdoc.setField(IndexSchema.ROOT_FIELD_NAME, rootId);\n      if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getLuceneDocsIfNested().mjava","sourceNew":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    final String rootId = getRootIdUsingRouteParam();\n    final SolrInputField versionSif = solrDoc.get(CommonParams.VERSION_FIELD);\n\n    for (SolrInputDocument sdoc : all) {\n      addRootField(sdoc, rootId);\n      if (versionSif != null) {\n        addVersionField(sdoc, versionSif);\n      }\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","sourceOld":"  /**\n   * Computes the final flattened Solr docs that are ready to be converted to Lucene docs.  If no flattening is\n   * performed then we return null, and the caller ought to use {@link #getLuceneDocument()} instead.\n   * This should only be called once.\n   * Any changes made to the returned Document(s) will not be reflected in the SolrInputDocument,\n   * or future calls to this method.\n   */\n  public Iterable<Document> getLuceneDocsIfNested() {\n    assert ! isInPlaceUpdate() : \"We don't expect this to happen.\"; // but should \"work\"?\n    if (!req.getSchema().isUsableForChildDocs()) {\n      // note if the doc is nested despite this, we'll throw an exception elsewhere\n      return null;\n    }\n\n    List<SolrInputDocument> all = flatten(solrDoc);\n    if (all.size() <= 1) {\n      return null; // caller should call getLuceneDocument() instead\n    }\n\n    final String rootId = getHashableId();\n    final SolrInputField versionSif = solrDoc.get(CommonParams.VERSION_FIELD);\n\n    for (SolrInputDocument sdoc : all) {\n      addRootField(sdoc, rootId);\n      if (versionSif != null) {\n        addVersionField(sdoc, versionSif);\n      }\n      // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n      // then we could add this field to the generated lucene document instead.\n    }\n\n    return () -> all.stream().map(sdoc -> DocumentBuilder.toDocument(sdoc, req.getSchema())).iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["07749612bed4eb54dd05255c1434c301133310c1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["aa4f44656c8081bbc63325a83abdb025eafd5a2b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}