{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        String id = input.readString();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        String id = input.readString();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        String id = input.readString();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2b68cde7a9cb042573786d2f01d451ff46b5556","date":1412631431,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.parse(input.readString());\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7923aa6efab0e92f2982f1972dc96dae3032b1c3","date":1413834454,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.read(input);\n        } catch (IllegalArgumentException iae) {\n          throw new CorruptIndexException(\"invalid version: \" + iae.getMessage(), input, iae);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7520ba9e95ee7b692648c0217c90cc4dd681e6","date":1413834525,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version;\n        try {\n          version = Version.read(input);\n        } catch (IllegalArgumentException iae) {\n          throw new CorruptIndexException(\"invalid version: \" + iae.getMessage(), input, iae);\n        }\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["d2b68cde7a9cb042573786d2f01d451ff46b5556"],"7923aa6efab0e92f2982f1972dc96dae3032b1c3":["55980207f1977bd1463465de1659b821347e2fa8"],"d2b68cde7a9cb042573786d2f01d451ff46b5556":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"55980207f1977bd1463465de1659b821347e2fa8":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["500867f0f15393f6b2c38c3366e414fccba04ed6","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7520ba9e95ee7b692648c0217c90cc4dd681e6":["7923aa6efab0e92f2982f1972dc96dae3032b1c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7923aa6efab0e92f2982f1972dc96dae3032b1c3":["1c7520ba9e95ee7b692648c0217c90cc4dd681e6"],"d2b68cde7a9cb042573786d2f01d451ff46b5556":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"55980207f1977bd1463465de1659b821347e2fa8":["7923aa6efab0e92f2982f1972dc96dae3032b1c3"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["d2b68cde7a9cb042573786d2f01d451ff46b5556"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"1c7520ba9e95ee7b692648c0217c90cc4dd681e6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1c7520ba9e95ee7b692648c0217c90cc4dd681e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}