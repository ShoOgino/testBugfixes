{"path":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","commits":[{"id":"424ac616f0aeeb2a3c8b6b94084255a0bcab9628","date":1477057622,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","sourceNew":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","sourceOld":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#selectReplicaWithSnapshot(CollectionSnapshotMetaData,Slice).mjava","sourceNew":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","sourceOld":"  private Replica selectReplicaWithSnapshot(CollectionSnapshotMetaData snapshotMeta, Slice slice) {\n    // The goal here is to choose the snapshot of the replica which was the leader at the time snapshot was created.\n    // If that is not possible, we choose any other replica for the given shard.\n    Collection<CoreSnapshotMetaData> snapshots = snapshotMeta.getReplicaSnapshotsForShard(slice.getName());\n\n    Optional<CoreSnapshotMetaData> leaderCore = snapshots.stream().filter(x -> x.isLeader()).findFirst();\n    if (leaderCore.isPresent()) {\n      log.info(\"Replica {} was the leader when snapshot {} was created.\", leaderCore.get().getCoreName(), snapshotMeta.getName());\n      Replica r = slice.getReplica(leaderCore.get().getCoreName());\n      if ((r != null) && !r.getState().equals(State.DOWN)) {\n        return r;\n      }\n    }\n\n    Optional<Replica> r = slice.getReplicas().stream()\n                               .filter(x -> x.getState() != State.DOWN && snapshotMeta.isSnapshotExists(slice.getName(), x))\n                               .findFirst();\n\n    if (!r.isPresent()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Unable to find any live replica with a snapshot named \" + snapshotMeta.getName() + \" for shard \" + slice.getName());\n    }\n\n    return r.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["b94236357aaa22b76c10629851fe4e376e0cea82","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}