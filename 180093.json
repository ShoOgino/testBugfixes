{"path":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name + (errors.isEmpty()? \"\": \"Some dynamic libraries could not be loaded: \"+ StrUtils.join(errors, '|')), e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name, e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name + (errors.isEmpty()? \"\": \"Some dynamic libraries could not be loaded: \"+ StrUtils.join(errors, '|')), e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","sourceOld":"  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name + (errors.isEmpty()? \"\": \"Some dynamic libraries could not be loaded: \"+ StrUtils.join(errors, '|')), e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/MemClassLoader#loadFromRuntimeLibs(String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  private synchronized  Class<?> loadFromRuntimeLibs(String name) throws ClassNotFoundException {\n    Class result = classCache.get(name);\n    if(result != null)\n      return result;\n    AtomicReference<String> jarName = new AtomicReference<>();\n    ByteBuffer buf = null;\n    try {\n      buf = getByteBuffer(name, jarName);\n    } catch (Exception e) {\n      throw new ClassNotFoundException(\"class could not be loaded \" + name + (errors.isEmpty()? \"\": \"Some dynamic libraries could not be loaded: \"+ StrUtils.join(errors, '|')), e);\n    }\n    if (buf == null) throw new ClassNotFoundException(\"Class not found :\" + name);\n    ProtectionDomain defaultDomain = null;\n    //using the default protection domain, with no permissions\n    try {\n      defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + jarName.get()), (Certificate[]) null),\n          null);\n    } catch (MalformedURLException mue) {\n      throw new ClassNotFoundException(\"Unexpected exception \", mue);\n      //should not happen\n    }\n    log.info(\"Defining_class {} from runtime jar {} \", name, jarName);\n\n    result = defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n    classCache.put(name, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9aea0485ecacb6734c17da2d02569816c23a69c1"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["627e70d5711ab39d080a080f089685268525f54d"],"627e70d5711ab39d080a080f089685268525f54d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["9aea0485ecacb6734c17da2d02569816c23a69c1","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9aea0485ecacb6734c17da2d02569816c23a69c1","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"75237075d8425856bf4bbf52a6be4f9162b8187d":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"627e70d5711ab39d080a080f089685268525f54d":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["627e70d5711ab39d080a080f089685268525f54d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}