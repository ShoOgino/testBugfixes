{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private FixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private SparseFixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private SparseFixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new SparseFixedBitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","sourceOld":"  private SparseFixedBitSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n        int doc = docs.nextDoc();\n        if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new SparseFixedBitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.docs(acceptDocs, docs, DocsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.FLAG_NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bits, bits.approximateCardinality()), acceptDocs);\n  }\n\n","sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return new BitDocIdSet(bits, bits.approximateCardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfca18b7bfce32a543487fd4b0c11595177e908","date":1435655762,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(LeafReader,Bits).mjava","sourceNew":null,"sourceOld":"  private DocIdSet correctBits(LeafReader reader, Bits acceptDocs) throws IOException {\n    SparseFixedBitSet bits = new SparseFixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum docs = null;\n      while (true) {\n        BytesRef currTerm = termsEnum.next();\n        if (currTerm == null) {\n          break;\n        } else {\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          int doc = docs.nextDoc();\n          if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n            if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n              bits.set(doc);\n            } else {\n              int lastDoc = doc;\n              while (true) {\n                lastDoc = doc;\n                doc = docs.nextDoc();\n                if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n                  break;\n                }\n              }\n              bits.set(lastDoc);\n            }\n          }\n        }\n      }\n    }\n    return BitsFilteredDocIdSet.wrap(new BitDocIdSet(bits, bits.approximateCardinality()), acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dfca18b7bfce32a543487fd4b0c11595177e908"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["4dfca18b7bfce32a543487fd4b0c11595177e908"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","80c55596a764e2d397e982828e75fcac5ce430a0"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}