{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}