{"path":"src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","commits":[{"id":"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7","date":1101251614,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>AND_OPERATOR</code> mode terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator op) {\n    this.operator = op;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eae2d32290d25ce328133cbe25482b19103a895d","date":1201349517,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>AND_OPERATOR</code> mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator op) {\n    this.operator = op;\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>AND_OPERATOR</code> mode terms are considered to be in conjuction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator op) {\n    this.operator = op;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setDefaultOperator(Operator).mjava","sourceNew":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>AND_OPERATOR</code> mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator op) {\n    this.operator = op;\n  }\n\n","sourceOld":"  /**\n   * Sets the boolean operator of the QueryParser.\n   * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers\n   * are considered optional: for example <code>capital of Hungary</code> is equal to\n   * <code>capital OR of OR Hungary</code>.<br/>\n   * In <code>AND_OPERATOR</code> mode terms are considered to be in conjunction: the\n   * above mentioned query is parsed as <code>capital AND of AND Hungary</code>\n   */\n  public void setDefaultOperator(Operator op) {\n    this.operator = op;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eae2d32290d25ce328133cbe25482b19103a895d":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["eae2d32290d25ce328133cbe25482b19103a895d"]},"commit2Childs":{"eae2d32290d25ce328133cbe25482b19103a895d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["eae2d32290d25ce328133cbe25482b19103a895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}