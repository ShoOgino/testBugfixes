{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomSubRange(double,double).mjava","sourceNew":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","sourceOld":"  /** Returns new minStart and new length that is inside the range specified by the arguments. */\n  protected double[] randomSubRange(double boundStart, double boundLen) {\n    if (boundLen >= 3 && usually()) { // typical\n      // prefer integers for ease of debugability ... and prefer 1/16th of bound\n      int intBoundStart = (int) Math.ceil(boundStart);\n      int intBoundEnd = (int) (boundStart + boundLen);\n      int intBoundLen = intBoundEnd - intBoundStart;\n      int newLen = (int) randomGaussianMeanMax(intBoundLen / 16.0, intBoundLen);\n      int newStart = intBoundStart + randomInt(intBoundLen - newLen);\n      return new double[]{newStart, newLen};\n    } else { // (no int rounding)\n      double newLen = randomGaussianMeanMax(boundLen / 16, boundLen);\n      double newStart = boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));\n      return new double[]{newStart, newLen};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d19946da5b8a6505034a72adcb5bae87dd043ddd","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}