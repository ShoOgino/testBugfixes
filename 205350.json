{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[OpenBitSet]).mjava","sourceNew":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<Term,Integer>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      DocIdSetIterator bits = bb.get(i).iterator();\n      int ord;\n      while ((ord=bits.nextDoc())!=NO_MORE_DOCS) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","sourceOld":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<OpenBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<Term,Integer>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      DocIdSetIterator bits = bb.get(i).iterator();\n      int ord;\n      while ((ord=bits.nextDoc())!=NO_MORE_DOCS) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","sourceNew":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      DocIdSetIterator bits = bb.get(i).iterator();\n      int ord;\n      while ((ord=bits.nextDoc())!=NO_MORE_DOCS) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","sourceOld":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<Term,Integer>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      DocIdSetIterator bits = bb.get(i).iterator();\n      int ord;\n      while ((ord=bits.nextDoc())!=NO_MORE_DOCS) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","sourceNew":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      FixedBitSet bits = bb.get(i);\n      for (int ord = bits.nextSetBit(0); ord != -1; ord = ord + 1 >= bits.length() ? -1 : bits.nextSetBit(ord + 1)) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","sourceOld":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      DocIdSetIterator bits = bb.get(i).iterator();\n      int ord;\n      while ((ord=bits.nextDoc())!=NO_MORE_DOCS) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","sourceNew":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      FixedBitSet bits = bb.get(i);\n      for (int ord = bits.nextSetBit(0); ord != DocIdSetIterator.NO_MORE_DOCS; ord = ord + 1 >= bits.length() ? DocIdSetIterator.NO_MORE_DOCS : bits.nextSetBit(ord + 1)) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","sourceOld":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      FixedBitSet bits = bb.get(i);\n      for (int ord = bits.nextSetBit(0); ord != -1; ord = ord + 1 >= bits.length() ? -1 : bits.nextSetBit(ord + 1)) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#termGroups(LinkedHashMap[Term,Integer],ArrayList[FixedBitSet]).mjava","sourceNew":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      FixedBitSet bits = bb.get(i);\n      for (int ord = bits.nextSetBit(0); ord != DocIdSetIterator.NO_MORE_DOCS; ord = ord + 1 >= bits.length() ? DocIdSetIterator.NO_MORE_DOCS : bits.nextSetBit(ord + 1)) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","sourceOld":"  /** map each term to the single group that contains it */ \n  private HashMap<Term,Integer> termGroups(LinkedHashMap<Term,Integer> tord, ArrayList<FixedBitSet> bb) throws IOException {\n    HashMap<Term,Integer> tg = new HashMap<>();\n    Term[] t = tord.keySet().toArray(new Term[0]);\n    for (int i=0; i<bb.size(); i++) { // i is the group no.\n      FixedBitSet bits = bb.get(i);\n      for (int ord = bits.nextSetBit(0); ord != DocIdSetIterator.NO_MORE_DOCS; ord = ord + 1 >= bits.length() ? DocIdSetIterator.NO_MORE_DOCS : bits.nextSetBit(ord + 1)) {\n        tg.put(t[ord],i);\n      }\n    }\n    return tg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3995f83351082af8ae83bb017e63c56818fc1568"],"3b11b9d5eaf9707760ca5151530830a825197023":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["80c55596a764e2d397e982828e75fcac5ce430a0"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["3b11b9d5eaf9707760ca5151530830a825197023"],"3995f83351082af8ae83bb017e63c56818fc1568":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}