{"path":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(ReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(similarity, context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(ReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(similarity, context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(similarity, context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(similarity, context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(similarity, context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight);\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"c26f00b574427b55127e869b935845554afde1fa":["0f3cee3d20b0c786e6fca20539454262e29edcab","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}