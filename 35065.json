{"path":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#assertNext(Spans,int,int,int).mjava","commits":[{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#assertNext(Spans,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#tstNextSpans(Spans,int,int,int).mjava","sourceNew":"  /** \n   * Assert the next iteration from {@code spans} is a match\n   * from {@code start} to {@code end} in {@code doc}.\n   */\n  public static void assertNext(Spans spans, int doc, int start, int end) throws IOException {\n    if (spans.docID() >= doc) {\n      assertEquals(\"docId\", doc, spans.docID());\n    } else { // nextDoc needed before testing start/end\n      if (spans.docID() >= 0) {\n        assertEquals(\"nextStartPosition of previous doc\", Spans.NO_MORE_POSITIONS, spans.nextStartPosition());\n        assertEquals(\"endPosition of previous doc\", Spans.NO_MORE_POSITIONS, spans.endPosition());\n      }\n      assertEquals(\"nextDoc\", doc, spans.nextDoc());\n      if (doc != Spans.NO_MORE_DOCS) {\n        assertEquals(\"first startPosition\", -1, spans.startPosition());\n        assertEquals(\"first endPosition\", -1, spans.endPosition());\n      }\n    }\n    if (doc != Spans.NO_MORE_DOCS) {\n      assertEquals(\"nextStartPosition\", start, spans.nextStartPosition());\n      assertEquals(\"startPosition\", start, spans.startPosition());\n      assertEquals(\"endPosition\", end, spans.endPosition());\n    }\n  }\n\n","sourceOld":"  public static void tstNextSpans(Spans spans, int doc, int start, int end) throws IOException {\n    if (spans.docID() >= doc) {\n      assertEquals(\"docId\", doc, spans.docID());\n    } else { // nextDoc needed before testing start/end\n      if (spans.docID() >= 0) {\n        assertEquals(\"nextStartPosition of previous doc\", Spans.NO_MORE_POSITIONS, spans.nextStartPosition());\n        assertEquals(\"endPosition of previous doc\", Spans.NO_MORE_POSITIONS, spans.endPosition());\n      }\n      assertEquals(\"nextDoc\", doc, spans.nextDoc());\n      if (doc != Spans.NO_MORE_DOCS) {\n        assertEquals(\"first startPosition\", -1, spans.startPosition());\n        assertEquals(\"first endPosition\", -1, spans.endPosition());\n      }\n    }\n    if (doc != Spans.NO_MORE_DOCS) {\n      assertEquals(\"nextStartPosition\", start, spans.nextStartPosition());\n      assertEquals(\"startPosition\", start, spans.startPosition());\n      assertEquals(\"endPosition\", end, spans.endPosition());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}