{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29b583cbce9372fd05cd409c05faf7fa769875a","date":1335148235,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  DirectoryReader#open(IndexWriter, boolean)}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  @Override\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    return (IndexWriterConfig) super.setReaderTermsIndexDivisor(divisor);\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  DirectoryReader#open(IndexWriter, boolean)}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    return (IndexWriterConfig) super.setReaderTermsIndexDivisor(divisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    return (IndexWriterConfig) super.setReaderTermsIndexDivisor(divisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29b583cbce9372fd05cd409c05faf7fa769875a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a45bec74b98f6fc05f52770cfb425739e6563960":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["e29b583cbce9372fd05cd409c05faf7fa769875a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"e29b583cbce9372fd05cd409c05faf7fa769875a":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e29b583cbce9372fd05cd409c05faf7fa769875a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}