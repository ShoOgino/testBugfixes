{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final int skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = (int) (skipListWriter.writeSkip(freqOut)-freqStart);\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    // if (DEBUG) System.out.println(\"SPW: finishTerm seg=\" + segment + \" freqStart=\" + freqStart);\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == df;\n\n    final long skipOffset;\n    if (df >= skipMinimum) {\n      skipOffset = skipListWriter.writeSkip(freqOut)-freqStart;\n    } else {\n      skipOffset = -1;\n    }\n\n    pendingTerms.add(new PendingTerm(freqStart, proxStart, skipOffset));\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}