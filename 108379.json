{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","bugFix":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      while (ts.incrementToken()) {\n      }\n      ts.end();\n      ts.close();\n    }\n  }\n\n","bugFix":["99c9d8533c954f661481ae44273622957dbf572f","c83d6c4335f31cae14f625a222bc842f20073dcd","6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = _TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf19af846fb7335f7eeceea2361aac5078de36b","date":1417060595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLargeDocReliability().mjava","sourceNew":"  public void testLargeDocReliability() throws Exception {\n    int numIters = atLeast(1);\n    for (int i = 0; i < numIters; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","sourceOld":"  public void testLargeDocReliability() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      String s = TestUtil.randomUnicodeString(random(), 10000);\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        while (ts.incrementToken()) {\n        }\n        ts.end();\n      }\n    }\n  }\n\n","bugFix":["2cf19af846fb7335f7eeceea2361aac5078de36b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6613659748fe4411a7dcf85266e55db1f95f7315":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cf19af846fb7335f7eeceea2361aac5078de36b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["99c9d8533c954f661481ae44273622957dbf572f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["2cf19af846fb7335f7eeceea2361aac5078de36b"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["99c9d8533c954f661481ae44273622957dbf572f","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2cf19af846fb7335f7eeceea2361aac5078de36b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2cf19af846fb7335f7eeceea2361aac5078de36b":["71da933d30aea361ccc224d6544c451cbf49916d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}