{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat#testMergeCalledOnTwoFormats().mjava","commits":[{"id":"132f1575a9078b618f9e1c35ac94f06444006662","date":1475595294,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat#testMergeCalledOnTwoFormats().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingDocValueFormatWrapper dvf1 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n    MergeRecordingDocValueFormatWrapper dvf2 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        switch (field) {\n          case \"dv1\":\n          case \"dv2\":\n            return dvf1;\n\n          case \"dv3\":\n            return dvf2;\n\n          default:\n            return super.getDocValuesFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5));\n    doc.add(new NumericDocValuesField(\"dv2\", 42));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 8));\n    doc.add(new NumericDocValuesField(\"dv2\", 45));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"goodbye world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, dvf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"dv1\", \"dv2\")), new HashSet<>(dvf1.fieldNames));\n    assertEquals(1, dvf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"dv3\"), dvf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ac53c4fd0e957470aac83385735af32ea3db778","date":1475836279,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat#testMergeCalledOnTwoFormats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat#testMergeCalledOnTwoFormats().mjava","sourceNew":"  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingDocValueFormatWrapper dvf1 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n    MergeRecordingDocValueFormatWrapper dvf2 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        switch (field) {\n          case \"dv1\":\n          case \"dv2\":\n            return dvf1;\n\n          case \"dv3\":\n            return dvf2;\n\n          default:\n            return super.getDocValuesFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5));\n    doc.add(new NumericDocValuesField(\"dv2\", 42));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 8));\n    doc.add(new NumericDocValuesField(\"dv2\", 45));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"goodbye world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, dvf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"dv1\", \"dv2\")), new HashSet<>(dvf1.fieldNames));\n    assertEquals(1, dvf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"dv3\"), dvf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingDocValueFormatWrapper dvf1 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n    MergeRecordingDocValueFormatWrapper dvf2 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        switch (field) {\n          case \"dv1\":\n          case \"dv2\":\n            return dvf1;\n\n          case \"dv3\":\n            return dvf2;\n\n          default:\n            return super.getDocValuesFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5));\n    doc.add(new NumericDocValuesField(\"dv2\", 42));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 8));\n    doc.add(new NumericDocValuesField(\"dv2\", 45));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"goodbye world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, dvf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"dv1\", \"dv2\")), new HashSet<>(dvf1.fieldNames));\n    assertEquals(1, dvf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"dv3\"), dvf2.fieldNames);\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldDocValuesFormat#testMergeCalledOnTwoFormats().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeCalledOnTwoFormats() throws IOException {\n    MergeRecordingDocValueFormatWrapper dvf1 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n    MergeRecordingDocValueFormatWrapper dvf2 = new MergeRecordingDocValueFormatWrapper(TestUtil.getDefaultDocValuesFormat());\n\n    IndexWriterConfig iwc = new IndexWriterConfig();\n    iwc.setCodec(new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        switch (field) {\n          case \"dv1\":\n          case \"dv2\":\n            return dvf1;\n\n          case \"dv3\":\n            return dvf2;\n\n          default:\n            return super.getDocValuesFormatForField(field);\n        }\n      }\n    });\n\n    Directory directory = newDirectory();\n\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5));\n    doc.add(new NumericDocValuesField(\"dv2\", 42));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 8));\n    doc.add(new NumericDocValuesField(\"dv2\", 45));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"goodbye world\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n\n    iwriter.forceMerge(1, true);\n    iwriter.close();\n\n    assertEquals(1, dvf1.nbMergeCalls);\n    assertEquals(new HashSet<>(Arrays.asList(\"dv1\", \"dv2\")), new HashSet<>(dvf1.fieldNames));\n    assertEquals(1, dvf2.nbMergeCalls);\n    assertEquals(Collections.singletonList(\"dv3\"), dvf2.fieldNames);\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"132f1575a9078b618f9e1c35ac94f06444006662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ac53c4fd0e957470aac83385735af32ea3db778":["132f1575a9078b618f9e1c35ac94f06444006662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ac53c4fd0e957470aac83385735af32ea3db778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ac53c4fd0e957470aac83385735af32ea3db778"]},"commit2Childs":{"132f1575a9078b618f9e1c35ac94f06444006662":["7ac53c4fd0e957470aac83385735af32ea3db778"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["132f1575a9078b618f9e1c35ac94f06444006662","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7ac53c4fd0e957470aac83385735af32ea3db778":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}