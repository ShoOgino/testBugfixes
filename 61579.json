{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, StorableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33adea025f43af3243278587a46b8d9fd2e8ccf9","date":1525885077,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea32f6d2e2c9c129b68b8e35c8276025343e1c48","date":1533140931,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      if (docWriter.getSegmentInfo().getIndexSort() != null) {\n        final Sort indexSort = docWriter.getSegmentInfo().getIndexSort();\n        validateIndexSortDVType(indexSort, fp.fieldInfo.name, dvType);\n      }\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      if (docWriter.getSegmentInfo().getIndexSort() != null) {\n        final Sort indexSort = docWriter.getSegmentInfo().getIndexSort();\n        validateIndexSortDVType(indexSort, fp.fieldInfo.name, dvType);\n      }\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      if (docWriter.getSegmentInfo().getIndexSort() != null) {\n        final Sort indexSort = docWriter.getSegmentInfo().getIndexSort();\n        validateIndexSortDVType(indexSort, fp.fieldInfo.name, dvType);\n      }\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n\n    }\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(int,PerField,DocValuesType,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDocValue(PerField,DocValuesType,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(int docID, PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      if (docWriter.getSegmentInfo().getIndexSort() != null) {\n        final Sort indexSort = docWriter.getSegmentInfo().getIndexSort();\n        validateIndexSortDVType(indexSort, fp.fieldInfo.name, dvType);\n      }\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's doc value */\n  private void indexDocValue(PerField fp, DocValuesType dvType, IndexableField field) throws IOException {\n\n    if (fp.fieldInfo.getDocValuesType() == DocValuesType.NONE) {\n      // This is the first time we are seeing this field indexed with doc values, so we\n      // now record the DV type so that any future attempt to (illegally) change\n      // the DV type of this field, will throw an IllegalArgExc:\n      if (docWriter.getSegmentInfo().getIndexSort() != null) {\n        final Sort indexSort = docWriter.getSegmentInfo().getIndexSort();\n        validateIndexSortDVType(indexSort, fp.fieldInfo.name, dvType);\n      }\n      fieldInfos.globalFieldNumbers.setDocValuesType(fp.fieldInfo.number, fp.fieldInfo.name, dvType);\n    }\n\n    fp.fieldInfo.setDocValuesType(dvType);\n\n    int docID = docState.docID;\n\n    switch(dvType) {\n\n      case NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new NumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        if (field.numericValue() == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fp.fieldInfo.name + \"\\\": null value not allowed\");\n        }\n        ((NumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case BINARY:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new BinaryDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((BinaryDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      case SORTED:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n        \n      case SORTED_NUMERIC:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedNumericDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedNumericDocValuesWriter) fp.docValuesWriter).addValue(docID, field.numericValue().longValue());\n        break;\n\n      case SORTED_SET:\n        if (fp.docValuesWriter == null) {\n          fp.docValuesWriter = new SortedSetDocValuesWriter(fp.fieldInfo, bytesUsed);\n        }\n        ((SortedSetDocValuesWriter) fp.docValuesWriter).addValue(docID, field.binaryValue());\n        break;\n\n      default:\n        throw new AssertionError(\"unrecognized DocValues.Type: \" + dvType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["773bf150032d3ef6c95997a154fb914b82875cb8"],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["773bf150032d3ef6c95997a154fb914b82875cb8"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}