{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeQueryFacetsUnderLimits(ResponseBuilder).mjava","commits":[{"id":"8ff4734b6c86245e852fe8b6a286716d5e59d415","date":1410194063,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeQueryFacetsUnderLimits(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void removeQueryFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n    FacetInfo fi = rb._facetInfo;\n    Map<String, QueryFacet> query_facets = fi.queryFacets;\n    if (query_facets == null) {\n      return;\n    }\n    LinkedHashMap<String, QueryFacet> newQueryFacets = new LinkedHashMap<>();\n\n    // The\n    int minCount = rb.req.getParams().getInt(FacetParams.FACET_MINCOUNT, 0);\n    boolean replace = false;\n    for (Map.Entry<String, QueryFacet> ent : query_facets.entrySet()) {\n      if (ent.getValue().count >= minCount) {\n        newQueryFacets.put(ent.getKey(), ent.getValue());\n      } else {\n        log.trace(\"Removing facetQuery/key: \" + ent.getKey() + \"/\" + ent.getValue().toString() + \" mincount=\" + minCount);\n        replace = true;\n      }\n    }\n    if (replace) {\n      fi.queryFacets = newQueryFacets;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeQueryFacetsUnderLimits(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#removeQueryFacetsUnderLimits(ResponseBuilder).mjava","sourceNew":"  private void removeQueryFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n    FacetInfo fi = rb._facetInfo;\n    Map<String, QueryFacet> query_facets = fi.queryFacets;\n    if (query_facets == null) {\n      return;\n    }\n    LinkedHashMap<String, QueryFacet> newQueryFacets = new LinkedHashMap<>();\n\n    // The\n    int minCount = rb.req.getParams().getInt(FacetParams.FACET_MINCOUNT, 0);\n    boolean replace = false;\n    for (Map.Entry<String, QueryFacet> ent : query_facets.entrySet()) {\n      if (ent.getValue().count >= minCount) {\n        newQueryFacets.put(ent.getKey(), ent.getValue());\n      } else {\n        if (log.isTraceEnabled()) {\n          log.trace(\"Removing facetQuery/key: {}/{} mincount={}\", ent.getKey(), ent.getValue(), minCount);\n        }\n        replace = true;\n      }\n    }\n    if (replace) {\n      fi.queryFacets = newQueryFacets;\n    }\n  }\n\n","sourceOld":"  private void removeQueryFacetsUnderLimits(ResponseBuilder rb) {\n    if (rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return;\n    }\n    FacetInfo fi = rb._facetInfo;\n    Map<String, QueryFacet> query_facets = fi.queryFacets;\n    if (query_facets == null) {\n      return;\n    }\n    LinkedHashMap<String, QueryFacet> newQueryFacets = new LinkedHashMap<>();\n\n    // The\n    int minCount = rb.req.getParams().getInt(FacetParams.FACET_MINCOUNT, 0);\n    boolean replace = false;\n    for (Map.Entry<String, QueryFacet> ent : query_facets.entrySet()) {\n      if (ent.getValue().count >= minCount) {\n        newQueryFacets.put(ent.getKey(), ent.getValue());\n      } else {\n        log.trace(\"Removing facetQuery/key: \" + ent.getKey() + \"/\" + ent.getValue().toString() + \" mincount=\" + minCount);\n        replace = true;\n      }\n    }\n    if (replace) {\n      fi.queryFacets = newQueryFacets;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}