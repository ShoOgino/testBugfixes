{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForce(String,LightAutomaton,int).mjava","commits":[{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForce(String,LightAutomaton,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForce(String,Automaton,int).mjava","sourceNew":"  private void assertBruteForce(String input, LightAutomaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertBruteForce(String input, Automaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForce(String,Automaton,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertBruteForce(String,LightAutomaton,int).mjava","sourceNew":"  private void assertBruteForce(String input, Automaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertBruteForce(String input, LightAutomaton dfa, int distance) {\n    CharacterRunAutomaton ra = new CharacterRunAutomaton(dfa);\n    int maxLen = input.length() + distance + 1;\n    int maxNum = (int) Math.pow(2, maxLen);\n    for (int i = 0; i < maxNum; i++) {\n      String encoded = Integer.toString(i, 2);\n      boolean accepts = ra.run(encoded);\n      if (accepts) {\n        assertTrue(getDistance(input, encoded) <= distance);\n      } else {\n        assertTrue(getDistance(input, encoded) > distance);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2de8b489026711e8edde133418a7cacfd2ce4d3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}