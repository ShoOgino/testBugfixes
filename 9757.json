{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.bytesPerDoc = packedBytesLength + Integer.BYTES;\n    this.packedValueLength = packedBytesLength;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n  }\n\n","sourceOld":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","sourceNew":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.bytesPerDoc = packedBytesLength + Integer.BYTES;\n    this.packedValueLength = packedBytesLength;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n    this.pointValue = new OfflinePointValue(onHeapBuffer, packedValueLength);\n  }\n\n","sourceOld":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.bytesPerDoc = packedBytesLength + Integer.BYTES;\n    this.packedValueLength = packedBytesLength;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(BKDConfig,Directory,String,long,long,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","sourceNew":"  public OfflinePointReader(BKDConfig config, Directory tempDir, String tempFileName, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.config = config;\n\n    if ((start + length) * config.bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + config.bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < config.bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + config.bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / config.bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*config.bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * config.bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n    this.pointValue = new OfflinePointValue(config, onHeapBuffer);\n  }\n\n","sourceOld":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.bytesPerDoc = packedBytesLength + Integer.BYTES;\n    this.packedValueLength = packedBytesLength;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n    this.pointValue = new OfflinePointValue(onHeapBuffer, packedValueLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}