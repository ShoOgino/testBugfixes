{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Direct8#get(int,long[],int,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Direct8#get(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int get(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    assert off + len <= arr.length;\n\n    final int gets = Math.min(valueCount - index, len);\n    for (int i = index, o = off, end = index + gets; i < end; ++i, ++o) {\n      arr[o] = values[i] & 0xFFL;\n    }\n    return gets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Direct8#get(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int get(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    assert off + len <= arr.length;\n\n    final int gets = Math.min(valueCount - index, len);\n    for (int i = index, o = off, end = index + gets; i < end; ++i, ++o) {\n      arr[o] = values[i] & 0xFFL;\n    }\n    return gets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Direct8#get(int,long[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int get(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    assert off + len <= arr.length;\n\n    final int gets = Math.min(valueCount - index, len);\n    for (int i = index, o = off, end = index + gets; i < end; ++i, ++o) {\n      arr[o] = values[i] & 0xFFL;\n    }\n    return gets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["55110eb60c5105294fc2ae7912d82b750865aa58"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55110eb60c5105294fc2ae7912d82b750865aa58":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}