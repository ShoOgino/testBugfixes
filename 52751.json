{"path":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","commits":[{"id":"e3e42c6daa1d11955286faa2eb09179adf5a8ad7","date":1424191709,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertSame(postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertSame(docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6404b8725cd3df3fda5f1c19a46cac85e49f070c","date":1427911851,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","sourceNew":"  public void testPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertReused(\"foo\", postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertReused(\"foo\", docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly2.freq() == 1 || docsOnly2.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertSame(postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertSame(docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db32fd0015139a1e3e1703a5d5e6b560c5adb1ca","date":1427913177,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","sourceNew":"  public void testPostingsEnumPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertReused(\"foo\", postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertReused(\"foo\", docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly2.freq() == 1 || docsOnly2.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertReused(\"foo\", postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertReused(\"foo\", docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly2.freq() == 1 || docsOnly2.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsEnum#testPositions().mjava","sourceNew":"  public void testPostingsEnumPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertReused(\"foo\", postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings2.docID());\n    assertEquals(0, postings2.nextDoc());\n    assertEquals(2, postings2.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings2.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertReused(\"foo\", docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly2.freq() == 1 || docsOnly2.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertReused(\"foo\", docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum2.docID());\n    assertEquals(0, docsAndPositionsEnum2.nextDoc());\n    assertEquals(2, docsAndPositionsEnum2.freq());\n    assertEquals(0, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(1, docsAndPositionsEnum2.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum2.startOffset());\n    assertEquals(-1, docsAndPositionsEnum2.endOffset());\n    assertNull(docsAndPositionsEnum2.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum2.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPositions() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n    });\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new TextField(\"foo\", \"bar bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    DirectoryReader reader = DirectoryReader.open(iw, false);\n    \n    // sugar method (FREQS)\n    PostingsEnum postings = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"));\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // termsenum reuse (FREQS)\n    TermsEnum termsEnum = getOnlySegmentReader(reader).terms(\"foo\").iterator(null);\n    termsEnum.seekExact(new BytesRef(\"bar\"));\n    PostingsEnum postings2 = termsEnum.postings(null, postings);\n    assertNotNull(postings2);\n    assertSame(postings, postings2);\n    // and it had better work\n    assertEquals(-1, postings.docID());\n    assertEquals(0, postings.nextDoc());\n    assertEquals(2, postings.freq());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, postings.nextDoc());\n    \n    // asking for docs only: ok\n    PostingsEnum docsOnly = termsEnum.postings(null, null, PostingsEnum.NONE);\n    assertEquals(-1, docsOnly.docID());\n    assertEquals(0, docsOnly.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly.nextDoc());\n    // reuse that too\n    PostingsEnum docsOnly2 = termsEnum.postings(null, docsOnly, PostingsEnum.NONE);\n    assertNotNull(docsOnly2);\n    assertSame(docsOnly, docsOnly2);\n    // and it had better work\n    assertEquals(-1, docsOnly2.docID());\n    assertEquals(0, docsOnly2.nextDoc());\n    // we don't define what it is, but if its something else, we should look into it?\n    assertTrue(docsOnly.freq() == 1 || docsOnly.freq() == 2);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsOnly2.nextDoc());\n    \n    // asking for positions, ok\n    PostingsEnum docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.POSITIONS);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // now reuse the positions\n    PostingsEnum docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.POSITIONS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    // payloads, offsets, etc don't cause an error if they aren't there\n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.PAYLOADS);\n    assertNotNull(docsAndPositionsEnum);\n    // but make sure they work\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.PAYLOADS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.OFFSETS);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    // reuse\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.OFFSETS);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    docsAndPositionsEnum = getOnlySegmentReader(reader).postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n    assertNotNull(docsAndPositionsEnum);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    docsAndPositionsEnum2 = termsEnum.postings(null, docsAndPositionsEnum, PostingsEnum.ALL);\n    assertSame(docsAndPositionsEnum, docsAndPositionsEnum2);\n    assertEquals(-1, docsAndPositionsEnum.docID());\n    assertEquals(0, docsAndPositionsEnum.nextDoc());\n    assertEquals(2, docsAndPositionsEnum.freq());\n    assertEquals(0, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(1, docsAndPositionsEnum.nextPosition());\n    assertEquals(-1, docsAndPositionsEnum.startOffset());\n    assertEquals(-1, docsAndPositionsEnum.endOffset());\n    assertNull(docsAndPositionsEnum.getPayload());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsAndPositionsEnum.nextDoc());\n    \n    iw.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"db32fd0015139a1e3e1703a5d5e6b560c5adb1ca":["6404b8725cd3df3fda5f1c19a46cac85e49f070c"],"6404b8725cd3df3fda5f1c19a46cac85e49f070c":["e3e42c6daa1d11955286faa2eb09179adf5a8ad7"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e3e42c6daa1d11955286faa2eb09179adf5a8ad7","db32fd0015139a1e3e1703a5d5e6b560c5adb1ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3e42c6daa1d11955286faa2eb09179adf5a8ad7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b4e3cd382d0d075a0f1725649c084bb6510c483"]},"commit2Childs":{"db32fd0015139a1e3e1703a5d5e6b560c5adb1ca":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6404b8725cd3df3fda5f1c19a46cac85e49f070c":["db32fd0015139a1e3e1703a5d5e6b560c5adb1ca"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3e42c6daa1d11955286faa2eb09179adf5a8ad7"],"e3e42c6daa1d11955286faa2eb09179adf5a8ad7":["6404b8725cd3df3fda5f1c19a46cac85e49f070c","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}