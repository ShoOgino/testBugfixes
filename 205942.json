{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","date":1290598569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(makeOneMerge(segmentInfos, segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */\n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38a62612cfa4e104080d89d7751a8f1a258ac335":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["3bb13258feba31ab676502787ab2e1779f129b7a"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","38a62612cfa4e104080d89d7751a8f1a258ac335"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"38a62612cfa4e104080d89d7751a8f1a258ac335":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["38a62612cfa4e104080d89d7751a8f1a258ac335","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["34ce7c842452c79b12c45a8feb64e4597c7110e8","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}