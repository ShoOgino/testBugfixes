{"path":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilterCachingPolicy.CacheOnLargeSegments#shouldCache(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":"    @Override\n    public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","sourceOld":"    @Override\n    public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b","date":1430252234,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"    @Override\n    public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      if (topLevelContext.reader().maxDoc() < minIndexSize) {\n        return false;\n      }\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","sourceOld":"    @Override\n    public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.MinSegmentSizePredicate#test(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#shouldCache(Query,LeafReaderContext).mjava","sourceNew":"    @Override\n    public boolean test(LeafReaderContext context) {\n      final int maxDoc = context.reader().maxDoc();\n      if (maxDoc < minSize) {\n        return false;\n      }\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","sourceOld":"    @Override\n    public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      if (topLevelContext.reader().maxDoc() < minIndexSize) {\n        return false;\n      }\n      final float sizeRatio = (float) context.reader().maxDoc() / topLevelContext.reader().maxDoc();\n      return sizeRatio >= minSizeRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"aac61ee5b4492f174e60bd54939aba9539906edf":["6a8b15d9e1f79336cd1cd8018a8f636616e9a76b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aac61ee5b4492f174e60bd54939aba9539906edf"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aac61ee5b4492f174e60bd54939aba9539906edf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6a8b15d9e1f79336cd1cd8018a8f636616e9a76b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b":["aac61ee5b4492f174e60bd54939aba9539906edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}