{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","commits":[{"id":"0d8448be43e6bd7d69aa0227187fca146a1f2262","date":1338393518,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","pathOld":"/dev/null","sourceNew":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","date":1354906497,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","sourceNew":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }  \n\n","sourceOld":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","sourceNew":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }  \n\n","sourceOld":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","sourceNew":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = DirectoryReader.open(dir);\n    WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n    \n    {        \n      Term[] terms = { \n          new Term(\"numbers\", \"one\"),\n          new Term(\"numbers\", \"hun\"),\n          new Term(\"numbers\", \"dred\"),\n          new Term(\"numbers\", \"eight\"),\n          new Term(\"numbers\", \"y\"),\n          new Term(\"numbers\", \"eight\"),\n      };\n      wbsp.setMaxChanges(3);\n      wbsp.setMaxCombineWordLength(20);\n      wbsp.setMinSuggestionFrequency(1);\n      CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n      Assert.assertTrue(cs.length==5);\n      \n      Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n      Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      \n      Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n      Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n      Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n      Assert.assertTrue(cs[1].suggestion.score==1);        \n      \n      Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n      Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n      Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n      Assert.assertTrue(cs[2].suggestion.score==1);\n      \n      for(int i=3 ; i<5 ; i++) {\n        Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[i].suggestion.score==2);\n        Assert.assertTrue(\n            (cs[i].originalTermIndexes[0]==1 && \n            cs[i].originalTermIndexes[1]==2 && \n            cs[i].originalTermIndexes[2]==3 && \n            cs[i].suggestion.string.equals(\"hundredeight\")) ||\n            (cs[i].originalTermIndexes[0]==3 &&\n            cs[i].originalTermIndexes[1]==4 &&\n            cs[i].originalTermIndexes[2]==5 &&\n            cs[i].suggestion.string.equals(\"eightyeight\"))\n            );\n      }     \n      \n      cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n      Assert.assertTrue(cs.length==2);\n      Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n      Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      \n      Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n      Assert.assertTrue(cs[1].suggestion.score==2);\n      Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n      Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n      Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n      Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n    }\n    ir.close();\n  }  \n\n","sourceOld":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestWordBreakSpellChecker#testCombiningWords().mjava","sourceNew":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = DirectoryReader.open(dir);\n    WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n    \n    {        \n      Term[] terms = { \n          new Term(\"numbers\", \"one\"),\n          new Term(\"numbers\", \"hun\"),\n          new Term(\"numbers\", \"dred\"),\n          new Term(\"numbers\", \"eight\"),\n          new Term(\"numbers\", \"y\"),\n          new Term(\"numbers\", \"eight\"),\n      };\n      wbsp.setMaxChanges(3);\n      wbsp.setMaxCombineWordLength(20);\n      wbsp.setMinSuggestionFrequency(1);\n      CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n      Assert.assertTrue(cs.length==5);\n      \n      Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n      Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      \n      Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n      Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n      Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n      Assert.assertTrue(cs[1].suggestion.score==1);        \n      \n      Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n      Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n      Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n      Assert.assertTrue(cs[2].suggestion.score==1);\n      \n      for(int i=3 ; i<5 ; i++) {\n        Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[i].suggestion.score==2);\n        Assert.assertTrue(\n            (cs[i].originalTermIndexes[0]==1 && \n            cs[i].originalTermIndexes[1]==2 && \n            cs[i].originalTermIndexes[2]==3 && \n            cs[i].suggestion.string.equals(\"hundredeight\")) ||\n            (cs[i].originalTermIndexes[0]==3 &&\n            cs[i].originalTermIndexes[1]==4 &&\n            cs[i].originalTermIndexes[2]==5 &&\n            cs[i].suggestion.string.equals(\"eightyeight\"))\n            );\n      }     \n      \n      cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n      Assert.assertTrue(cs.length==2);\n      Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n      Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n      Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n      Assert.assertTrue(cs[0].suggestion.score==1);\n      \n      Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n      Assert.assertTrue(cs[1].suggestion.score==2);\n      Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n      Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n      Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n      Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n    }\n    ir.close();\n  }  \n\n","sourceOld":"  public void testCombiningWords() throws Exception {\n    IndexReader ir = null;\n    try {\n      ir = DirectoryReader.open(dir);\n      WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n      \n      {        \n        Term[] terms = { \n            new Term(\"numbers\", \"one\"),\n            new Term(\"numbers\", \"hun\"),\n            new Term(\"numbers\", \"dred\"),\n            new Term(\"numbers\", \"eight\"),\n            new Term(\"numbers\", \"y\"),\n            new Term(\"numbers\", \"eight\"),\n        };\n        wbsp.setMaxChanges(3);\n        wbsp.setMaxCombineWordLength(20);\n        wbsp.setMinSuggestionFrequency(1);\n        CombineSuggestion[] cs = wbsp.suggestWordCombinations(terms, 10, ir, SuggestMode.SUGGEST_ALWAYS);\n        Assert.assertTrue(cs.length==5);\n        \n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0]==3);\n        Assert.assertTrue(cs[1].originalTermIndexes[1]==4);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"eighty\"));\n        Assert.assertTrue(cs[1].suggestion.score==1);        \n        \n        Assert.assertTrue(cs[2].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[2].originalTermIndexes[0]==4);\n        Assert.assertTrue(cs[2].originalTermIndexes[1]==5);\n        Assert.assertTrue(cs[2].suggestion.string.equals(\"yeight\"));\n        Assert.assertTrue(cs[2].suggestion.score==1);\n        \n        for(int i=3 ; i<5 ; i++) {\n          Assert.assertTrue(cs[i].originalTermIndexes.length==3);\n          Assert.assertTrue(cs[i].suggestion.score==2);\n          Assert.assertTrue(\n              (cs[i].originalTermIndexes[0]==1 && \n               cs[i].originalTermIndexes[1]==2 && \n               cs[i].originalTermIndexes[2]==3 && \n               cs[i].suggestion.string.equals(\"hundredeight\")) ||\n              (cs[i].originalTermIndexes[0]==3 &&\n               cs[i].originalTermIndexes[1]==4 &&\n               cs[i].originalTermIndexes[2]==5 &&\n               cs[i].suggestion.string.equals(\"eightyeight\"))\n         );\n        }     \n        \n        cs = wbsp.suggestWordCombinations(terms, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n        Assert.assertTrue(cs.length==2);\n        Assert.assertTrue(cs[0].originalTermIndexes.length==2);\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[0]==1);\n        Assert.assertTrue(cs[0].originalTermIndexes[1]==2);\n        Assert.assertTrue(cs[0].suggestion.string.equals(\"hundred\"));\n        Assert.assertTrue(cs[0].suggestion.score==1);\n        \n        Assert.assertTrue(cs[1].originalTermIndexes.length==3);\n        Assert.assertTrue(cs[1].suggestion.score==2);\n        Assert.assertTrue(cs[1].originalTermIndexes[0] == 1);\n        Assert.assertTrue(cs[1].originalTermIndexes[1] == 2);\n        Assert.assertTrue(cs[1].originalTermIndexes[2] == 3);\n        Assert.assertTrue(cs[1].suggestion.string.equals(\"hundredeight\"));\n      }\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ir.close(); } catch(Exception e1) { }\n    }    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","a56958d7f71a28824f20031ffbb2e13502a0274e"],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0d8448be43e6bd7d69aa0227187fca146a1f2262","efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}