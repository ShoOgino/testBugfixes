{"path":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).abort();\n\n      pendingMerges.clear();\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).abort();\n\n      runningMerges.clear();\n      mergingSegments.clear();\n      notifyAll();\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971","c507fbcc682939239c013568bca7ca40ea6bd844"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c507fbcc682939239c013568bca7ca40ea6bd844","date":1191683563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n      }\n      pendingMerges.clear();\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n      runningMerges.clear();\n\n      mergingSegments.clear();\n      notifyAll();\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).abort();\n\n      pendingMerges.clear();\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).abort();\n\n      runningMerges.clear();\n      mergingSegments.clear();\n      notifyAll();\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n      }\n      pendingMerges.clear();\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n      runningMerges.clear();\n\n      mergingSegments.clear();\n      notifyAll();\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      acquireRead();\n      releaseRead();\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0)\n        doWait();\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n        }\n      }\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a8e7be7cf2c1504c03b12bc66da2d84cfd3f055","date":1245791296,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      acquireRead();\n      releaseRead();\n      while(pendingMerges.size() > 0 || runningMerges.size() > 0)\n        doWait();\n      assert 0 == mergingSegments.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["c507fbcc682939239c013568bca7ca40ea6bd844"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4a8e7be7cf2c1504c03b12bc66da2d84cfd3f055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2586f96f60332eb97ecd2934b0763791462568b2":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"c507fbcc682939239c013568bca7ca40ea6bd844":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"4a8e7be7cf2c1504c03b12bc66da2d84cfd3f055":["2586f96f60332eb97ecd2934b0763791462568b2"]},"commit2Childs":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["2586f96f60332eb97ecd2934b0763791462568b2"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["c507fbcc682939239c013568bca7ca40ea6bd844"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c507fbcc682939239c013568bca7ca40ea6bd844":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"2586f96f60332eb97ecd2934b0763791462568b2":["4a8e7be7cf2c1504c03b12bc66da2d84cfd3f055"],"4a8e7be7cf2c1504c03b12bc66da2d84cfd3f055":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}