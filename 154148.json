{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8a6eb687a72f6634899fd5ee64bf61a19a45d74","date":1327669870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @return\n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287","date":1341260923,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @throws IOException \n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","date":1344892928,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof SafeStopThread) {\n          if (((SafeStopThread) Thread.currentThread()).isClosed()) {\n            throw new RuntimeException(\"Interrupted\");\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   * \n   * @param operation\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe","date":1408716126,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        retryDelay(i);\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (Thread.currentThread() instanceof ClosableThread) {\n          if (((ClosableThread) Thread.currentThread()).isClosed()) {\n            throw exception;\n          }\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#[T]_retryOperation(ZkOperation).mjava","sourceNew":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        if (i > 0 && isClosed()) {\n          throw new AlreadyClosedException();\n        }\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","sourceOld":"  /**\n   * Perform the given operation, retrying if the connection fails\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T retryOperation(ZkOperation operation)\n      throws KeeperException, InterruptedException {\n    KeeperException exception = null;\n    for (int i = 0; i < retryCount; i++) {\n      try {\n        return (T) operation.execute();\n      } catch (KeeperException.ConnectionLossException e) {\n        if (exception == null) {\n          exception = e;\n        }\n        if (Thread.currentThread().isInterrupted()) {\n          Thread.currentThread().interrupt();\n          throw new InterruptedException();\n        }\n        if (i != retryCount -1) {\n          retryDelay(i);\n        }\n      }\n    }\n    throw exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["a8a6eb687a72f6634899fd5ee64bf61a19a45d74"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a8a6eb687a72f6634899fd5ee64bf61a19a45d74"],"a8a6eb687a72f6634899fd5ee64bf61a19a45d74":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a8a6eb687a72f6634899fd5ee64bf61a19a45d74"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"a8a6eb687a72f6634899fd5ee64bf61a19a45d74":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a8a6eb687a72f6634899fd5ee64bf61a19a45d74","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"9437b54f12fcb3d7a2ca7ad4ddc6f1dfb6ddc287":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","b05c56a41b733e02a189c48895922b5bd8c7f3d1","fd92b8bcc88e969302510acf77bd6970da3994c4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}