{"path":"lucene/core/src/test/org/apache/lucene/store/TestBufferedChecksum#testRandom().mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedChecksum#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    Checksum c1 = new CRC32();\n    Checksum c2 = new BufferedChecksum(new CRC32());\n    int iterations = atLeast(10000);\n    for (int i = 0; i < iterations; i++) {\n      switch(random().nextInt(4)) {\n        case 0:\n          // update(byte[], int, int)\n          int length = random().nextInt(1024);\n          byte bytes[] = new byte[length];\n          random().nextBytes(bytes);\n          c1.update(bytes, 0, bytes.length);\n          c2.update(bytes, 0, bytes.length);\n          break;\n        case 1:\n          // update(int)\n          int b = random().nextInt(256);\n          c1.update(b);\n          c2.update(b);\n          break;\n        case 2:\n          // reset()\n          c1.reset();\n          c2.reset();\n          break;\n        case 3:\n          // getValue()\n          assertEquals(c1.getValue(), c2.getValue());\n          break;\n      }\n    }\n    assertEquals(c1.getValue(), c2.getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedChecksum#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    Checksum c1 = new CRC32();\n    Checksum c2 = new BufferedChecksum(new CRC32());\n    int iterations = atLeast(10000);\n    for (int i = 0; i < iterations; i++) {\n      switch(random().nextInt(4)) {\n        case 0:\n          // update(byte[], int, int)\n          int length = random().nextInt(1024);\n          byte bytes[] = new byte[length];\n          random().nextBytes(bytes);\n          c1.update(bytes, 0, bytes.length);\n          c2.update(bytes, 0, bytes.length);\n          break;\n        case 1:\n          // update(int)\n          int b = random().nextInt(256);\n          c1.update(b);\n          c2.update(b);\n          break;\n        case 2:\n          // reset()\n          c1.reset();\n          c2.reset();\n          break;\n        case 3:\n          // getValue()\n          assertEquals(c1.getValue(), c2.getValue());\n          break;\n      }\n    }\n    assertEquals(c1.getValue(), c2.getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f3b037cd083286b2af89f96e768f85dcd8072d6"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}