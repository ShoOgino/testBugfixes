{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":"    @Override\n    public boolean onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","bugFix":["c32a8448145a74a8902798f2e63e322827757ff2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3f504512a03d978990cbff30db0522b354e846db"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}