{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","commits":[{"id":"e6eff3a1335608b62ce74c7f052b277baedb721e","date":1382897865,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    if (score) {\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new CustomScoreQuery(strategy.makeQuery(args), new FunctionQuery(valueSource));\n    } else {\n      //strategy.makeQuery() could potentially score (isn't well defined) so instead we call\n      // makeFilter() and wrap\n\n      Filter filter = strategy.makeFilter(args);\n      if (filter instanceof QueryWrapperFilter) {\n        return ((QueryWrapperFilter)filter).getQuery();\n      } else {\n        return new ConstantScoreQuery(filter);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","sourceNew":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new BooleanQuery.Builder()\n          .add(new FunctionQuery(valueSource), BooleanClause.Occur.MUST)//matches everything and provides score\n          .add(filterQuery, BooleanClause.Occur.FILTER)//filters (score isn't used)\n          .build();\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","sourceOld":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    if (score) {\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new CustomScoreQuery(strategy.makeQuery(args), new FunctionQuery(valueSource));\n    } else {\n      //strategy.makeQuery() could potentially score (isn't well defined) so instead we call\n      // makeFilter() and wrap\n\n      Filter filter = strategy.makeFilter(args);\n      if (filter instanceof QueryWrapperFilter) {\n        return ((QueryWrapperFilter)filter).getQuery();\n      } else {\n        return new ConstantScoreQuery(filter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","sourceNew":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      DoubleValuesSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new FunctionScoreQuery(filterQuery, valueSource);\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","sourceOld":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new BooleanQuery.Builder()\n          .add(new FunctionQuery(valueSource), BooleanClause.Occur.MUST)//matches everything and provides score\n          .add(filterQuery, BooleanClause.Occur.FILTER)//filters (score isn't used)\n          .build();\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","sourceNew":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      DoubleValuesSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new FunctionScoreQuery(filterQuery, valueSource);\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","sourceOld":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new BooleanQuery.Builder()\n          .add(new FunctionQuery(valueSource), BooleanClause.Occur.MUST)//matches everything and provides score\n          .add(filterQuery, BooleanClause.Occur.FILTER)//filters (score isn't used)\n          .build();\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialFileQueryMaker#makeQueryFromShape(Shape).mjava","sourceNew":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      DoubleValuesSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new FunctionScoreQuery(filterQuery, valueSource);\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","sourceOld":"  protected Query makeQueryFromShape(Shape shape) {\n    SpatialArgs args = new SpatialArgs(operation, shape);\n    if (!Double.isNaN(distErrPct))\n      args.setDistErrPct(distErrPct);\n\n    Query filterQuery = strategy.makeQuery(args);\n    if (score) {\n      //wrap with distance computing query\n      ValueSource valueSource = strategy.makeDistanceValueSource(shape.getCenter());\n      return new BooleanQuery.Builder()\n          .add(new FunctionQuery(valueSource), BooleanClause.Occur.MUST)//matches everything and provides score\n          .add(filterQuery, BooleanClause.Occur.FILTER)//filters (score isn't used)\n          .build();\n    } else {\n      return filterQuery; // assume constant scoring\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["672b198fc3dce868916c727917cae58c2906763d"],"e6eff3a1335608b62ce74c7f052b277baedb721e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"672b198fc3dce868916c727917cae58c2906763d":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["672b198fc3dce868916c727917cae58c2906763d","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["672b198fc3dce868916c727917cae58c2906763d","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e6eff3a1335608b62ce74c7f052b277baedb721e":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}