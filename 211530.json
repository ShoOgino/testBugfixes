{"path":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","pathOld":"/dev/null","sourceNew":"  public static int indexDocs(SolrClient masterClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    masterClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = random.nextInt(100);\n    log.info(\"Indexing {} test docs\", nDocs);\n    if (nDocs == 0) {\n      return 0;\n    }\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    masterClient.add(collectionName, docs);\n    masterClient.commit(collectionName);\n    return nDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a","date":1467009525,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","sourceNew":"  public static int indexDocs(SolrClient masterClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    masterClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = TestUtil.nextInt(random, 1, 100);\n    log.info(\"Indexing {} test docs\", nDocs);\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    masterClient.add(collectionName, docs);\n    masterClient.commit(collectionName);\n    return nDocs;\n  }\n\n","sourceOld":"  public static int indexDocs(SolrClient masterClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    masterClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = random.nextInt(100);\n    log.info(\"Indexing {} test docs\", nDocs);\n    if (nDocs == 0) {\n      return 0;\n    }\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    masterClient.add(collectionName, docs);\n    masterClient.commit(collectionName);\n    return nDocs;\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","pathOld":"/dev/null","sourceNew":"  public static int indexDocs(SolrClient masterClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    masterClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = TestUtil.nextInt(random, 1, 100);\n    log.info(\"Indexing {} test docs\", nDocs);\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    masterClient.add(collectionName, docs);\n    masterClient.commit(collectionName);\n    return nDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/BackupRestoreUtils#indexDocs(SolrClient,String,long).mjava","sourceNew":"  public static int indexDocs(SolrClient leaderClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    leaderClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = TestUtil.nextInt(random, 1, 100);\n    log.info(\"Indexing {} test docs\", nDocs);\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    leaderClient.add(collectionName, docs);\n    leaderClient.commit(collectionName);\n    return nDocs;\n  }\n\n","sourceOld":"  public static int indexDocs(SolrClient masterClient, String collectionName, long docsSeed) throws IOException, SolrServerException {\n    masterClient.deleteByQuery(collectionName, \"*:*\");\n\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int nDocs = TestUtil.nextInt(random, 1, 100);\n    log.info(\"Indexing {} test docs\", nDocs);\n\n    List<SolrInputDocument> docs = new ArrayList<>(nDocs);\n    for (int i = 0; i < nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"name\", \"name = \" + i);\n      docs.add(doc);\n    }\n    masterClient.add(collectionName, docs);\n    masterClient.commit(collectionName);\n    return nDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a"],"f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["f1cfc0e9e10377413ffd5dc8cef1b50f93e4974a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}