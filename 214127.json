{"path":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,TopDocs).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,TopDocs).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, TopDocs topDocs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[topDocs.scoreDocs.length];\n      for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n        int docid = topDocs.scoreDocs[i].doc;\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[topDocs.scoreDocs.length];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,TopDocs).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, TopDocs topDocs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[topDocs.scoreDocs.length];\n      for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n        int docid = topDocs.scoreDocs[i].doc;\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[topDocs.scoreDocs.length];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"603175ca08914b73fa328e1ac07c772f8103ecd0","date":1363642166,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#getUniqueKeys(SolrIndexSearcher,TopDocs).mjava","sourceNew":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"  /** Retrieves the unique keys for the topdocs to key the results */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, TopDocs topDocs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String uniqueKeys[] = new String[topDocs.scoreDocs.length];\n      for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n        int docid = topDocs.scoreDocs[i].doc;\n        StoredDocument doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[topDocs.scoreDocs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["603175ca08914b73fa328e1ac07c772f8103ecd0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","603175ca08914b73fa328e1ac07c772f8103ecd0"],"603175ca08914b73fa328e1ac07c772f8103ecd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}