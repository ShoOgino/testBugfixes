{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","commits":[{"id":"ec67ff97c3c57929891e4aa3bfba1094ef497d68","date":1379085761,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(sourceText);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f38d01d46ec13a9d72d6e3c8dabc8bd9f54c3dd2","date":1379091773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96f6862293dd05eceeb03760bbb8ffcb604c6e80","date":1379186543,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","sourceNew":"  /**\n   * Compiles the given expression with the specified parent classloader\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(ClassLoader parent) throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(parent)\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f38d01d46ec13a9d72d6e3c8dabc8bd9f54c3dd2":["ec67ff97c3c57929891e4aa3bfba1094ef497d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["f38d01d46ec13a9d72d6e3c8dabc8bd9f54c3dd2"],"ec67ff97c3c57929891e4aa3bfba1094ef497d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f38d01d46ec13a9d72d6e3c8dabc8bd9f54c3dd2":["96f6862293dd05eceeb03760bbb8ffcb604c6e80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec67ff97c3c57929891e4aa3bfba1094ef497d68","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":[],"ec67ff97c3c57929891e4aa3bfba1094ef497d68":["f38d01d46ec13a9d72d6e3c8dabc8bd9f54c3dd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96f6862293dd05eceeb03760bbb8ffcb604c6e80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}