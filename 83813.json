{"path":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","commits":[{"id":"c87228f1735e4c52ad4c2aa745e1bf3309fef278","date":1064151719,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"/dev/null","sourceNew":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57c3e35edc7a476497c7384ecf993d2d3fe53f","date":1082468348,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"contents\", \"foobar\", true, true, true));\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true)); \n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfab81c03dd23957f875ae11ea217c44403a7874","date":1082561009,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"contents\", \"foobar\", true, true, true));\n    doc.add(new Field(\"source\", \"marketing info\", true, true, true)); \n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(Field.Text(\"field\", \"one two three four five\"));\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71776a043ec5499f36208dcdf114f371cbbb27f5","date":1132623984,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Field repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Field repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    writer.addDocument(doc);\n    \n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.TOKENIZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.TOKENIZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 100;\n      }\n    };\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"this is a repeated field - first part\", Field.Store.YES, Field.Index.ANALYZED));\n    Fieldable repeatedField = new Field(\"repeated\", \"second part of a repeated field\", Field.Store.YES, Field.Index.ANALYZED);\n    doc.add(repeatedField);\n    doc.add(new Field(\"palindrome\", \"one two three two one\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new Field(\"nonexist\", \"phrase exist notexist exist found\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n    query = new PhraseQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfab81c03dd23957f875ae11ea217c44403a7874":["7d57c3e35edc7a476497c7384ecf993d2d3fe53f"],"71776a043ec5499f36208dcdf114f371cbbb27f5":["773e104db917d6cc9acade5a8aeb91a886192b99"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"7d57c3e35edc7a476497c7384ecf993d2d3fe53f":["c87228f1735e4c52ad4c2aa745e1bf3309fef278"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"773e104db917d6cc9acade5a8aeb91a886192b99":["cfab81c03dd23957f875ae11ea217c44403a7874"],"c87228f1735e4c52ad4c2aa745e1bf3309fef278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"cfab81c03dd23957f875ae11ea217c44403a7874":["773e104db917d6cc9acade5a8aeb91a886192b99"],"71776a043ec5499f36208dcdf114f371cbbb27f5":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"7d57c3e35edc7a476497c7384ecf993d2d3fe53f":["cfab81c03dd23957f875ae11ea217c44403a7874"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c87228f1735e4c52ad4c2aa745e1bf3309fef278"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"773e104db917d6cc9acade5a8aeb91a886192b99":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"c87228f1735e4c52ad4c2aa745e1bf3309fef278":["7d57c3e35edc7a476497c7384ecf993d2d3fe53f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}