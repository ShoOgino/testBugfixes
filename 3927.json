{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","commits":[{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt), 0.001);\n\n    //distPrec will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distPrec = 0.025; //the suggested default, by the way\n    final double distMult = 1+distPrec;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74, distPrec), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30, distPrec), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33, distPrec), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34, distPrec), 0, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt), 0.001);\n\n    //distPrec will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distPrec = 0.025; //the suggested default, by the way\n    final double distMult = 1+distPrec;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74, distPrec), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30, distPrec), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33, distPrec), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34, distPrec), 0, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distPrec will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distPrec = 0.025; //the suggested default, by the way\n    final double distMult = 1+distPrec;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distPrec), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distPrec), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distPrec), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distPrec), 0, null);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt), 0.001);\n\n    //distPrec will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distPrec = 0.025; //the suggested default, by the way\n    final double distMult = 1+distPrec;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74, distPrec), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30, distPrec), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33, distPrec), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34, distPrec), 0, null);\n  }\n\n","bugFix":null,"bugIntro":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distErrPct will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distErrPct = 0.025; //the suggested default, by the way\n    final double distMult = 1+distErrPct;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distErrPct), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distPrec will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distPrec = 0.025; //the suggested default, by the way\n    final double distMult = 1+distPrec;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distPrec), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distPrec), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distPrec), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distPrec), 0, null);\n  }\n\n","bugFix":["85ac3534293008a0b7704f8ba54592d51fd29fa5","da956410d7a790f567af4e7e94584fb0930212f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distErrPct will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distErrPct = 0.025; //the suggested default, by the way\n    final double distMult = 1+distErrPct;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distErrPct), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distErrPct will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distErrPct = 0.025; //the suggested default, by the way\n    final double distMult = 1+distErrPct;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distErrPct), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testPrecision().mjava","sourceNew":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distErrPct will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distErrPct = 0.025; //the suggested default, by the way\n    final double distMult = 1+distErrPct;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distErrPct), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecision() throws IOException{\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n\n    Point iPt = ctx.makePoint(2.8028712999999925, 48.3708044);//lon, lat\n    addDocument(newDoc(\"iPt\", iPt));\n    commit();\n\n    Point qPt = ctx.makePoint(2.4632387000000335, 48.6003516);\n\n    final double KM2DEG = DistanceUtils.dist2Degrees(1, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    final double DEG2KM = 1 / KM2DEG;\n\n    final double DIST = 35.75;//35.7499...\n    assertEquals(DIST, ctx.getDistCalc().distance(iPt, qPt) * DEG2KM, 0.001);\n\n    //distErrPct will affect the query shape precision. The indexed precision\n    // was set to nearly zilch via init(GeohashPrefixTree.getMaxLevelsPossible());\n    final double distErrPct = 0.025; //the suggested default, by the way\n    final double distMult = 1+distErrPct;\n\n    assertTrue(35.74*distMult >= DIST);\n    checkHits(q(qPt, 35.74 * KM2DEG, distErrPct), 1, null);\n\n    assertTrue(30*distMult < DIST);\n    checkHits(q(qPt, 30 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(33*distMult < DIST);\n    checkHits(q(qPt, 33 * KM2DEG, distErrPct), 0, null);\n\n    assertTrue(34*distMult < DIST);\n    checkHits(q(qPt, 34 * KM2DEG, distErrPct), 0, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["da956410d7a790f567af4e7e94584fb0930212f2"],"af2638813028b254a88b418ebeafb541afb49653":["6e2410e27320f6aaba450cbf500d7822baf642f8","112d77ac8d3e10a362516ad834c9a11d35c94234"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da956410d7a790f567af4e7e94584fb0930212f2":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"6e2410e27320f6aaba450cbf500d7822baf642f8":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["d0d1f90e969803cc84174589b5e4a39b7935fecd","da956410d7a790f567af4e7e94584fb0930212f2"],"da956410d7a790f567af4e7e94584fb0930212f2":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}