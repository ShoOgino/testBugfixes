{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testFieldCacheReuseAfterReopen().mjava","sourceNew":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Ensure that on a reopened reader, that any\n  // shared segments reuse the doc values arrays in\n  // FieldCache\n  public void testFieldCacheReuseAfterReopen() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader sub0 = r2.getSequentialSubReaders()[0];\n    final int[] ints2 = FieldCache.DEFAULT.getInts(sub0, \"number\");\n    r2.close();\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}