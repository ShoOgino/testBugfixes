{"path":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a334c2f3015ea627566ce68f894c84760830ca9","date":1320679609,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    rb.doHighlights = highlighter.isHighlightingEnabled(rb.req.getParams());\n  }\n\n","bugFix":null,"bugIntro":["aed6b9dbf4e4cfb1a522030abd1f47bc053b9821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821","date":1395136008,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, null, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":["9a334c2f3015ea627566ce68f894c84760830ca9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29cb9edc6c1e87b23f635321e1c3de19172d32fb","date":1458495029,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = solrConfigHighlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = solrConfigHighlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = solrConfigHighlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = highlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5ed9a1ca92218962653b439b8551778b5ad7bd","date":1550615278,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = solrConfigHighlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = MoreObjects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    rb.doHighlights = solrConfigHighlighter.isHighlightingEnabled(params);\n    if(rb.doHighlights){\n      rb.setNeedDocList(true);\n      String hlq = params.get(HighlightParams.Q);\n      String hlparser = Objects.firstNonNull(params.get(HighlightParams.QPARSER),\n                                              params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE));\n      if(hlq != null){\n        try {\n          QParser parser = QParser.getParser(hlq, hlparser, rb.req);\n          rb.setHighlightQuery(parser.getHighlightQuery());\n        } catch (SyntaxError e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821":["3cdb67100dc016748799a77218aa409478372d79"],"1c5ed9a1ca92218962653b439b8551778b5ad7bd":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"3cdb67100dc016748799a77218aa409478372d79":["9a334c2f3015ea627566ce68f894c84760830ca9"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["29cb9edc6c1e87b23f635321e1c3de19172d32fb"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["29cb9edc6c1e87b23f635321e1c3de19172d32fb","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"407687e67faf6e1f02a211ca078d8e3eed631027":["9a334c2f3015ea627566ce68f894c84760830ca9","3cdb67100dc016748799a77218aa409478372d79"],"727bb765ff2542275f6d31f67be18d7104bae148":["29cb9edc6c1e87b23f635321e1c3de19172d32fb","75babd1dfc2521603bfeb0968042e921d8c6c652"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29cb9edc6c1e87b23f635321e1c3de19172d32fb":["aed6b9dbf4e4cfb1a522030abd1f47bc053b9821"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c5ed9a1ca92218962653b439b8551778b5ad7bd"],"9a334c2f3015ea627566ce68f894c84760830ca9":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"aed6b9dbf4e4cfb1a522030abd1f47bc053b9821":["29cb9edc6c1e87b23f635321e1c3de19172d32fb"],"1c5ed9a1ca92218962653b439b8551778b5ad7bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["aed6b9dbf4e4cfb1a522030abd1f47bc053b9821","407687e67faf6e1f02a211ca078d8e3eed631027"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["1c5ed9a1ca92218962653b439b8551778b5ad7bd","727bb765ff2542275f6d31f67be18d7104bae148"],"c26f00b574427b55127e869b935845554afde1fa":["9a334c2f3015ea627566ce68f894c84760830ca9"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"29cb9edc6c1e87b23f635321e1c3de19172d32fb":["8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652","727bb765ff2542275f6d31f67be18d7104bae148"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9a334c2f3015ea627566ce68f894c84760830ca9":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}