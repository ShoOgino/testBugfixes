{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","commits":[{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      if(componentName == null && parts.size() > 2){\n        componentName = parts.get(2);\n        if(SolrRequestHandler.TYPE.equals(componentType)){\n          componentName = \"/\"+componentName;\n        }\n      }\n\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (SolrRequestHandler.TYPE.equals(componentType) || componentType == null) {\n        Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n        if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n        List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n        for (PluginInfo plugin : plugins) {\n          if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n            if (!reqHandlers.containsKey(plugin.name)) {\n              reqHandlers.put(plugin.name, plugin);\n            }\n          }\n        }\n        if (showParams) {\n          for (Object o : reqHandlers.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (componentName == null || e.getKey().equals(componentName)) {\n              Map<String, Object> m = expandUseParams(req, e.getValue());\n              e.setValue(m);\n            }\n          }\n        }\n\n      }\n\n      if (req.getParams().getBool(\"meta\", false)) {\n        for (SolrCore.PkgListener pkgListener : req.getCore().getPackageListeners()) {\n          PluginInfo meta = pkgListener.pluginInfo();\n          if (meta.pathInConfig != null) {\n            Object obj = Utils.getObjectByPath(map, false, meta.pathInConfig);\n            if (obj instanceof Map) {\n              Map m = (Map) obj;\n              m.put(\"_packageinfo_\", pkgListener.lib());\n            } else if(obj instanceof MapWriter){\n              MapWriter mw = (MapWriter) obj;\n              Utils.setObjectByPath(map, meta.pathInConfig, (MapWriter) ew -> {\n                mw.writeMap(ew);\n                ew.put(\"_packageinfo_\", pkgListener.lib());\n              }, false);\n            }\n          }\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      if(componentName == null && parts.size() > 2){\n        componentName = parts.get(2);\n        if(SolrRequestHandler.TYPE.equals(componentType)){\n          componentName = \"/\"+componentName;\n        }\n      }\n\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (SolrRequestHandler.TYPE.equals(componentType) || componentType == null) {\n        Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n        if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n        List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n        for (PluginInfo plugin : plugins) {\n          if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n            if (!reqHandlers.containsKey(plugin.name)) {\n              reqHandlers.put(plugin.name, plugin);\n            }\n          }\n        }\n        if (showParams) {\n          for (Object o : reqHandlers.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (componentName == null || e.getKey().equals(componentName)) {\n              Map<String, Object> m = expandUseParams(req, e.getValue());\n              e.setValue(m);\n            }\n          }\n        }\n\n      }\n\n      if (req.getParams().getBool(\"meta\", false)) {\n        for (SolrCore.PkgListener pkgListener : req.getCore().getPackageListeners()) {\n          PluginInfo meta = pkgListener.pluginInfo();\n          if (meta.pathInConfig != null) {\n            Object obj = Utils.getObjectByPath(map, false, meta.pathInConfig);\n            if (obj instanceof Map) {\n              Map m = (Map) obj;\n              m.put(\"_packageinfo_\", pkgListener.lib());\n            } else if(obj instanceof MapWriter){\n              MapWriter mw = (MapWriter) obj;\n              Utils.setObjectByPath(map, meta.pathInConfig, (MapWriter) ew -> {\n                mw.writeMap(ew);\n                ew.put(\"_packageinfo_\", pkgListener.lib());\n              }, false);\n            }\n          }\n        }\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","sourceNew":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      if(componentName == null && parts.size() > 2){\n        componentName = parts.get(2);\n        if(SolrRequestHandler.TYPE.equals(componentType)){\n          componentName = \"/\"+componentName;\n        }\n      }\n\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (SolrRequestHandler.TYPE.equals(componentType) || componentType == null) {\n        Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n        if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n        List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n        for (PluginInfo plugin : plugins) {\n          if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n            if (!reqHandlers.containsKey(plugin.name)) {\n              reqHandlers.put(plugin.name, plugin);\n            }\n          }\n        }\n        if (showParams) {\n          for (Object o : reqHandlers.entrySet()) {\n            Map.Entry e = (Map.Entry) o;\n            if (componentName == null || e.getKey().equals(componentName)) {\n              Map<String, Object> m = expandUseParams(req, e.getValue());\n              e.setValue(m);\n            }\n          }\n        }\n\n      }\n\n      if (req.getParams().getBool(\"meta\", false)) {\n        for (SolrCore.PkgListener pkgListener : req.getCore().getPackageListeners()) {\n          PluginInfo meta = pkgListener.pluginInfo();\n          if (meta.pathInConfig != null) {\n            Object obj = Utils.getObjectByPath(map, false, meta.pathInConfig);\n            if (obj instanceof Map) {\n              Map m = (Map) obj;\n              m.put(\"_packageinfo_\", pkgListener.lib());\n            } else if(obj instanceof MapWriter){\n              MapWriter mw = (MapWriter) obj;\n              Utils.setObjectByPath(map, meta.pathInConfig, (MapWriter) ew -> {\n                mw.writeMap(ew);\n                ew.put(\"_packageinfo_\", pkgListener.lib());\n              }, false);\n            }\n          }\n        }\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails(String,SolrQueryRequest).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      @SuppressWarnings({\"rawtypes\"})\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {\n      String componentName = componentType == null ? null : req.getParams().get(\"componentName\");\n      boolean showParams = req.getParams().getBool(\"expandParams\", false);\n      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      if (componentType != null && !SolrRequestHandler.TYPE.equals(componentType)) return map;\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin);\n          }\n        }\n      }\n      if (!showParams) return map;\n      for (Object o : reqHandlers.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (componentName == null || e.getKey().equals(componentName)) {\n          Map<String, Object> m = expandUseParams(req, e.getValue());\n          e.setValue(m);\n        }\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8661269ebb23269662a2826882f11611e91d5a"],"5e8661269ebb23269662a2826882f11611e91d5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5e8661269ebb23269662a2826882f11611e91d5a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}