{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  @Override\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    return (IndexWriterConfig) super.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f4e54ed7cef46f86888b5fb547594f62160395c"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}