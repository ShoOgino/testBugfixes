{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectMultiTermDataForSegment(MultiTerm,LeafReaderContext,int,MutableValueBool,Map[BytesRef,TermStats]).mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectMultiTermDataForSegment(MultiTerm,LeafReaderContext,int,MutableValueBool,Map[BytesRef,TermStats]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collects the {@link TermState} list and {@link TermStatistics} for a multi-term\n   * on a specific index segment.\n   *\n   * @param remainingExpansions        the number of remaining expansions allowed\n   *                                   for the segment.\n   * @param shouldStopSegmentIteration to be set to true to stop the segment\n   *                                   iteration calling this method repeatedly.\n   * @param termStatsMap               receives the collected {@link TermStats} across all segments.\n   */\n  protected List<TermBytesTermState> collectMultiTermDataForSegment(\n      MultiTerm multiTerm,\n      LeafReaderContext leafReaderContext,\n      int remainingExpansions,\n      MutableValueBool shouldStopSegmentIteration,\n      Map<BytesRef, TermStats> termStatsMap) throws IOException {\n    TermsEnum termsEnum = createTermsEnum(multiTerm, leafReaderContext);\n    if (termsEnum == null) {\n      return Collections.emptyList();\n    }\n    assert TestCounters.get().incSegmentUseCount();\n    List<TermBytesTermState> termStates = new ArrayList<>();\n    while (termsEnum.next() != null && remainingExpansions > 0) {\n      // Collect term stats for the segment.\n      TermStats termStats = termStatsMap.get(termsEnum.term());\n      if (termStats == null) {\n        BytesRef termBytes = BytesRef.deepCopyOf(termsEnum.term());\n        termStats = new TermStats(termBytes);\n        termStatsMap.put(termBytes, termStats);\n      }\n      // Accumulate stats the same way TermStates.accumulateStatistics() does.\n      // Sum the stats per term for all segments the same way TermStates.build() does.\n      termStats.addStats(termsEnum.docFreq(), termsEnum.totalTermFreq());\n\n      // Collect TermState per segment.\n      termStates.add(new TermBytesTermState(termStats.termBytes, termsEnum.termState()));\n      remainingExpansions--;\n      assert TestCounters.get().incExpansionCount();\n    }\n    assert remainingExpansions >= 0;\n    shouldStopSegmentIteration.value = remainingExpansions == 0;\n    return termStates;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"]},"commit2Childs":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}