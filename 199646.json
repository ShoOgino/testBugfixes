{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","commits":[{"id":"98798900014e18f407b1910aa34db4d3ae76ecc6","date":1427307584,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          //run these in a separate thread because this can be long running\n          public void run() {\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a459b94e2efbfd9079ee913563d160b3b9ab9c1","date":1427330029,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          //run these in a separate thread because this can be long running\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          //run these in a separate thread because this can be long running\n          public void run() {\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          //run these in a separate thread because this can be long running\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          // run these in a separate thread because this can be long running\n          @Override\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          //run these in a separate thread because this can be long running\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc69baf14413994ccde897681e5ce1d393cf7156","date":1468245555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.info(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          // run these in a separate thread because this can be long running\n          @Override\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.debug(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.debug(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.info(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.debug(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.debug(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.info(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.debug(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.debug(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.info(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        new Thread() {\n          // run these in a separate thread because this can be long running\n          @Override\n          public void run() {\n            log.info(\"Running listeners for {}\", zkDir);\n            for (final Runnable listener : listenersCopy) {\n              try {\n                listener.run();\n              } catch (Exception e) {\n                log.warn(\"listener throws error\", e);\n              }\n            }\n          }\n        }.start();\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#fireEventListeners(String).mjava","sourceNew":"  private boolean fireEventListeners(String zkDir) {\n    if (isClosed || cc.isShutDown()) {\n      return false;\n    }\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.debug(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.debug(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean fireEventListeners(String zkDir) {\n    synchronized (confDirectoryListeners) {\n      // if this is not among directories to be watched then don't set the watcher anymore\n      if (!confDirectoryListeners.containsKey(zkDir)) {\n        log.debug(\"Watcher on {} is removed \", zkDir);\n        return false;\n      }\n      final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n      if (listeners != null && !listeners.isEmpty()) {\n        final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n        // run these in a separate thread because this can be long running\n        new Thread(() -> {\n          log.debug(\"Running listeners for {}\", zkDir);\n          for (final Runnable listener : listenersCopy) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.warn(\"listener throws error\", e);\n            }\n          }\n        }).start();\n\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["cc69baf14413994ccde897681e5ce1d393cf7156"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cc69baf14413994ccde897681e5ce1d393cf7156","962cd4f5e313777f35da8f521265323e84184929"],"98798900014e18f407b1910aa34db4d3ae76ecc6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a459b94e2efbfd9079ee913563d160b3b9ab9c1":["98798900014e18f407b1910aa34db4d3ae76ecc6"],"cc69baf14413994ccde897681e5ce1d393cf7156":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["cc69baf14413994ccde897681e5ce1d393cf7156","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98798900014e18f407b1910aa34db4d3ae76ecc6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"98798900014e18f407b1910aa34db4d3ae76ecc6":["5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"5a459b94e2efbfd9079ee913563d160b3b9ab9c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"cc69baf14413994ccde897681e5ce1d393cf7156":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}