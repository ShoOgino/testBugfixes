{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TermAllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    doc.add(newField(groupField, \"author2\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n    int maxDoc = indexSearcher.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    doc.add(newField(groupField, \"author2\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n    int maxDoc = indexSearcher.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup2);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = TermAllGroupHeadsCollector.create(groupField, sortWithinGroup3);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    doc.add(newField(groupField, \"author2\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    doc.add(newField(groupField, \"author2\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n    int maxDoc = indexSearcher.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    ValueType valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(newField(groupField, \"author1\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    doc.add(newField(groupField, \"author2\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(newField(groupField, \"author3\", TextField.TYPE_STORED));\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    ValueType valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    ValueType valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","date":1327854270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowMultiReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"200be48c182b79811a4fed24fd2d2ad852f092cb","date":1331204120,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector c1 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c1.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c2 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), c2);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, c2.retrieveGroupHeads(maxDoc), maxDoc));\n\n    AbstractAllGroupHeadsCollector c3 = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), c3);\n    assertTrue(arrayContains(new int[]{1, 5}, c3.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, c3.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    AbstractAllGroupHeadsCollector c4 = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c4);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, c4.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    AbstractAllGroupHeadsCollector c5 = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c5);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, c5.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random().nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random.nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random().nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    final String groupField = \"author\";\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    Type valueType = vts[random().nextInt(vts.length)];\n\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"3\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"4\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"5\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV, valueType);\n    doc.add(newField(\"content\", \"random blob\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"6\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    // 7 -- no author field\n    doc = new Document();\n    doc.add(newField(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(newField(\"id\", \"7\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    IndexSearcher indexSearcher = new IndexSearcher(reader);\n    if (SlowCompositeReaderWrapper.class.isAssignableFrom(reader.getClass())) {\n      canUseIDV = false;\n    }\n\n    w.close();\n    int maxDoc = reader.maxDoc();\n\n    Sort sortWithinGroup = new Sort(new SortField(\"id\", SortField.Type.INT, true));\n    AbstractAllGroupHeadsCollector<?> allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 4}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{1, 5}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    // STRING sort type triggers different implementation\n    Sort sortWithinGroup2 = new Sort(new SortField(\"id\", SortField.Type.STRING, true));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup2, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    assertTrue(arrayContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{2, 3, 5, 7}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    Sort sortWithinGroup3 = new Sort(new SortField(\"id\", SortField.Type.STRING, false));\n    allGroupHeadsCollector = createRandomCollector(groupField, sortWithinGroup3, canUseIDV, valueType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), allGroupHeadsCollector);\n    // 7 b/c higher doc id wins, even if order of field is in not in reverse.\n    assertTrue(arrayContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads()));\n    assertTrue(openBitSetContains(new int[]{0, 3, 4, 6}, allGroupHeadsCollector.retrieveGroupHeads(maxDoc), maxDoc));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["5cab9a86bd67202d20b6adc463008c8e982b070a","200be48c182b79811a4fed24fd2d2ad852f092cb"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","7528ec8c6e88061e2e6af98c4ae1f72a30f180b2"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["4739c84c362b9673ab5ed3e038ff760c718c30c8","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"200be48c182b79811a4fed24fd2d2ad852f092cb":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["200be48c182b79811a4fed24fd2d2ad852f092cb"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["38e3b736c7ca086d61b7dbb841c905ee115490da","200be48c182b79811a4fed24fd2d2ad852f092cb"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["5cab9a86bd67202d20b6adc463008c8e982b070a","7528ec8c6e88061e2e6af98c4ae1f72a30f180b2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"200be48c182b79811a4fed24fd2d2ad852f092cb":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}