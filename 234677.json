{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","commits":[{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    // uncommitted doc in transaction log\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["76b65cf789129cacd84e977b8f1538aec29e0281"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76b65cf789129cacd84e977b8f1538aec29e0281","date":1470165799,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    // uncommitted doc in transaction log\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n\n","bugFix":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    // uncommitted doc in transaction log\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#createMiniSolrCloudCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  private static void createMiniSolrCloudCluster() throws Exception {\n    // multi replicas should matter...\n    final int repFactor = usually() ? 1 : 2;;\n    // ... but we definitely want to ensure forwarded requests to other shards work ...\n    final int numShards = 2;\n    // ... including some forwarded requests from nodes not hosting a shard\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["76b65cf789129cacd84e977b8f1538aec29e0281"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","76b65cf789129cacd84e977b8f1538aec29e0281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"76b65cf789129cacd84e977b8f1538aec29e0281":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","76b65cf789129cacd84e977b8f1538aec29e0281"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"76b65cf789129cacd84e977b8f1538aec29e0281":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}