{"path":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testNormLon().mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testNormLon().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNormLon() {\n    double[][] lons = new double[][] {\n        {1.23,1.23},//1.23 might become 1.2299999 after some math and we want to ensure that doesn't happen\n        {-180,-180},{180,-180},{0,0}, {-190,170},\n        {-180-360,-180},{-180-720,-180},{180+360,-180},{180+720,-180}};\n    for (double[] pair : lons) {\n      assertEquals(\"input \"+pair[0],pair[1],ctx.normX(pair[0]),0);\n    }\n    Random random = new Random(RandomSeed.seed());\n    for(int i = -1000; i < 1000; i += random.nextInt(10)*10) {\n      double d = ctx.normX(i);\n      assertTrue(i + \" \" + d, d >= -180 && d < 180);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testNormLon().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testNormLon().mjava","sourceNew":"  @Test\n  public void testNormLon() {\n    double[][] lons = new double[][] {\n        {1.23,1.23},//1.23 might become 1.2299999 after some math and we want to ensure that doesn't happen\n        {-180,-180},{180,-180},{0,0}, {-190,170},\n        {-180-360,-180},{-180-720,-180},{180+360,-180},{180+720,-180}};\n    for (double[] pair : lons) {\n      assertEquals(\"input \"+pair[0],pair[1],ctx.normX(pair[0]),0);\n    }\n    Random random = new Random(RandomSeed.seed());\n    for(int i = -1000; i < 1000; i += random.nextInt(10)*10) {\n      double d = ctx.normX(i);\n      assertTrue(i + \" \" + d, d >= -180 && d < 180);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNormLon() {\n    double[][] lons = new double[][] {\n        {1.23,1.23},//1.23 might become 1.2299999 after some math and we want to ensure that doesn't happen\n        {-180,-180},{180,-180},{0,0}, {-190,170},\n        {-180-360,-180},{-180-720,-180},{180+360,-180},{180+720,-180}};\n    for (double[] pair : lons) {\n      assertEquals(\"input \"+pair[0],pair[1],ctx.normX(pair[0]),0);\n    }\n    Random random = new Random(RandomSeed.seed());\n    for(int i = -1000; i < 1000; i += random.nextInt(10)*10) {\n      double d = ctx.normX(i);\n      assertTrue(i + \" \" + d, d >= -180 && d < 180);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}