{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","commits":[{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int numReplicas = collection.getReplicas().size();\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int numReplicas = collection.getReplicas().size();\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int numReplicas = collection.getReplicas().size();\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7","date":1501726570,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","sourceNew":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int defaultValue = defaultCounterValue(collection, false);\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int numReplicas = collection.getReplicas().size();\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    }\n    return coreNodeName;\n  }\n\n","bugFix":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","sourceNew":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int defaultValue = defaultCounterValue(collection, false);\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int numReplicas = collection.getReplicas().size();\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), numReplicas * 20);\n    }\n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(DistribStateManager,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignNode(SolrZkClient,DocCollection).mjava","sourceNew":"  public static String assignNode(DistribStateManager stateManager, DocCollection collection) {\n    // for backward compatibility;\n    int defaultValue = defaultCounterValue(collection, false);\n    String coreNodeName = \"core_node\" + incAndGetId(stateManager, collection.getName(), defaultValue);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(stateManager, collection.getName(), defaultValue);\n    }\n    return coreNodeName;\n  }\n\n","sourceOld":"  public static String assignNode(SolrZkClient client, DocCollection collection) {\n    // for backward compatibility;\n    int defaultValue = defaultCounterValue(collection, false);\n    String coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    while (collection.getReplica(coreNodeName) != null) {\n      // there is wee chance that, the new coreNodeName id not totally unique,\n      // but this will be guaranteed unique for new collections\n      coreNodeName = \"core_node\" + incAndGetId(client, collection.getName(), defaultValue);\n    }\n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}