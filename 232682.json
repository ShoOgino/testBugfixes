{"path":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().getSubResults();\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.getLabel(), expectedResults[i++], fResNode.getValue(), 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().getSubResults();\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.getLabel(), expectedResults[i++], fResNode.getValue(), 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().getSubResults();\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.getLabel(), expectedResults[i++], fResNode.getValue(), 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().getSubResults();\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.getLabel(), expectedResults[i++], fResNode.getValue(), 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestAssociationExample#assertExampleResult(ExampleResult,double[]).mjava","sourceNew":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","sourceOld":"  private void assertExampleResult(ExampleResult res, double[] expectedResults) {\n    assertNotNull(\"Null result!\", res);\n    assertNotNull(\"Null facet result!\", res.getFacetResults());\n    assertEquals(\"Wrong number of results!\", 1, res.getFacetResults().size());\n    assertEquals(\"Wrong number of facets!\", 2, res.getFacetResults().get(0).getNumValidDescendants());\n    \n    Iterable<? extends FacetResultNode> it = res.getFacetResults().get(0).getFacetResultNode().subResults;\n    int i = 0;\n    for (FacetResultNode fResNode : it) {\n      assertEquals(\"Wrong result for facet \"+fResNode.label, expectedResults[i++], fResNode.value, 1E-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["811cdb4a80352766eb0c762e48972707a924e5cd"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"811cdb4a80352766eb0c762e48972707a924e5cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"811cdb4a80352766eb0c762e48972707a924e5cd":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}