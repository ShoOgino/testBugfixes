{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testLongRangeBoundaryValues().mjava","commits":[{"id":"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8","date":1458565183,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testLongRangeBoundaryValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongRangeBoundaryValues() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 100l));\n    iw.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 200l));\n    iw.addDocument(doc);\n\n    iw.commit();\n\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader, false);\n    iw.close();\n\n    Long min = Long.MIN_VALUE;\n    Long max = Long.MIN_VALUE;\n    Query query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, false);\n    TopDocs td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    min = Long.MAX_VALUE;\n    max = Long.MAX_VALUE;\n    query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, false, true);\n    td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testLongRangeBoundaryValues().mjava","sourceNew":null,"sourceOld":"  public void testLongRangeBoundaryValues() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 100l));\n    iw.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 200l));\n    iw.addDocument(doc);\n\n    iw.commit();\n\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader, false);\n    iw.close();\n\n    Long min = Long.MIN_VALUE;\n    Long max = Long.MIN_VALUE;\n    Query query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, false);\n    TopDocs td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    min = Long.MAX_VALUE;\n    max = Long.MAX_VALUE;\n    query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, false, true);\n    td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testLongRangeBoundaryValues().mjava","sourceNew":null,"sourceOld":"  public void testLongRangeBoundaryValues() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 100l));\n    iw.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 200l));\n    iw.addDocument(doc);\n\n    iw.commit();\n\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader, false);\n    iw.close();\n\n    Long min = Long.MIN_VALUE;\n    Long max = Long.MIN_VALUE;\n    Query query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, false);\n    TopDocs td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    min = Long.MAX_VALUE;\n    max = Long.MAX_VALUE;\n    query = DocValuesRangeQuery.newLongRange(\"dv\", min, max, false, true);\n    td = searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    assertEquals(0, td.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8"],"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a412a7808b2815566cb17117ebe6638112b9a31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8"],"5a412a7808b2815566cb17117ebe6638112b9a31":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}