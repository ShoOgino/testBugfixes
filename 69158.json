{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery.Builder,BooleanQuery).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery.Builder,BooleanQuery).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery.Builder to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery.Builder,BooleanQuery).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery.Builder,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery.Builder to, BooleanQuery from) {\n    flattenBooleanQuery(to, from, 1f);\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery.Builder to, BooleanQuery from) {\n\n    for (BooleanClause clause : from.clauses()) {\n\n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n\n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n\n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n\n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}