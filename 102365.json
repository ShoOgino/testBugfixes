{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","commits":[{"id":"7aa2c1715ef9a80383edea1048655da291ed9b8f","date":1495196478,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      final Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n      if (znodeVersion >= stat.getVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      znodeVersion = stat.getVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, data);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      final Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n      if (znodeVersion >= stat.getVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = new AutoScalingConfig(data);\n      znodeVersion = stat.getVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      final Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n      if (znodeVersion >= stat.getVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      znodeVersion = stat.getVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, data);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      final Stat stat = new Stat();\n      final byte[] data = zkClient.getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher, stat, true);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n      if (znodeVersion >= stat.getVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = new AutoScalingConfig(data);\n      znodeVersion = stat.getVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws ConnectException, InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = clusterDataProvider.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws ConnectException, InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = clusterDataProvider.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = dataProvider.getDistribStateManager().getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws KeeperException, InterruptedException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = zkStateReader.getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = cloudManager.getDistribStateManager().getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = dataProvider.getDistribStateManager().getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = cloudManager.getDistribStateManager().getAutoScalingConfig(watcher);\n      if (log.isDebugEnabled()) {\n        log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      }\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = cloudManager.getDistribStateManager().getAutoScalingConfig(watcher);\n      log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#refreshAutoScalingConf(Watcher).mjava","sourceNew":null,"sourceOld":"  private void refreshAutoScalingConf(Watcher watcher) throws InterruptedException, IOException {\n    updateLock.lock();\n    try {\n      if (isClosed) {\n        return;\n      }\n      AutoScalingConfig currentConfig = cloudManager.getDistribStateManager().getAutoScalingConfig(watcher);\n      if (log.isDebugEnabled()) {\n        log.debug(\"Refreshing {} with znode version {}\", ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, currentConfig.getZkVersion());\n      }\n      if (znodeVersion >= currentConfig.getZkVersion()) {\n        // protect against reordered watcher fires by ensuring that we only move forward\n        return;\n      }\n      autoScalingConfig = currentConfig;\n      znodeVersion = autoScalingConfig.getZkVersion();\n      Map<String, AutoScaling.Trigger> triggerMap = loadTriggers(triggerFactory, autoScalingConfig);\n\n      // remove all active triggers that have been removed from ZK\n      Set<String> trackingKeySet = activeTriggers.keySet();\n      trackingKeySet.retainAll(triggerMap.keySet());\n\n      // now lets add or remove triggers which have been enabled or disabled respectively\n      for (Map.Entry<String, AutoScaling.Trigger> entry : triggerMap.entrySet()) {\n        String triggerName = entry.getKey();\n        AutoScaling.Trigger trigger = entry.getValue();\n        if (trigger.isEnabled()) {\n          activeTriggers.put(triggerName, trigger);\n        } else {\n          activeTriggers.remove(triggerName);\n        }\n      }\n      updated.signalAll();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5fd294da67452cd8d116692194908de00eb5209":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["c5fd294da67452cd8d116692194908de00eb5209"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7aa2c1715ef9a80383edea1048655da291ed9b8f","560c18d71dad43d675158783c3840f8c80d6d39c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e35f2dde06b35aa9904949a3a93fabd090371077"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}