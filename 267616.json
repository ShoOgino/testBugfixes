{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Lock obtainFSLock(FSDirectory dir, String lockName) throws IOException {\n    Path lockDir = dir.getDirectory();\n    \n    // Ensure that lockDir exists and is a directory.\n    // note: this will fail if lockDir is a symlink\n    Files.createDirectories(lockDir);\n    \n    Path lockFile = lockDir.resolve(lockName);\n\n    try {\n      Files.createFile(lockFile);\n    } catch (IOException ignore) {\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n    }\n    \n    // fails if the lock file does not exist\n    final Path realPath = lockFile.toRealPath();\n    \n    // used as a best-effort check, to see if the underlying file has changed\n    final FileTime creationTime = Files.readAttributes(realPath, BasicFileAttributes.class).creationTime();\n    \n    if (LOCK_HELD.add(realPath.toString())) {\n      FileChannel channel = null;\n      FileLock lock = null;\n      try {\n        channel = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        lock = channel.tryLock();\n        if (lock != null) {\n          return new NativeFSLock(lock, channel, realPath, creationTime);\n        } else {\n          throw new LockObtainFailedException(\"Lock held by another program: \" + realPath);\n        }\n      } finally {\n        if (lock == null) { // not successful - clear up and move out\n          IOUtils.closeWhileHandlingException(channel); // TODO: addSuppressed\n          clearLockHeld(realPath);  // clear LOCK_HELD last \n        }\n      }\n    } else {\n      throw new LockObtainFailedException(\"Lock held by this virtual machine: \" + realPath);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e0327236e653f06dbc0e9c4c76a526928dc4b7d","date":1504936939,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","sourceNew":"  @Override\n  protected Lock obtainFSLock(FSDirectory dir, String lockName) throws IOException {\n    Path lockDir = dir.getDirectory();\n    \n    // Ensure that lockDir exists and is a directory.\n    // note: this will fail if lockDir is a symlink\n    Files.createDirectories(lockDir);\n    \n    Path lockFile = lockDir.resolve(lockName);\n\n    IOException creationException = null;\n    try {\n      Files.createFile(lockFile);\n    } catch (IOException ignore) {\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n      creationException = ignore;\n    }\n    \n    // fails if the lock file does not exist\n    final Path realPath;\n    try {\n      realPath = lockFile.toRealPath();\n    } catch (IOException e) {\n      // if we couldn't resolve the lock file, it might be because we couldn't create it.\n      // so append any exception from createFile as a suppressed exception, in case its useful\n      if (creationException != null) {\n        e.addSuppressed(creationException);\n      }\n      throw e;\n    }\n    \n    // used as a best-effort check, to see if the underlying file has changed\n    final FileTime creationTime = Files.readAttributes(realPath, BasicFileAttributes.class).creationTime();\n    \n    if (LOCK_HELD.add(realPath.toString())) {\n      FileChannel channel = null;\n      FileLock lock = null;\n      try {\n        channel = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        lock = channel.tryLock();\n        if (lock != null) {\n          return new NativeFSLock(lock, channel, realPath, creationTime);\n        } else {\n          throw new LockObtainFailedException(\"Lock held by another program: \" + realPath);\n        }\n      } finally {\n        if (lock == null) { // not successful - clear up and move out\n          IOUtils.closeWhileHandlingException(channel); // TODO: addSuppressed\n          clearLockHeld(realPath);  // clear LOCK_HELD last \n        }\n      }\n    } else {\n      throw new LockObtainFailedException(\"Lock held by this virtual machine: \" + realPath);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Lock obtainFSLock(FSDirectory dir, String lockName) throws IOException {\n    Path lockDir = dir.getDirectory();\n    \n    // Ensure that lockDir exists and is a directory.\n    // note: this will fail if lockDir is a symlink\n    Files.createDirectories(lockDir);\n    \n    Path lockFile = lockDir.resolve(lockName);\n\n    try {\n      Files.createFile(lockFile);\n    } catch (IOException ignore) {\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n    }\n    \n    // fails if the lock file does not exist\n    final Path realPath = lockFile.toRealPath();\n    \n    // used as a best-effort check, to see if the underlying file has changed\n    final FileTime creationTime = Files.readAttributes(realPath, BasicFileAttributes.class).creationTime();\n    \n    if (LOCK_HELD.add(realPath.toString())) {\n      FileChannel channel = null;\n      FileLock lock = null;\n      try {\n        channel = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        lock = channel.tryLock();\n        if (lock != null) {\n          return new NativeFSLock(lock, channel, realPath, creationTime);\n        } else {\n          throw new LockObtainFailedException(\"Lock held by another program: \" + realPath);\n        }\n      } finally {\n        if (lock == null) { // not successful - clear up and move out\n          IOUtils.closeWhileHandlingException(channel); // TODO: addSuppressed\n          clearLockHeld(realPath);  // clear LOCK_HELD last \n        }\n      }\n    } else {\n      throw new LockObtainFailedException(\"Lock held by this virtual machine: \" + realPath);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#obtainFSLock(FSDirectory,String).mjava","sourceNew":"  @Override\n  protected Lock obtainFSLock(FSDirectory dir, String lockName) throws IOException {\n    Path lockDir = dir.getDirectory();\n    \n    // Ensure that lockDir exists and is a directory.\n    // note: this will fail if lockDir is a symlink\n    Files.createDirectories(lockDir);\n    \n    Path lockFile = lockDir.resolve(lockName);\n\n    IOException creationException = null;\n    try {\n      Files.createFile(lockFile);\n    } catch (IOException ignore) {\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n      creationException = ignore;\n    }\n    \n    // fails if the lock file does not exist\n    final Path realPath;\n    try {\n      realPath = lockFile.toRealPath();\n    } catch (IOException e) {\n      // if we couldn't resolve the lock file, it might be because we couldn't create it.\n      // so append any exception from createFile as a suppressed exception, in case its useful\n      if (creationException != null) {\n        e.addSuppressed(creationException);\n      }\n      throw e;\n    }\n    \n    // used as a best-effort check, to see if the underlying file has changed\n    final FileTime creationTime = Files.readAttributes(realPath, BasicFileAttributes.class).creationTime();\n    \n    if (LOCK_HELD.add(realPath.toString())) {\n      FileChannel channel = null;\n      FileLock lock = null;\n      try {\n        channel = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        lock = channel.tryLock();\n        if (lock != null) {\n          return new NativeFSLock(lock, channel, realPath, creationTime);\n        } else {\n          throw new LockObtainFailedException(\"Lock held by another program: \" + realPath);\n        }\n      } finally {\n        if (lock == null) { // not successful - clear up and move out\n          IOUtils.closeWhileHandlingException(channel); // TODO: addSuppressed\n          clearLockHeld(realPath);  // clear LOCK_HELD last \n        }\n      }\n    } else {\n      throw new LockObtainFailedException(\"Lock held by this virtual machine: \" + realPath);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Lock obtainFSLock(FSDirectory dir, String lockName) throws IOException {\n    Path lockDir = dir.getDirectory();\n    \n    // Ensure that lockDir exists and is a directory.\n    // note: this will fail if lockDir is a symlink\n    Files.createDirectories(lockDir);\n    \n    Path lockFile = lockDir.resolve(lockName);\n\n    try {\n      Files.createFile(lockFile);\n    } catch (IOException ignore) {\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n    }\n    \n    // fails if the lock file does not exist\n    final Path realPath = lockFile.toRealPath();\n    \n    // used as a best-effort check, to see if the underlying file has changed\n    final FileTime creationTime = Files.readAttributes(realPath, BasicFileAttributes.class).creationTime();\n    \n    if (LOCK_HELD.add(realPath.toString())) {\n      FileChannel channel = null;\n      FileLock lock = null;\n      try {\n        channel = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        lock = channel.tryLock();\n        if (lock != null) {\n          return new NativeFSLock(lock, channel, realPath, creationTime);\n        } else {\n          throw new LockObtainFailedException(\"Lock held by another program: \" + realPath);\n        }\n      } finally {\n        if (lock == null) { // not successful - clear up and move out\n          IOUtils.closeWhileHandlingException(channel); // TODO: addSuppressed\n          clearLockHeld(realPath);  // clear LOCK_HELD last \n        }\n      }\n    } else {\n      throw new LockObtainFailedException(\"Lock held by this virtual machine: \" + realPath);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["618635065f043788c9e034f96ca5cd5cea1b4592","0e0327236e653f06dbc0e9c4c76a526928dc4b7d"],"0e0327236e653f06dbc0e9c4c76a526928dc4b7d":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e0327236e653f06dbc0e9c4c76a526928dc4b7d"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["685bd38810c206c93e9058f3c2cfa9827c086c27","0e0327236e653f06dbc0e9c4c76a526928dc4b7d"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"0e0327236e653f06dbc0e9c4c76a526928dc4b7d":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}