{"path":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param field  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String field)\n\tthrows IOException {\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7f2f39556d99cecd24f152bdece2b6432458c3","date":1077651298,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param field  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String field)\n\tthrows IOException {\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dba073cad85af8b853f4461a62b0a245480fcd7a","date":1080156191,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tif (retArray.length > 0) {\n\t\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tenumerator.close();\n\t\t\t\t\t\ttermDocs.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba642776a798f4209071f2241e5c6faefc6ea2fb","date":1080586530,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tTermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n\t\treturn comparator (reader, enumerator, fieldname);\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tif (retArray.length > 0) {\n\t\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\t\t\tthrow new RuntimeException (\"no terms in field \"+field);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\t\tint termval = Integer.parseInt (term.text());\n\t\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\t\tretArray[termDocs.doc()] = termval;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tenumerator.close();\n\t\t\t\t\t\ttermDocs.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer (fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":4,"author":"Tim Jones","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IntegerSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing integers.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg integer values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tTermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n\t\treturn comparator (reader, enumerator, fieldname);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["ba642776a798f4209071f2241e5c6faefc6ea2fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba642776a798f4209071f2241e5c6faefc6ea2fb":["dba073cad85af8b853f4461a62b0a245480fcd7a"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"dba073cad85af8b853f4461a62b0a245480fcd7a":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"ba642776a798f4209071f2241e5c6faefc6ea2fb":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["dba073cad85af8b853f4461a62b0a245480fcd7a"],"dba073cad85af8b853f4461a62b0a245480fcd7a":["ba642776a798f4209071f2241e5c6faefc6ea2fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}