{"path":"modules/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","pathOld":"/dev/null","sourceNew":"  // testLRU() tests that the specified size limit is indeed honored, and\n  // the remaining objects in the map are indeed those that have been most\n  // recently used\n  @Test\n  public void testLRU() throws Exception {\n    LRUHashMap<String, String> lru = new LRUHashMap<String, String>(3);\n    assertEquals(0, lru.size());\n    lru.put(\"one\", \"Hello world\");\n    assertEquals(1, lru.size());\n    lru.put(\"two\", \"Hi man\");\n    assertEquals(2, lru.size());\n    lru.put(\"three\", \"Bonjour\");\n    assertEquals(3, lru.size());\n    lru.put(\"four\", \"Shalom\");\n    assertEquals(3, lru.size());\n    assertNotNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"two\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"one\"));\n    lru.put(\"five\", \"Yo!\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"three\")); // three was last used, so it got removed\n    assertNotNull(lru.get(\"five\"));\n    lru.get(\"four\");\n    lru.put(\"six\", \"hi\");\n    lru.put(\"seven\", \"hey dude\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"one\"));\n    assertNull(lru.get(\"two\"));\n    assertNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"five\"));\n    assertNotNull(lru.get(\"six\"));\n    assertNotNull(lru.get(\"seven\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","pathOld":"/dev/null","sourceNew":"  // testLRU() tests that the specified size limit is indeed honored, and\n  // the remaining objects in the map are indeed those that have been most\n  // recently used\n  @Test\n  public void testLRU() throws Exception {\n    LRUHashMap<String, String> lru = new LRUHashMap<String, String>(3);\n    assertEquals(0, lru.size());\n    lru.put(\"one\", \"Hello world\");\n    assertEquals(1, lru.size());\n    lru.put(\"two\", \"Hi man\");\n    assertEquals(2, lru.size());\n    lru.put(\"three\", \"Bonjour\");\n    assertEquals(3, lru.size());\n    lru.put(\"four\", \"Shalom\");\n    assertEquals(3, lru.size());\n    assertNotNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"two\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"one\"));\n    lru.put(\"five\", \"Yo!\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"three\")); // three was last used, so it got removed\n    assertNotNull(lru.get(\"five\"));\n    lru.get(\"four\");\n    lru.put(\"six\", \"hi\");\n    lru.put(\"seven\", \"hey dude\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"one\"));\n    assertNull(lru.get(\"two\"));\n    assertNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"five\"));\n    assertNotNull(lru.get(\"six\"));\n    assertNotNull(lru.get(\"seven\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","pathOld":"/dev/null","sourceNew":"  // testLRU() tests that the specified size limit is indeed honored, and\n  // the remaining objects in the map are indeed those that have been most\n  // recently used\n  @Test\n  public void testLRU() throws Exception {\n    LRUHashMap<String, String> lru = new LRUHashMap<String, String>(3);\n    assertEquals(0, lru.size());\n    lru.put(\"one\", \"Hello world\");\n    assertEquals(1, lru.size());\n    lru.put(\"two\", \"Hi man\");\n    assertEquals(2, lru.size());\n    lru.put(\"three\", \"Bonjour\");\n    assertEquals(3, lru.size());\n    lru.put(\"four\", \"Shalom\");\n    assertEquals(3, lru.size());\n    assertNotNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"two\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"one\"));\n    lru.put(\"five\", \"Yo!\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"three\")); // three was last used, so it got removed\n    assertNotNull(lru.get(\"five\"));\n    lru.get(\"four\");\n    lru.put(\"six\", \"hi\");\n    lru.put(\"seven\", \"hey dude\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"one\"));\n    assertNull(lru.get(\"two\"));\n    assertNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"five\"));\n    assertNotNull(lru.get(\"six\"));\n    assertNotNull(lru.get(\"seven\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/collections/TestLRUHashMap#testLRU().mjava","sourceNew":"  // testLRU() tests that the specified size limit is indeed honored, and\n  // the remaining objects in the map are indeed those that have been most\n  // recently used\n  @Test\n  public void testLRU() throws Exception {\n    LRUHashMap<String, String> lru = new LRUHashMap<String, String>(3);\n    assertEquals(0, lru.size());\n    lru.put(\"one\", \"Hello world\");\n    assertEquals(1, lru.size());\n    lru.put(\"two\", \"Hi man\");\n    assertEquals(2, lru.size());\n    lru.put(\"three\", \"Bonjour\");\n    assertEquals(3, lru.size());\n    lru.put(\"four\", \"Shalom\");\n    assertEquals(3, lru.size());\n    assertNotNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"two\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"one\"));\n    lru.put(\"five\", \"Yo!\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"three\")); // three was last used, so it got removed\n    assertNotNull(lru.get(\"five\"));\n    lru.get(\"four\");\n    lru.put(\"six\", \"hi\");\n    lru.put(\"seven\", \"hey dude\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"one\"));\n    assertNull(lru.get(\"two\"));\n    assertNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"five\"));\n    assertNotNull(lru.get(\"six\"));\n    assertNotNull(lru.get(\"seven\"));\n  }\n\n","sourceOld":"  // testLRU() tests that the specified size limit is indeed honored, and\n  // the remaining objects in the map are indeed those that have been most\n  // recently used\n  @Test\n  public void testLRU() throws Exception {\n    LRUHashMap<String, String> lru = new LRUHashMap<String, String>(3);\n    assertEquals(0, lru.size());\n    lru.put(\"one\", \"Hello world\");\n    assertEquals(1, lru.size());\n    lru.put(\"two\", \"Hi man\");\n    assertEquals(2, lru.size());\n    lru.put(\"three\", \"Bonjour\");\n    assertEquals(3, lru.size());\n    lru.put(\"four\", \"Shalom\");\n    assertEquals(3, lru.size());\n    assertNotNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"two\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"one\"));\n    lru.put(\"five\", \"Yo!\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"three\")); // three was last used, so it got removed\n    assertNotNull(lru.get(\"five\"));\n    lru.get(\"four\");\n    lru.put(\"six\", \"hi\");\n    lru.put(\"seven\", \"hey dude\");\n    assertEquals(3, lru.size());\n    assertNull(lru.get(\"one\"));\n    assertNull(lru.get(\"two\"));\n    assertNull(lru.get(\"three\"));\n    assertNotNull(lru.get(\"four\"));\n    assertNull(lru.get(\"five\"));\n    assertNotNull(lru.get(\"six\"));\n    assertNotNull(lru.get(\"seven\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}