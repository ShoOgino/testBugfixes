{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<FacetLabel> docCategories = randomCategories(random());\n    for (FacetLabel cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#addFacets(Document,FacetsConfig,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetsConfig config, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<FacetField> docCategories = randomCategories(random());\n    for (FacetField ff : docCategories) {\n      doc.add(ff);\n      String cp = ff.dim + \"/\" + ff.path[0];\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<FacetLabel> docCategories = randomCategories(random());\n    for (FacetLabel cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":null,"sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}