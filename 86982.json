{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of test was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of test was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157e325cec248f59df94ab8a12d22dda083e37aa","date":1285003635,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    for (MockDirectoryWrapper d : stores.keySet()) {\n      if (d.isOpen()) {\n        StackTraceElement elements[] = stores.get(d);\n        StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n        fail(\"directory of test was not closed, opened from: \" + element);\n      }\n    }\n    stores = null;\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f9dba8ffba48fba97d7a90fd45f6da87ba55736","date":1285244347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74637427311cf2dd084ed0cf383acdb039c1823f","date":1287326839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed) {\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()) + \n       (TEST_RANDOM_CODEC_PER_FIELD?\", \"+randomCodecProvider.toString():\"\"));\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed) {\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()) + \n       (TEST_RANDOM_CODEC_PER_FIELD?\", \"+randomCodecProvider.toString():\"\"));\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a437a884d67f37dfc512e1df760f59f8ea45c56a","date":1290942523,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    removeTestCodecs(codec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if tests failed, report some information back\n    if (testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codec + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4f2388e507c1b2d15471448118c30973dbe05c1","date":1292336937,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    threadCleanup(\"test class\");\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1dccbb7b01a3abbed915804b0d7aa34238b966f","date":1292708876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    threadCleanup(\"test class\");\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          StackTraceElement element = (elements.length > 1) ? elements[1] : null;\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.out.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"/dev/null","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea53729544bfdd226c3fb0367da9ec4db3e5f8b7","date":1294861323,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":null,"sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["e4f2388e507c1b2d15471448118c30973dbe05c1"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["a437a884d67f37dfc512e1df760f59f8ea45c56a"],"e4f2388e507c1b2d15471448118c30973dbe05c1":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"a437a884d67f37dfc512e1df760f59f8ea45c56a":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"74637427311cf2dd084ed0cf383acdb039c1823f":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"ea53729544bfdd226c3fb0367da9ec4db3e5f8b7":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["157e325cec248f59df94ab8a12d22dda083e37aa"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["ea53729544bfdd226c3fb0367da9ec4db3e5f8b7"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["74637427311cf2dd084ed0cf383acdb039c1823f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"157e325cec248f59df94ab8a12d22dda083e37aa":["43b04c27924fe393e38e9f0986e32c634f261859"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736","74637427311cf2dd084ed0cf383acdb039c1823f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ea53729544bfdd226c3fb0367da9ec4db3e5f8b7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","a437a884d67f37dfc512e1df760f59f8ea45c56a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["f1dccbb7b01a3abbed915804b0d7aa34238b966f"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["e4f2388e507c1b2d15471448118c30973dbe05c1"],"e4f2388e507c1b2d15471448118c30973dbe05c1":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"f1dccbb7b01a3abbed915804b0d7aa34238b966f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ea53729544bfdd226c3fb0367da9ec4db3e5f8b7"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"a437a884d67f37dfc512e1df760f59f8ea45c56a":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","3bb13258feba31ab676502787ab2e1779f129b7a"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["a437a884d67f37dfc512e1df760f59f8ea45c56a"],"74637427311cf2dd084ed0cf383acdb039c1823f":["13452165d8bf3d45a72f572aaed3c679735d3af2","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"ea53729544bfdd226c3fb0367da9ec4db3e5f8b7":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["74637427311cf2dd084ed0cf383acdb039c1823f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"43b04c27924fe393e38e9f0986e32c634f261859":["157e325cec248f59df94ab8a12d22dda083e37aa"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"157e325cec248f59df94ab8a12d22dda083e37aa":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}