{"path":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","commits":[{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", 4,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n      \n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc04e7d5cfaa61915e8bba4663e0aceac6e12008","date":1382964785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", 5,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      int n=0;\n      boolean foundLog = false;\n      for (;;) {\n        n++;\n        if (proc instanceof LogUpdateProcessor) {\n          foundLog = true;\n        }\n        proc = proc.next;\n        if (proc == null) break;\n      }\n\n      assertTrue( n < chain.getFactories().length );   // some processors should have been dropped\n      assertTrue( foundLog );  // make sure the marker interface was successful in keeping the log processor\n\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", 4,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n      \n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22f1ae6913ca287ed0d740bdbd6ebd694565f5bf","date":1432769776,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      \n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n\n      assertNotNull(name + \" distrib chain had no proc's in it\",\n                    proc);\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      int n=0;\n      boolean foundLog = false;\n      String seen = \"\";\n      for (;;) {\n        n++;\n        seen = seen + proc.toString() + \", \";\n        if (proc instanceof LogUpdateProcessor) {\n          foundLog = true;\n        }\n        if (null == proc.next)  {\n          break;\n        } else {\n          proc = proc.next;\n        }\n      }\n\n      // some processors should have been dropped\n      assertTrue(name + \" expected a distrib chain shorter then \" + EXPECTED_CHAIN_LENGTH + \" but got: \" + n\n                 + \" (\" + seen +\")\",\n                 n < EXPECTED_CHAIN_LENGTH );   \n      // make sure the marker interface was successful in keeping the log processor even though it comes\n      // before distrib\n      assertTrue(name + \" expected LogUpdateProcessor in chain due to @RunAllways, but not found: \" + seen,\n                 foundLog );  \n\n      // all of these (shortened) distrib chains should still end with RunUpdateprocessor\n      assertTrue(name + \" last processor isn't a RunUpdateProcessor: \" + proc.getClass().getName(),\n                 proc instanceof RunUpdateProcessor);\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", 5,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      int n=0;\n      boolean foundLog = false;\n      for (;;) {\n        n++;\n        if (proc instanceof LogUpdateProcessor) {\n          foundLog = true;\n        }\n        proc = proc.next;\n        if (proc == null) break;\n      }\n\n      assertTrue( n < chain.getFactories().length );   // some processors should have been dropped\n      assertTrue( foundLog );  // make sure the marker interface was successful in keeping the log processor\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e893529869a84120f1de2a2368e92d5fffcc56","date":1432940153,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      \n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length\", EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // Custom comes first in all three of our chains\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      // varies depending on chain, but definitely shouldn't be Custom\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n\n      assertNotNull(name + \" distrib chain had no proc's in it\",\n                    proc);\n      assertFalse(name + \" post distrib proc should not be a CustomUpdateRequestProcessor: \" \n                 + proc.getClass().getName(),\n                 proc instanceof CustomUpdateRequestProcessor);\n\n      int n=0;\n      boolean foundLog = false;\n      String seen = \"\";\n      for (;;) {\n        n++;\n        seen = seen + proc.toString() + \", \";\n        if (proc instanceof LogUpdateProcessor) {\n          foundLog = true;\n        }\n        if (null == proc.next)  {\n          break;\n        } else {\n          proc = proc.next;\n        }\n      }\n\n      // some processors should have been dropped\n      assertTrue(name + \" expected a distrib chain shorter then \" + EXPECTED_CHAIN_LENGTH + \" but got: \" + n\n                 + \" (\" + seen +\")\",\n                 n < EXPECTED_CHAIN_LENGTH );   \n      // make sure the marker interface was successful in keeping the log processor even though it comes\n      // before distrib\n      assertTrue(name + \" expected LogUpdateProcessor in chain due to @RunAllways, but not found: \" + seen,\n                 foundLog );  \n\n      // all of these (shortened) distrib chains should still end with RunUpdateprocessor\n      assertTrue(name + \" last processor isn't a RunUpdateProcessor: \" + proc.getClass().getName(),\n                 proc instanceof RunUpdateProcessor);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["817fc4762cd649397b27305970dad27295735f3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2d4aa3d1fb1b943012b89067a53974585245197","date":1432947377,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\",\n               LogUpdateProcessor.log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\",\n               LogUpdateProcessor.log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getFactories().length);\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAllways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"543992c52fe295c8b15aafe4b066e7e3a9a42c48","date":1510862949,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"NONE\"), // just some non-blank value\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAlways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"non_blank_value\"),\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAllways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817fc4762cd649397b27305970dad27295735f3a","date":1561046362,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" factory chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n\n      int expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      if (\"distrib-chain-noop\".equals(name)) { // NoOpDistributingUpdateProcessorFactory produces no processor\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n\n      assertEquals(name + \" procs size: \" + procs.toString(), expectedProcLen, procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"NONE\"), // just some non-blank value\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAlways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n\n      expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      expectedProcLen--; // -1 = all chains lose CustomUpdateRequestProcessorFactory\n      if (\"distrib-chain-explicit\".equals(name) == false) {\n        // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n        // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n          expectedProcLen, procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n      assertEquals(name + \" procs size: \" + procs.toString(),\n                   // -1 = NoOpDistributingUpdateProcessorFactory produces no processor\n                   EXPECTED_CHAIN_LENGTH - (\"distrib-chain-noop\".equals(name) ? 1 : 0),\n                   procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"NONE\"), // just some non-blank value\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAlways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n                   // -1 = all chains lose CustomUpdateRequestProcessorFactory\n                   // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n                   // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n                   EXPECTED_CHAIN_LENGTH - ( \"distrib-chain-explicit\".equals(name) ? 1 : 2),\n                   procs.size());\n    }\n\n  }\n\n","bugFix":["87e893529869a84120f1de2a2368e92d5fffcc56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testUpdateDistribChainSkipping().mjava","sourceNew":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" factory chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n\n      int expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      if (\"distrib-chain-noop\".equals(name)) { // NoOpDistributingUpdateProcessorFactory produces no processor\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n\n      assertEquals(name + \" procs size: \" + procs.toString(), expectedProcLen, procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"NONE\"), // just some non-blank value\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAlways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessorFactory.RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n\n      expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      expectedProcLen--; // -1 = all chains lose CustomUpdateRequestProcessorFactory\n      if (\"distrib-chain-explicit\".equals(name) == false) {\n        // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n        // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n          expectedProcLen, procs.size());\n    }\n\n  }\n\n","sourceOld":"  public void testUpdateDistribChainSkipping() throws Exception {\n\n    // a key part of this test is verifying that LogUpdateProcessor is found in all chains because it\n    // is a @RunAlways processor -- but in order for that to work, we have to sanity check that the log\n    // level is at least \"INFO\" otherwise the factory won't even produce a processor and all our assertions\n    // are for nought.  (see LogUpdateProcessorFactory.getInstance)\n    //\n    // TODO: maybe create a new mock Processor w/ @RunAlways annot if folks feel requiring INFO is evil.\n    assertTrue(\"Tests must be run with INFO level logging \"+\n               \"otherwise LogUpdateProcessor isn't used and can't be tested.\", log.isInfoEnabled());\n    \n    final int EXPECTED_CHAIN_LENGTH = 5;\n    SolrCore core = h.getCore();\n    for (final String name : Arrays.asList(\"distrib-chain-explicit\",\n                                           \"distrib-chain-implicit\",\n                                           \"distrib-chain-noop\")) {\n\n      UpdateRequestProcessor proc;\n      List<UpdateRequestProcessor> procs;\n      \n      UpdateRequestProcessorChain chain = core.getUpdateProcessingChain(name);\n      assertNotNull(name, chain);\n\n      // either explicitly, or because of injection\n      assertEquals(name + \" factory chain length: \" + chain.toString(), EXPECTED_CHAIN_LENGTH,\n                   chain.getProcessors().size());\n\n      // test a basic (non distrib) chain\n      proc = chain.createProcessor(req(), new SolrQueryResponse());\n      procs = procToList(proc);\n\n      int expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      if (\"distrib-chain-noop\".equals(name)) { // NoOpDistributingUpdateProcessorFactory produces no processor\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n\n      assertEquals(name + \" procs size: \" + procs.toString(), expectedProcLen, procs.size());\n      \n      // Custom comes first in all three of our chains\n      assertTrue(name + \" first processor isn't a CustomUpdateRequestProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof CustomUpdateRequestProcessor\n                   && procs.get(0) instanceof CustomUpdateRequestProcessor));\n\n      // Log should always come second in our chain.\n      assertNotNull(name + \" proc.next is null\", proc.next);\n      assertNotNull(name + \" second proc is null\", procs.get(1));\n\n      assertTrue(name + \" second proc isn't LogUpdateProcessor: \" + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc.next instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(1) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // fetch the distributed version of this chain\n      proc = chain.createProcessor(req(DISTRIB_UPDATE_PARAM, \"NONE\"), // just some non-blank value\n                                   new SolrQueryResponse());\n      procs = procToList(proc);\n      assertNotNull(name + \" (distrib) chain produced null proc\", proc);\n      assertFalse(name + \" (distrib) procs is empty\", procs.isEmpty());\n\n      // for these 3 (distrib) chains, the first proc should always be LogUpdateProcessor\n      assertTrue(name + \" (distrib) first proc should be LogUpdateProcessor because of @RunAlways: \"\n                 + procs.toString(),\n                 ( // compare them both just because i'm going insane and the more checks the better\n                   proc instanceof LogUpdateProcessorFactory.LogUpdateProcessor\n                   && procs.get(0) instanceof LogUpdateProcessorFactory.LogUpdateProcessor));\n\n      // for these 3 (distrib) chains, the last proc should always be RunUpdateProcessor\n      assertTrue(name + \" (distrib) last processor isn't a RunUpdateProcessor: \" + procs.toString(),\n                 procs.get(procs.size()-1) instanceof RunUpdateProcessor );\n\n      // either 1 proc was droped in distrib mode, or 1 for the \"implicit\" chain\n\n      expectedProcLen = EXPECTED_CHAIN_LENGTH;\n      expectedProcLen--; // -1 = all chains lose CustomUpdateRequestProcessorFactory\n      if (\"distrib-chain-explicit\".equals(name) == false) {\n        // -1 = distrib-chain-noop: NoOpDistributingUpdateProcessorFactory produces no processor\n        // -1 = distrib-chain-implicit: does RemoveBlank before distrib\n        expectedProcLen--;\n      }\n      if (procs.stream().anyMatch(p -> p.getClass().getSimpleName().equals(\"NestedUpdateProcessor\"))) {\n        expectedProcLen++; // NestedUpdate sneaks in via RunUpdate's Factory.\n      }\n      assertEquals(name + \" (distrib) chain has wrong length: \" + procs.toString(),\n          expectedProcLen, procs.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22f1ae6913ca287ed0d740bdbd6ebd694565f5bf":["dc04e7d5cfaa61915e8bba4663e0aceac6e12008"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"817fc4762cd649397b27305970dad27295735f3a":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["d2d4aa3d1fb1b943012b89067a53974585245197"],"87e893529869a84120f1de2a2368e92d5fffcc56":["22f1ae6913ca287ed0d740bdbd6ebd694565f5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","0158ced21948b6626f733c1c42c1e18d94449789"],"d2d4aa3d1fb1b943012b89067a53974585245197":["87e893529869a84120f1de2a2368e92d5fffcc56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9367dbf5b00d7764583d991c1888f4acc9c9991a","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"dc04e7d5cfaa61915e8bba4663e0aceac6e12008":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["817fc4762cd649397b27305970dad27295735f3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0158ced21948b6626f733c1c42c1e18d94449789":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"22f1ae6913ca287ed0d740bdbd6ebd694565f5bf":["87e893529869a84120f1de2a2368e92d5fffcc56"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["817fc4762cd649397b27305970dad27295735f3a"],"817fc4762cd649397b27305970dad27295735f3a":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"87e893529869a84120f1de2a2368e92d5fffcc56":["d2d4aa3d1fb1b943012b89067a53974585245197"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["543992c52fe295c8b15aafe4b066e7e3a9a42c48","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d2d4aa3d1fb1b943012b89067a53974585245197":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"dc04e7d5cfaa61915e8bba4663e0aceac6e12008":["22f1ae6913ca287ed0d740bdbd6ebd694565f5bf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["dc04e7d5cfaa61915e8bba4663e0aceac6e12008"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}