{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      instances.put(field.name, instance);\n      activeCount.incrementAndGet();\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      instances.put(field.name, instance);\n      activeCount.incrementAndGet();\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    if (UndeadNormsProducer.isUndead(field)) {\n      // Bring undead norms back to life; this is set in Lucene46FieldInfosFormat, to emulate pre-5.0 undead norms\n      return DocValues.emptyNumeric();\n    }\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    if (UndeadNormsProducer.isUndead(field)) {\n      // Bring undead norms back to life; this is set in Lucene46FieldInfosFormat, to emulate pre-5.0 undead norms\n      return DocValues.emptyNumeric();\n    }\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#getNorms(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized NumericDocValues getNorms(FieldInfo field) throws IOException {\n    if (UndeadNormsProducer.isUndead(field)) {\n      // Bring undead norms back to life; this is set in Lucene46FieldInfosFormat, to emulate pre-5.0 undead norms\n      return DocValues.emptyNumeric();\n    }\n    NumericDocValues instance = instances.get(field.name);\n    if (instance == null) {\n      instance = loadNorms(field);\n      if (!merging) {\n        instances.put(field.name, instance);\n        activeCount.incrementAndGet();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["bc8f80fee115148a0e4a0574560be06b494de821","05da2d758a6089e737cdfc230e57a51b472b94b6"],"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","71387d8cb6923eb831b17a8b734608ba2e21c653"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"bc8f80fee115148a0e4a0574560be06b494de821":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}