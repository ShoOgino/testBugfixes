{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","commits":[{"id":"89261f2e2f1daac6de850bf45b31f5b8d3573f29","date":1537189734,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForNotSupportedCases() {\n    String[] doc = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ii\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc));\n    assertU(commit());\n\n    // collapsing on multivalued field\n    assertQEx(\"Should Fail with Bad Request\", \"Collapsing not supported on multivalued fields\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=test_ii}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // collapsing on unknown field\n    assertQEx(\"Should Fail with Bad Request\", \"org.apache.solr.search.SyntaxError: undefined field: \\\"bleh\\\"\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=bleh}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","sourceNew":"  @Test\n  public void testForNotSupportedCases() {\n    String[] doc = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ii\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\",\n                    \"not_indexed_sS\", \"zzz\", \"indexed_s_not_uninvert\", \"zzz\"};\n    assertU(adoc(doc));\n    assertU(commit());\n\n    // collapsing on multivalued field\n    assertQEx(\"Should Fail with Bad Request\", \"Collapsing not supported on multivalued fields\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=test_ii}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // collapsing on unknown field\n    assertQEx(\"Should Fail with Bad Request\", \"org.apache.solr.search.SyntaxError: undefined field: \\\"bleh\\\"\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=bleh}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false ...\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      { // this currently propogates up the low level DocValues error in the common case...\n        Exception e = expectThrows(RuntimeException.class, IllegalStateException.class,\n                                    () -> h.query(req(params(\"q\", \"*:*\",\n                                                             \"fq\", \"{!collapse field=\"+f+\"}\"))));\n        assertTrue(\"unexpected Message: \" + e.getMessage(),\n                   e.getMessage().contains(\"Re-index with correct docvalues type\"));\n      }\n      { // ... but in the case of hint=top_fc a bare NPE gets propogated up (SOLR-12979)...\n        expectThrows(RuntimeException.class, NullPointerException.class, \n                     () -> h.query(req(params(\"q\", \"*:*\",\n                                              \"fq\", \"{!collapse field=\"+f+\" hint=top_fc}\"))));\n      }\n      \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForNotSupportedCases() {\n    String[] doc = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ii\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc));\n    assertU(commit());\n\n    // collapsing on multivalued field\n    assertQEx(\"Should Fail with Bad Request\", \"Collapsing not supported on multivalued fields\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=test_ii}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // collapsing on unknown field\n    assertQEx(\"Should Fail with Bad Request\", \"org.apache.solr.search.SyntaxError: undefined field: \\\"bleh\\\"\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=bleh}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":["f91f5834f35d94627a0568326e442dce3d92764c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f91f5834f35d94627a0568326e442dce3d92764c","date":1561436441,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testForNotSupportedCases().mjava","sourceNew":"  @Test\n  public void testForNotSupportedCases() {\n    String[] doc = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ii\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\",\n                    \"not_indexed_sS\", \"zzz\", \"indexed_s_not_uninvert\", \"zzz\"};\n    assertU(adoc(doc));\n    assertU(commit());\n\n    // collapsing on multivalued field\n    assertQEx(\"Should Fail with Bad Request\", \"Collapsing not supported on multivalued fields\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=test_ii}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // collapsing on unknown field\n    assertQEx(\"Should Fail with Bad Request\", \"org.apache.solr.search.SyntaxError: undefined field: \\\"bleh\\\"\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=bleh}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false ...\n    // this also tests docValues=false along with indexed=false or univertible=false\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      {\n        SolrException e = expectThrows(SolrException.class,\n                                    () -> h.query(req(params(\"q\", \"*:*\",\n                                                             \"fq\", \"{!collapse field=\"+f+\"}\"))));\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"unexpected Message: \" + e.getMessage(),\n                   e.getMessage().contains(\"Collapsing field '\" + f + \"' \" +\n                       \"should be either docValues enabled or indexed with uninvertible enabled\"));\n      }\n      {\n        SolrException e = expectThrows(SolrException.class,\n            () -> h.query(req(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+f+\" hint=top_fc}\")));\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"unexpected Message: \" + e.getMessage(),\n            e.getMessage().contains(\"Collapsing field '\" + f + \"' \" +\n                \"should be either docValues enabled or indexed with uninvertible enabled\"));\n      }\n      \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForNotSupportedCases() {\n    String[] doc = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ii\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\",\n                    \"not_indexed_sS\", \"zzz\", \"indexed_s_not_uninvert\", \"zzz\"};\n    assertU(adoc(doc));\n    assertU(commit());\n\n    // collapsing on multivalued field\n    assertQEx(\"Should Fail with Bad Request\", \"Collapsing not supported on multivalued fields\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=test_ii}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // collapsing on unknown field\n    assertQEx(\"Should Fail with Bad Request\", \"org.apache.solr.search.SyntaxError: undefined field: \\\"bleh\\\"\",\n        req(\"q\",\"*:*\", \"fq\",\"{!collapse field=bleh}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false ...\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      { // this currently propogates up the low level DocValues error in the common case...\n        Exception e = expectThrows(RuntimeException.class, IllegalStateException.class,\n                                    () -> h.query(req(params(\"q\", \"*:*\",\n                                                             \"fq\", \"{!collapse field=\"+f+\"}\"))));\n        assertTrue(\"unexpected Message: \" + e.getMessage(),\n                   e.getMessage().contains(\"Re-index with correct docvalues type\"));\n      }\n      { // ... but in the case of hint=top_fc a bare NPE gets propogated up (SOLR-12979)...\n        expectThrows(RuntimeException.class, NullPointerException.class, \n                     () -> h.query(req(params(\"q\", \"*:*\",\n                                              \"fq\", \"{!collapse field=\"+f+\" hint=top_fc}\"))));\n      }\n      \n    }\n  }\n\n","bugFix":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89261f2e2f1daac6de850bf45b31f5b8d3573f29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f91f5834f35d94627a0568326e442dce3d92764c":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["89261f2e2f1daac6de850bf45b31f5b8d3573f29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f91f5834f35d94627a0568326e442dce3d92764c"]},"commit2Childs":{"89261f2e2f1daac6de850bf45b31f5b8d3573f29":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89261f2e2f1daac6de850bf45b31f5b8d3573f29"],"f91f5834f35d94627a0568326e442dce3d92764c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["f91f5834f35d94627a0568326e442dce3d92764c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}