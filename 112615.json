{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","commits":[{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see org.apache.solr.cloud.CloudUtil#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","sourceNew":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","sourceOld":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see org.apache.solr.cloud.CloudUtil#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","sourceNew":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","sourceOld":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n        writtenKeys.add(k);\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","sourceNew":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n\n    // reset\n    writtenKeys.clear();\n    // now we create a cluster policy that is intentionally empty which should prevent the implicit\n    // cluster policy from being written but should emit an empty key/val pair for cluster policy\n    policy = new Policy(Utils.makeMap(CLUSTER_POLICY, Collections.emptyList()));\n    // sanity checks\n    assertFalse(policy.isEmpty());\n    assertTrue(policy.hasEmptyPreferences());\n    assertFalse(policy.hasEmptyClusterPolicy());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_POLICY));\n  }\n\n","sourceOld":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","sourceNew":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n\n    // reset\n    writtenKeys.clear();\n    // now we create a cluster policy that is intentionally empty which should prevent the implicit\n    // cluster policy from being written but should emit an empty key/val pair for cluster policy\n    policy = new Policy(Utils.makeMap(CLUSTER_POLICY, Collections.emptyList()));\n    // sanity checks\n    assertFalse(policy.isEmpty());\n    assertTrue(policy.hasEmptyPreferences());\n    assertFalse(policy.hasEmptyClusterPolicy());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_POLICY));\n  }\n\n","sourceOld":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n\n    // reset\n    writtenKeys.clear();\n    // now we create a cluster policy that is intentionally empty which should prevent the implicit\n    // cluster policy from being written but should emit an empty key/val pair for cluster policy\n    policy = new Policy(Utils.makeMap(CLUSTER_POLICY, Collections.emptyList()));\n    // sanity checks\n    assertFalse(policy.isEmpty());\n    assertTrue(policy.hasEmptyPreferences());\n    assertFalse(policy.hasEmptyClusterPolicy());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_POLICY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyMapWriterWithEmptyPreferences().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that an empty policy should not persist implicitly added keys to MapWriter\n   * <p>\n   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever\n   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.\n   *\n   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)\n   */\n  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    // first we create a completely empty policy\n    Policy policy = new Policy();\n    // sanity check that the default cluster preferences were added implicitly\n    assertNotNull(policy.getClusterPreferences());\n    // and they were the same as the default preferences\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    Set<String> writtenKeys = new HashSet<>();\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // but those implicitly added cluster preferences are never written by MapWriter\n    assertEquals(0, writtenKeys.size());\n\n    // reset\n    writtenKeys.clear();\n    // now we create a policy that only has cluster preferences which happen to be the same as the default\n    // preferences\n    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));\n    // sanity checks\n    assertNotNull(policy.getClusterPreferences());\n    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    // since the user explicitly added those preferences, they should be written by MapWriter\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));\n\n    // reset\n    writtenKeys.clear();\n    // now we create a cluster policy that is intentionally empty which should prevent the implicit\n    // cluster policy from being written but should emit an empty key/val pair for cluster policy\n    policy = new Policy(Utils.makeMap(CLUSTER_POLICY, Collections.emptyList()));\n    // sanity checks\n    assertFalse(policy.isEmpty());\n    assertTrue(policy.hasEmptyPreferences());\n    assertFalse(policy.hasEmptyClusterPolicy());\n    policy.writeMap(new MapWriter.EntryWriter() {\n      @Override\n      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {\n        writtenKeys.add(k.toString());\n        return this;\n      }\n    });\n    assertEquals(1, writtenKeys.size());\n    assertTrue(writtenKeys.contains(CLUSTER_POLICY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"457ac99a6d7227f954082cc753a08b18225e4553":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["457ac99a6d7227f954082cc753a08b18225e4553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["457ac99a6d7227f954082cc753a08b18225e4553"],"457ac99a6d7227f954082cc753a08b18225e4553":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}