{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","commits":[{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = new NumericDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n\n      maxValue = Math.max(values.maxValue(), maxValue);\n      minValue = Math.min(values.minValue(), minValue);\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      final long finalMaxValue = maxValue;\n      final long finalMinValue = minValue;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n\n        @Override\n        public long minValue() {\n          return finalMinValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return finalMaxValue;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = new NumericDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = new NumericDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n\n      maxValue = Math.max(values.maxValue(), maxValue);\n      minValue = Math.min(values.minValue(), minValue);\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      final long finalMaxValue = maxValue;\n      final long finalMinValue = minValue;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n\n        @Override\n        public long minValue() {\n          return finalMinValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return finalMaxValue;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = NumericDocValues.EMPTY;\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = new NumericDocValues.EMPTY(ctx.reader().maxDoc());\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n\n        @Override\n        public int size() {\n          return r.maxDoc();\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bcc8a3dc0f439d38bb5cca141e4674eab17245","date":1357919773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values == null) {\n        values = NumericDocValues.EMPTY;\n      } else {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a2758d07e0d83d524af25cee0d8a04b6394f47","date":1357921039,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MultiSimpleDocValues#simpleNumericValues(IndexReader,String).mjava","sourceNew":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public static NumericDocValues simpleNumericValues(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().getNumericDocValues(field);\n    }\n    boolean anyReal = false;\n    for(AtomicReaderContext ctx : leaves) {\n      NumericDocValues values = ctx.reader().getNumericDocValues(field);\n\n      if (values != null) {\n        anyReal = true;\n      }\n    }\n\n    if (!anyReal) {\n      return null;\n    } else {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          int subIndex = ReaderUtil.subIndex(docID, leaves);\n          NumericDocValues values;\n          try {\n            values = leaves.get(subIndex).reader().getNumericDocValues(field);\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (values == null) {\n            return 0;\n          } else {\n            return values.get(docID - leaves.get(subIndex).docBase);\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a2758d07e0d83d524af25cee0d8a04b6394f47":["f8bcc8a3dc0f439d38bb5cca141e4674eab17245"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8bcc8a3dc0f439d38bb5cca141e4674eab17245":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"32fb848e256860b63adc9c2b068f386032c77b67":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["32fb848e256860b63adc9c2b068f386032c77b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"94a2758d07e0d83d524af25cee0d8a04b6394f47":[],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad7de846867bd14c63f9dd19df082f72c5ea9c54","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8bcc8a3dc0f439d38bb5cca141e4674eab17245":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"32fb848e256860b63adc9c2b068f386032c77b67":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["f8bcc8a3dc0f439d38bb5cca141e4674eab17245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94a2758d07e0d83d524af25cee0d8a04b6394f47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}