{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","commits":[{"id":"ee750b40d46c97f5211190d360670a9d5584a762","date":1486021535,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl().mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (SYSTEM_COLL.equals(corename) && \"POST\".equals(req.getMethod()) && !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl() throws Exception {\n    if (SYSTEM_COLL.equals(corename) && \"POST\".equals(req.getMethod()) && !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cfebd661446aa4e49805af2e74f99aaa843f051","date":1486022467,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (SYSTEM_COLL.equals(corename) && \"POST\".equals(req.getMethod()) && !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create .system collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create .system collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find .system collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          timeOut.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          Thread.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#autoCreateSystemColl(String).mjava","sourceNew":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create {} collection\", SYSTEM_COLL);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          timeOut.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","sourceOld":"  protected void autoCreateSystemColl(String corename) throws Exception {\n    if (core == null &&\n        SYSTEM_COLL.equals(corename) &&\n        \"POST\".equals(req.getMethod()) &&\n        !cores.getZkController().getClusterState().hasCollection(SYSTEM_COLL)) {\n      log.info(\"Going to auto-create \" + SYSTEM_COLL + \" collection\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      String repFactor = String.valueOf(Math.min(3, cores.getZkController().getClusterState().getLiveNodes().size()));\n      cores.getCollectionsHandler().handleRequestBody(new LocalSolrQueryRequest(null,\n          new ModifiableSolrParams()\n              .add(ACTION, CREATE.toString())\n              .add( NAME, SYSTEM_COLL)\n              .add(REPLICATION_FACTOR, repFactor)), rsp);\n      if (rsp.getValues().get(\"success\") == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not auto-create \" + SYSTEM_COLL + \" collection: \"+ Utils.toJSONString(rsp.getValues()));\n      }\n      TimeOut timeOut = new TimeOut(3, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (; ; ) {\n        if (cores.getZkController().getClusterState().getCollectionOrNull(SYSTEM_COLL) != null) {\n          break;\n        } else {\n          if (timeOut.hasTimedOut()) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find \" + SYSTEM_COLL + \" collection even after 3 seconds\");\n          }\n          timeOut.sleep(50);\n        }\n      }\n\n      action = RETRY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2cfebd661446aa4e49805af2e74f99aaa843f051":["ee750b40d46c97f5211190d360670a9d5584a762"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["2cfebd661446aa4e49805af2e74f99aaa843f051","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["2cfebd661446aa4e49805af2e74f99aaa843f051"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee750b40d46c97f5211190d360670a9d5584a762":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["2cfebd661446aa4e49805af2e74f99aaa843f051","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"2cfebd661446aa4e49805af2e74f99aaa843f051":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee750b40d46c97f5211190d360670a9d5584a762"],"ee750b40d46c97f5211190d360670a9d5584a762":["2cfebd661446aa4e49805af2e74f99aaa843f051"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}