{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","commits":[{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","pathOld":"/dev/null","sourceNew":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      return deletes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","sourceNew":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      deletes.freeze();\n      return deletes;\n    }\n\n","sourceOld":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      return deletes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","sourceNew":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      deletes.freeze();\n      return deletes;\n    }\n\n","sourceOld":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      return deletes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","sourceNew":"    private PackedLongValues getDeletes(List<AtomicReader> readers) {\n      PackedLongValues.Builder deletes = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      return deletes.build();\n    }\n\n","sourceOld":"    private MonotonicAppendingLongBuffer getDeletes(List<AtomicReader> readers) {\n      MonotonicAppendingLongBuffer deletes = new MonotonicAppendingLongBuffer();\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      deletes.freeze();\n      return deletes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDeletes(List[AtomicReader]).mjava","sourceNew":null,"sourceOld":"    private PackedLongValues getDeletes(List<AtomicReader> readers) {\n      PackedLongValues.Builder deletes = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int deleteCount = 0;\n      for (AtomicReader reader : readers) {\n        final int maxDoc = reader.maxDoc();\n        final Bits liveDocs = reader.getLiveDocs();\n        for (int i = 0; i < maxDoc; ++i) {\n          if (liveDocs != null && !liveDocs.get(i)) {\n            ++deleteCount;\n          } else {\n            deletes.add(deleteCount);\n          }\n        }\n      }\n      return deletes.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}