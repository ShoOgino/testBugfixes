{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructRangeFacet(String,AnalyticsRangeFacetRequest,IndexSchema).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructRangeFacet(String,AnalyticsRangeFacetRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static RangeFacet constructRangeFacet(String name, AnalyticsRangeFacetRequest facetRequest, IndexSchema schema) throws SolrException {\n    if (facetRequest.field == null || facetRequest.field.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a field to facet over, '\" +name + \"' does not.\");\n    }\n    SchemaField field = schema.getFieldOrNull(facetRequest.field);\n    if (field == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must have a valid field as the second parameter. The '\" + name + \"' facet \"\n          + \"tries to facet over the non-existent field: \" + facetRequest.field);\n    }\n\n    if (facetRequest.start == null || facetRequest.start.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a start value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.end == null || facetRequest.end.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a end value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.gaps == null || facetRequest.gaps.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a gap or list of gaps to determine facet buckets, '\" +name + \"' does not.\");\n    }\n    RangeFacet facet = new RangeFacet(name, field, facetRequest.start, facetRequest.end, facetRequest.gaps);\n\n    facet.setHardEnd(facetRequest.hardend);\n\n    if (facetRequest.include != null && facetRequest.include.size() > 0) {\n      facet.setInclude(constructInclude(facetRequest.include));\n    }\n    if (facetRequest.others != null && facetRequest.others.size() > 0) {\n      facet.setOthers(constructOthers(facetRequest.others, name));\n    }\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructRangeFacet(String,AnalyticsRangeFacetRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static RangeFacet constructRangeFacet(String name, AnalyticsRangeFacetRequest facetRequest, IndexSchema schema) throws SolrException {\n    if (facetRequest.field == null || facetRequest.field.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a field to facet over, '\" +name + \"' does not.\");\n    }\n    SchemaField field = schema.getFieldOrNull(facetRequest.field);\n    if (field == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must have a valid field as the second parameter. The '\" + name + \"' facet \"\n          + \"tries to facet over the non-existent field: \" + facetRequest.field);\n    }\n\n    if (facetRequest.start == null || facetRequest.start.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a start value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.end == null || facetRequest.end.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a end value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.gaps == null || facetRequest.gaps.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a gap or list of gaps to determine facet buckets, '\" +name + \"' does not.\");\n    }\n    RangeFacet facet = new RangeFacet(name, field, facetRequest.start, facetRequest.end, facetRequest.gaps);\n\n    facet.setHardEnd(facetRequest.hardend);\n\n    if (facetRequest.include != null && facetRequest.include.size() > 0) {\n      facet.setInclude(constructInclude(facetRequest.include));\n    }\n    if (facetRequest.others != null && facetRequest.others.size() > 0) {\n      facet.setOthers(constructOthers(facetRequest.others, name));\n    }\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructRangeFacet(String,AnalyticsRangeFacetRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static RangeFacet constructRangeFacet(String name, AnalyticsRangeFacetRequest facetRequest, IndexSchema schema) throws SolrException {\n    if (facetRequest.field == null || facetRequest.field.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a field to facet over, '\" +name + \"' does not.\");\n    }\n    SchemaField field = schema.getFieldOrNull(facetRequest.field);\n    if (field == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must have a valid field as the second parameter. The '\" + name + \"' facet \"\n          + \"tries to facet over the non-existent field: \" + facetRequest.field);\n    }\n\n    if (facetRequest.start == null || facetRequest.start.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a start value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.end == null || facetRequest.end.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a end value, '\" +name + \"' does not.\");\n    }\n    if (facetRequest.gaps == null || facetRequest.gaps.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Range Facets must specify a gap or list of gaps to determine facet buckets, '\" +name + \"' does not.\");\n    }\n    RangeFacet facet = new RangeFacet(name, field, facetRequest.start, facetRequest.end, facetRequest.gaps);\n\n    facet.setHardEnd(facetRequest.hardend);\n\n    if (facetRequest.include != null && facetRequest.include.size() > 0) {\n      facet.setInclude(constructInclude(facetRequest.include));\n    }\n    if (facetRequest.others != null && facetRequest.others.size() > 0) {\n      facet.setOthers(constructOthers(facetRequest.others, name));\n    }\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}