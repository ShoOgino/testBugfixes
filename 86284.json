{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"874880417e0b2612f777ecd0afe39e0d90486752","date":1123795738,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    org.apache.lucene.analysis.Token t;\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      t = source.next();\n      if (t != null) {\n        part1 = t.termText();\n      }\n      multipleTokens = source.next() != null;\n    } catch (IOException e) {\n      t = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    // part2\n    try {\n      t = source.next();\n      if (t != null) {\n        part2 = t.termText();\n      }\n      multipleTokens = source.next() != null;\n    } catch (IOException e) {\n      t = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    final Token reusableToken = new Token();\n    Token nextToken;\n    Token multipleToken;\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      nextToken = source.next(reusableToken);\n      if (nextToken != null) {\n        part1 = nextToken.term();\n      }\n      multipleTokens = source.next(reusableToken) != null;\n    } catch (IOException e) {\n      nextToken = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    try {\n      nextToken = source.next(reusableToken);\n      if (nextToken != null) {\n        part2 = nextToken.term();\n      }\n      multipleTokens = source.next(reusableToken) != null;\n    } catch (IOException e) {\n      nextToken = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    org.apache.lucene.analysis.Token t;\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      t = source.next();\n      if (t != null) {\n        part1 = t.termText();\n      }\n      multipleTokens = source.next() != null;\n    } catch (IOException e) {\n      t = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    // part2\n    try {\n      t = source.next();\n      if (t != null) {\n        part2 = t.termText();\n      }\n      multipleTokens = source.next() != null;\n    } catch (IOException e) {\n      t = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    final Token reusableToken = new Token();\n    Token nextToken;\n    Token multipleToken;\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      nextToken = source.next(reusableToken);\n      if (nextToken != null) {\n        part1 = nextToken.term();\n      }\n      multipleTokens = source.next(reusableToken) != null;\n    } catch (IOException e) {\n      nextToken = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    try {\n      nextToken = source.next(reusableToken);\n      if (nextToken != null) {\n        part2 = nextToken.term();\n      }\n      multipleTokens = source.next(reusableToken) != null;\n    } catch (IOException e) {\n      nextToken = null;\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["874880417e0b2612f777ecd0afe39e0d90486752"],"874880417e0b2612f777ecd0afe39e0d90486752":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"874880417e0b2612f777ecd0afe39e0d90486752":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["874880417e0b2612f777ecd0afe39e0d90486752"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}