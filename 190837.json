{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName,collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName,collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec","date":1498503790,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["08ff4ce2031320460b178bbe9ab0bbb5b04f58ec"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["08ff4ce2031320460b178bbe9ab0bbb5b04f58ec"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}