{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testFlattenedGraph().mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testFlattenedGraph().mjava","pathOld":"/dev/null","sourceNew":"  /** If we expand synonyms during indexing, it's a bit better than\n   *  SynonymFilter is today, but still necessarily has false\n   *  positive and negative PhraseQuery matches because we do not  \n   *  index posLength, so we lose information. */\n  public void testFlattenedGraph() throws Exception {\n\n    SynonymMap.Builder b = new SynonymMap.Builder();\n    add(b, \"wtf\", \"what the fudge\", true);\n\n    Analyzer a = getFlattenAnalyzer(b, true);\n\n    assertAnalyzesTo(a, \"wtf happened\",\n                     new String[] {\"what\", \"wtf\", \"the\", \"fudge\", \"happened\"},\n                     new int[]    {    0,     0,      0,     0,       4},  \n                     new int[]    {    3,     3,      3,     3,       12},\n                     null,\n                     new int[]    {    1,     0,      1,     1,       1},\n                     new int[]    {    1,     3,      1,     1,       1},\n                     true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"wtf happened\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    // Good (this should not match, and doesn't):\n    assertEquals(0, s.count(new PhraseQuery(\"field\", \"what\", \"happened\")));\n\n    // Bad (this should match, but doesn't):\n    assertEquals(0, s.count(new PhraseQuery(\"field\", \"wtf\", \"happened\")));\n\n    // Good (this should match, and does):\n    assertEquals(1, s.count(new PhraseQuery(\"field\", \"what\", \"the\", \"fudge\", \"happened\")));\n\n    // Bad (this should not match, but does):\n    assertEquals(1, s.count(new PhraseQuery(\"field\", \"wtf\", \"the\")));\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testFlattenedGraph().mjava","pathOld":"/dev/null","sourceNew":"  /** If we expand synonyms during indexing, it's a bit better than\n   *  SynonymFilter is today, but still necessarily has false\n   *  positive and negative PhraseQuery matches because we do not  \n   *  index posLength, so we lose information. */\n  public void testFlattenedGraph() throws Exception {\n\n    SynonymMap.Builder b = new SynonymMap.Builder();\n    add(b, \"wtf\", \"what the fudge\", true);\n\n    Analyzer a = getFlattenAnalyzer(b, true);\n\n    assertAnalyzesTo(a, \"wtf happened\",\n                     new String[] {\"what\", \"wtf\", \"the\", \"fudge\", \"happened\"},\n                     new int[]    {    0,     0,      0,     0,       4},  \n                     new int[]    {    3,     3,      3,     3,       12},\n                     null,\n                     new int[]    {    1,     0,      1,     1,       1},\n                     new int[]    {    1,     3,      1,     1,       1},\n                     true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, a);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"wtf happened\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    // Good (this should not match, and doesn't):\n    assertEquals(0, s.count(new PhraseQuery(\"field\", \"what\", \"happened\")));\n\n    // Bad (this should match, but doesn't):\n    assertEquals(0, s.count(new PhraseQuery(\"field\", \"wtf\", \"happened\")));\n\n    // Good (this should match, and does):\n    assertEquals(1, s.count(new PhraseQuery(\"field\", \"what\", \"the\", \"fudge\", \"happened\")));\n\n    // Bad (this should not match, but does):\n    assertEquals(1, s.count(new PhraseQuery(\"field\", \"wtf\", \"the\")));\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}