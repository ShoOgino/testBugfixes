{"path":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","pathOld":"/dev/null","sourceNew":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req,\n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b275d6fe96a9c358f99b5f4904ff2579b334ec20","date":1240910645,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","sourceNew":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lakkle\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='0']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='false']\");\n  }\n\n","sourceOld":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req,\n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d48ad008b42264f401fa552a26024cc3961a318","date":1240920982,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","sourceNew":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lakkle\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='0']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='false']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='1']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='true']\");\n  }\n\n","sourceOld":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lakkle\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='0']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='false']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testCorrectSpelling().mjava","sourceNew":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lakkle\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='0']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='false']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='1']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='true']\");\n  }\n\n","sourceOld":"  public void testCorrectSpelling() throws Exception {\n    SolrCore core = h.getCore();\n    Map<String, String> args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy lowerfilt:brown\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n\n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n            \"//*[@numFound='1']\", \"//result/doc[1]/int[@name='id'][.='1']\",\n            \"//*/lst[@name='suggestions']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lakkle\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='0']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='false']\");\n    \n    \n    args = new HashMap<String, String>();\n\n    args.put(CommonParams.Q, \"lowerfilt:lazy\");\n    args.put(CommonParams.QT, \"spellCheckCompRH\");\n    args.put(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    args.put(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(\n            args));\n    \n    assertQ(\"Make sure correct spellings are signalled in the response\", req, \n        \"//*[@numFound='1']\", \"//*/lst[@name='suggestions']\", \"//*/bool[@name='correctlySpelled'][.='true']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b275d6fe96a9c358f99b5f4904ff2579b334ec20":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":["6d48ad008b42264f401fa552a26024cc3961a318"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d48ad008b42264f401fa552a26024cc3961a318":["b275d6fe96a9c358f99b5f4904ff2579b334ec20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["b275d6fe96a9c358f99b5f4904ff2579b334ec20"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"b275d6fe96a9c358f99b5f4904ff2579b334ec20":["6d48ad008b42264f401fa552a26024cc3961a318"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6d48ad008b42264f401fa552a26024cc3961a318":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}