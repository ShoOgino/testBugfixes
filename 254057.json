{"path":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","commits":[{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = new Long(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = new Long(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#newRandom(long).mjava","sourceNew":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link Random} instance for generating random numbers during the test.\n   * If an error occurs in the test that is not reproducible, you can use this method to\n   * initialize the number generator with the seed that was printed out during the failing test.\n   */\n  public Random newRandom(long seed) {\n    if (this.seed != null) {\n      throw new IllegalStateException(\"please call LuceneTestCase.newRandom only once per test\");\n    }\n    this.seed = Long.valueOf(seed);\n    return new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cb1066f2afe9450585d0d10063ea4450085236f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6bcde5e3f23911110baa101ed062b544162825b5"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cb1066f2afe9450585d0d10063ea4450085236f1":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}