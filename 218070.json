{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],List[List[Method]]).mjava","commits":[{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],List[List[Method]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, List<List<Method>> methods) {\n    // We will return all methods starting with test* and rely on further validation to weed\n    // out static or otherwise invalid test methods.\n    List<Method> copy = mutableCopy1(flatten(methods));\n    Iterator<Method> i =copy.iterator();\n    while (i.hasNext()) {\n      Method m= i.next();\n      if (!m.getName().startsWith(\"test\") ||\n          !Modifier.isPublic(m.getModifiers()) ||\n           Modifier.isStatic(m.getModifiers()) ||\n           m.getParameterTypes().length != 0) {\n        i.remove();\n      }\n    }\n    return copy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],List[List[Method]]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, List<List<Method>> methods) {\n    // We will return all methods starting with test* and rely on further validation to weed\n    // out static or otherwise invalid test methods.\n    List<Method> copy = mutableCopy1(flatten(methods));\n    Iterator<Method> i =copy.iterator();\n    while (i.hasNext()) {\n      Method m= i.next();\n      if (!m.getName().startsWith(\"test\") ||\n          !Modifier.isPublic(m.getModifiers()) ||\n           Modifier.isStatic(m.getModifiers()) ||\n           m.getParameterTypes().length != 0) {\n        i.remove();\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],List[List[Method]]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, List<List<Method>> methods) {\n    // We will return all methods starting with test* and rely on further validation to weed\n    // out static or otherwise invalid test methods.\n    List<Method> copy = mutableCopy1(flatten(methods));\n    Iterator<Method> i =copy.iterator();\n    while (i.hasNext()) {\n      Method m= i.next();\n      if (!m.getName().startsWith(\"test\") ||\n          !Modifier.isPublic(m.getModifiers()) ||\n           Modifier.isStatic(m.getModifiers()) ||\n           m.getParameterTypes().length != 0) {\n        i.remove();\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnit3MethodProvider#getTestMethods(Class[#],List[List[Method]]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<Method> getTestMethods(Class<?> suiteClass, List<List<Method>> methods) {\n    // We will return all methods starting with test* and rely on further validation to weed\n    // out static or otherwise invalid test methods.\n    List<Method> copy = mutableCopy1(flatten(methods));\n    Iterator<Method> i =copy.iterator();\n    while (i.hasNext()) {\n      Method m= i.next();\n      if (!m.getName().startsWith(\"test\") ||\n          !Modifier.isPublic(m.getModifiers()) ||\n           Modifier.isStatic(m.getModifiers()) ||\n           m.getParameterTypes().length != 0) {\n        i.remove();\n      }\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}