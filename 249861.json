{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","commits":[{"id":"744465f732e2b3edb5c265322043558ae158c076","date":1515499090,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,String]).mjava","sourceNew":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, String> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (v != null) ctx.getTags().put(tag, v);\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"744465f732e2b3edb5c265322043558ae158c076":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744465f732e2b3edb5c265322043558ae158c076"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ae23947c41339ea2b352422bb762dfb4a17077":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["33ae23947c41339ea2b352422bb762dfb4a17077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["33ae23947c41339ea2b352422bb762dfb4a17077","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"744465f732e2b3edb5c265322043558ae158c076":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["33ae23947c41339ea2b352422bb762dfb4a17077"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["744465f732e2b3edb5c265322043558ae158c076","b94236357aaa22b76c10629851fe4e376e0cea82"],"33ae23947c41339ea2b352422bb762dfb4a17077":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}