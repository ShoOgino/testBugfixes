{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd, \n\t\t    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd, \n\t\t    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd, \n\t\t    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd, \n\t\t    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd, \n\t\t    new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tMockRAMDirectory rd=new MockRAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tMockRAMDirectory rd=new MockRAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tMockRAMDirectory rd=new MockRAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRandom random = newRandom();\n\t\tMockRAMDirectory rd=newDirectory(random);\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tMockRAMDirectory rd=new MockRAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRandom random = newRandom();\n\t\tDirectory rd=newDirectory(random);\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRandom random = newRandom();\n\t\tMockRAMDirectory rd=newDirectory(random);\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRandom random = newRandom();\n\t\tDirectory rd=newDirectory(random);\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader mainReader = w.getReader();\n\t\tw.close();\n\n                IndexReader reader = SlowMultiReaderWrapper.wrap(mainReader);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\tmainReader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(newRandom(), rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = w.getReader();\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tReaderContext context = reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tReaderContext context = reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tFixedBitSet bits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tDirectory rd=newDirectory();\n\t\tRandomIndexWriter w = new RandomIndexWriter(random, rd);\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(newField(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tIndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n\t\tassertTrue(reader.getTopReaderContext().isAtomic);\n\t\tAtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n\t\tassertTrue(context.isAtomic);\n\t\tw.close();\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tFixedBitSet bits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (FixedBitSet)tf.getDocIdSet(context);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\treader.close();\n\t\trd.close();\n\t}\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingTerms().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = new SlowMultiReaderWrapper(w.getReader());\n    assertTrue(reader.getTopReaderContext().isAtomic);\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    assertTrue(context.isAtomic);\n    w.close();\n\n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"19\"));\n    FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"20\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 1\", 1, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"10\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    tf.addTerm(new Term(fieldName, \"00\"));\n    bits = (FixedBitSet) tf.getDocIdSet(context);\n    assertEquals(\"Must match 2\", 2, bits.cardinality());\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","51c34a3639838887e7997850b6be80f838a4d6f7"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e141595402370bee958745de8b1c9de1fa182581":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["51c34a3639838887e7997850b6be80f838a4d6f7"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"51c34a3639838887e7997850b6be80f838a4d6f7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"]},"commit2Childs":{"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e141595402370bee958745de8b1c9de1fa182581"],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e","3bb13258feba31ab676502787ab2e1779f129b7a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}