{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE, BYTES] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SortingMergePolicy(newMergePolicy(), Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE, BYTES] but got: <score>\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SortingMergePolicy(newMergePolicy(), Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort index with sort field <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"773bf150032d3ef6c95997a154fb914b82875cb8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["773bf150032d3ef6c95997a154fb914b82875cb8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}