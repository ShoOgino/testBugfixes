{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCatStreamMaxLines().mjava","commits":[{"id":"fa57c615885d274eb8087f89b6a9e1f84e655a74","date":1565267901,"type":1,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCatStreamMaxLines().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFileStreamMaxLines().mjava","sourceNew":"  @Test\n  public void testCatStreamMaxLines() throws Exception {\n    final String catStream = \"cat(\\\"topLevel1.txt\\\", maxLines=2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", catStream);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+FILESTREAM_COLLECTION;\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    for (int i = 0; i < 2; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"topLevel1.txt line \" + String.valueOf(i+1), t.get(\"line\"));\n      assertEquals(\"topLevel1.txt\", t.get(\"file\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFileStreamMaxLines() throws Exception {\n    final String fileStream = \"files(\\\"topLevel1.txt\\\", maxLines=2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", fileStream);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+FILESTREAM_COLLECTION;\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    for (int i = 0; i < 2; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"topLevel1.txt line \" + String.valueOf(i+1), t.get(\"line\"));\n      assertEquals(\"topLevel1.txt\", t.get(\"file\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa57c615885d274eb8087f89b6a9e1f84e655a74"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa57c615885d274eb8087f89b6a9e1f84e655a74"],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}