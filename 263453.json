{"path":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","commits":[{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9709ab5f72a76950bad7235821832d744c777b9c","date":1359470258,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed(); // nocommit: O(n^2)!!!!!!!!!!!!\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7","date":1359470824,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed(); // nocommit: O(n^2)!!!!!!!!!!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"/dev/null","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (trackDocsWithField) {\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (trackDocsWithField) {\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (trackDocsWithField) {\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (docsWithField != null) {\n      docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (trackDocsWithField) {\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    \n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    if (docsWithField != null) {\n      docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n      docsWithField.set(docID);\n    }\n\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    \n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID < pending.size()) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    // Fill in any holes:\n    for (int i = (int)pending.size(); i < docID; ++i) {\n      pending.add(MISSING);\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    \n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField.add(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesWriter#addValue(int,long).mjava","sourceNew":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField.add(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, long value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n\n    pending.add(value);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9709ab5f72a76950bad7235821832d744c777b9c":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"5844844466689b1121b12ccb467623f894eb269d":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["22a2e66dfda83847e80095b8693c660742ab3e9c","5844844466689b1121b12ccb467623f894eb269d"],"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7":["9709ab5f72a76950bad7235821832d744c777b9c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["3995f83351082af8ae83bb017e63c56818fc1568"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3995f83351082af8ae83bb017e63c56818fc1568":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceec64003e8cc400e862d44c8589a41570432ab9"]},"commit2Childs":{"9709ab5f72a76950bad7235821832d744c777b9c":["7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","3995f83351082af8ae83bb017e63c56818fc1568"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"7571dd1e018a14f1536c64e4f6d17a3f0bb30fa7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["9709ab5f72a76950bad7235821832d744c777b9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["5844844466689b1121b12ccb467623f894eb269d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3995f83351082af8ae83bb017e63c56818fc1568":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}