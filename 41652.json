{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      MatchNoDocsQuery rewritten = new MatchNoDocsQuery();\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (int i=0; i<terms.length; i++) {\n        builder.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      BooleanQuery boq = builder.build();\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      BooleanQuery bq = new BooleanQuery();\n      bq.setBoost(getBoost());\n      return bq;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (int i=0; i<terms.length; i++) {\n        builder.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.isEmpty()) {\n      MatchNoDocsQuery rewritten = new MatchNoDocsQuery();\n      rewritten.setBoost(getBoost());\n      return rewritten;\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (int i=0; i<terms.length; i++) {\n        builder.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      BooleanQuery boq = builder.build();\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"860d9cc0c963b5c0db351fb0473b6894b1d96020","date":1448302628,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (int i=0; i<terms.length; i++) {\n        builder.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.isEmpty()) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery(\"empty MultiPhraseQuery\");\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery(\"empty MultiPhraseQuery\");\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (termArrays.length == 0) {\n      return new MatchNoDocsQuery();\n    } else if (termArrays.length == 1) {                 // optimize one-term case\n      Term[] terms = termArrays[0];\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.setDisableCoord(true);\n      for (Term term : terms) {\n        builder.add(new TermQuery(term), BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    } else {\n      return super.rewrite(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c8a0e442f7b61f811680273b25da95994a724466":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["c8a0e442f7b61f811680273b25da95994a724466"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["860d9cc0c963b5c0db351fb0473b6894b1d96020","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4778b794a897685e2f6c62caa1ac04983d1e69f"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c8a0e442f7b61f811680273b25da95994a724466":["f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}