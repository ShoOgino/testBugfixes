{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory(random);\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory(random);\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(newField(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator<Fieldable> it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}