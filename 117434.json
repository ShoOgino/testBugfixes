{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  private CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n        \n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n          \n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n        \n        // we have checksums to compare\n        \n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.info(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.warn(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            log.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            log.info(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          log.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      log.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            LOG.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            LOG.info(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          LOG.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      LOG.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#compareFile(Directory,String,Long,Long).mjava","sourceNew":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            log.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            log.info(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          log.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\"\n              , filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      log.error(\"Could not read file {}. Downloading it again\", filename, e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","sourceOld":"  protected static CompareResult compareFile(Directory indexDir, String filename, Long backupIndexFileLen, Long backupIndexFileChecksum) {\n    CompareResult compareResult = new CompareResult();\n    try {\n      try (final IndexInput indexInput = indexDir.openInput(filename, IOContext.READONCE)) {\n        long indexFileLen = indexInput.length();\n        long indexFileChecksum = 0;\n        \n        if (backupIndexFileChecksum != null) {\n          try {\n            indexFileChecksum = CodecUtil.retrieveChecksum(indexInput);\n            compareResult.checkSummed = true;\n          } catch (Exception e) {\n            log.warn(\"Could not retrieve checksum from file.\", e);\n          }\n        }\n\n        if (!compareResult.checkSummed) {\n          // we don't have checksums to compare\n\n          if (indexFileLen == backupIndexFileLen) {\n            compareResult.equal = true;\n            return compareResult;\n          } else {\n            log.info(\n                \"File {} did not match. expected length is {} and actual length is {}\", filename, backupIndexFileLen, indexFileLen);\n            compareResult.equal = false;\n            return compareResult;\n          }\n        }\n\n        // we have checksums to compare\n\n        if (indexFileLen == backupIndexFileLen && indexFileChecksum == backupIndexFileChecksum) {\n          compareResult.equal = true;\n          return compareResult;\n        } else {\n          log.warn(\"File {} did not match. expected checksum is {} and actual is checksum {}. \" +\n              \"expected length is {} and actual length is {}\", filename, backupIndexFileChecksum, indexFileChecksum,\n              backupIndexFileLen, indexFileLen);\n          compareResult.equal = false;\n          return compareResult;\n        }\n      }\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      compareResult.equal = false;\n      return compareResult;\n    } catch (IOException e) {\n      log.error(\"Could not read file \" + filename + \". Downloading it again\", e);\n      compareResult.equal = false;\n      return compareResult;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad28156288ac00b91352582904d97e6653205757"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["ad28156288ac00b91352582904d97e6653205757"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["86290366cefc1b9d4eced13b430858c4a4c0421d","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}