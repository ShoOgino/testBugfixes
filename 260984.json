{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayWithGaps(Builder[T],Builder.UnCompiledNode[T],long,int,int).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayWithGaps(Builder[T],Builder.UnCompiledNode[T],long,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeArrayWithGaps(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long fixedArrayStart, int maxBytesPerArc, int labelRange) {\n    // expand the arcs in place, backwards\n    long srcPos = builder.bytes.getPosition();\n    long destPos = fixedArrayStart + labelRange * maxBytesPerArc;\n    // if destPos == srcPos it means all the arcs were the same length, and the array of them is *already* direct\n    assert destPos >= srcPos;\n    if (destPos > srcPos) {\n      builder.bytes.skipBytes((int) (destPos - srcPos));\n      int arcIdx = nodeIn.numArcs - 1;\n      int firstLabel = nodeIn.arcs[0].label;\n      int nextLabel = nodeIn.arcs[arcIdx].label;\n      for (int directArcIdx = labelRange - 1; directArcIdx >= 0; directArcIdx--) {\n        destPos -= maxBytesPerArc;\n        if (directArcIdx == nextLabel - firstLabel) {\n          int arcLen = builder.reusedBytesPerArc[arcIdx];\n          srcPos -= arcLen;\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos + \" label=\" + nextLabel);\n          if (srcPos != destPos) {\n            //System.out.println(\"  copy len=\" + builder.reusedBytesPerArc[arcIdx]);\n            assert destPos > srcPos: \"destPos=\" + destPos + \" srcPos=\" + srcPos + \" arcIdx=\" + arcIdx + \" maxBytesPerArc=\" + maxBytesPerArc + \" reusedBytesPerArc[arcIdx]=\" + builder.reusedBytesPerArc[arcIdx] + \" nodeIn.numArcs=\" + nodeIn.numArcs;\n            builder.bytes.copyBytes(srcPos, destPos, arcLen);\n            if (arcIdx == 0) {\n              break;\n            }\n          }\n          --arcIdx;\n          nextLabel = nodeIn.arcs[arcIdx].label;\n        } else {\n          assert directArcIdx > arcIdx;\n          // mark this as a missing arc\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" no arc\");\n          builder.bytes.writeByte(destPos, BIT_MISSING_ARC);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","date":1571070636,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayWithGaps(Builder[T],Builder.UnCompiledNode[T],long,int,int).mjava","sourceNew":null,"sourceOld":"  private void writeArrayWithGaps(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long fixedArrayStart, int maxBytesPerArc, int labelRange) {\n    // expand the arcs in place, backwards\n    long srcPos = builder.bytes.getPosition();\n    long destPos = fixedArrayStart + labelRange * maxBytesPerArc;\n    // if destPos == srcPos it means all the arcs were the same length, and the array of them is *already* direct\n    assert destPos >= srcPos;\n    if (destPos > srcPos) {\n      builder.bytes.skipBytes((int) (destPos - srcPos));\n      int arcIdx = nodeIn.numArcs - 1;\n      int firstLabel = nodeIn.arcs[0].label;\n      int nextLabel = nodeIn.arcs[arcIdx].label;\n      for (int directArcIdx = labelRange - 1; directArcIdx >= 0; directArcIdx--) {\n        destPos -= maxBytesPerArc;\n        if (directArcIdx == nextLabel - firstLabel) {\n          int arcLen = builder.reusedBytesPerArc[arcIdx];\n          srcPos -= arcLen;\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos + \" label=\" + nextLabel);\n          if (srcPos != destPos) {\n            //System.out.println(\"  copy len=\" + builder.reusedBytesPerArc[arcIdx]);\n            assert destPos > srcPos: \"destPos=\" + destPos + \" srcPos=\" + srcPos + \" arcIdx=\" + arcIdx + \" maxBytesPerArc=\" + maxBytesPerArc + \" reusedBytesPerArc[arcIdx]=\" + builder.reusedBytesPerArc[arcIdx] + \" nodeIn.numArcs=\" + nodeIn.numArcs;\n            builder.bytes.copyBytes(srcPos, destPos, arcLen);\n            if (arcIdx == 0) {\n              break;\n            }\n          }\n          --arcIdx;\n          nextLabel = nodeIn.arcs[arcIdx].label;\n        } else {\n          assert directArcIdx > arcIdx;\n          // mark this as a missing arc\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" no arc\");\n          builder.bytes.writeByte(destPos, BIT_MISSING_ARC);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeArrayWithGaps(Builder[T],Builder.UnCompiledNode[T],long,int,int).mjava","sourceNew":null,"sourceOld":"  private void writeArrayWithGaps(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long fixedArrayStart, int maxBytesPerArc, int labelRange) {\n    // expand the arcs in place, backwards\n    long srcPos = builder.bytes.getPosition();\n    long destPos = fixedArrayStart + labelRange * maxBytesPerArc;\n    // if destPos == srcPos it means all the arcs were the same length, and the array of them is *already* direct\n    assert destPos >= srcPos;\n    if (destPos > srcPos) {\n      builder.bytes.skipBytes((int) (destPos - srcPos));\n      int arcIdx = nodeIn.numArcs - 1;\n      int firstLabel = nodeIn.arcs[0].label;\n      int nextLabel = nodeIn.arcs[arcIdx].label;\n      for (int directArcIdx = labelRange - 1; directArcIdx >= 0; directArcIdx--) {\n        destPos -= maxBytesPerArc;\n        if (directArcIdx == nextLabel - firstLabel) {\n          int arcLen = builder.reusedBytesPerArc[arcIdx];\n          srcPos -= arcLen;\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos + \" label=\" + nextLabel);\n          if (srcPos != destPos) {\n            //System.out.println(\"  copy len=\" + builder.reusedBytesPerArc[arcIdx]);\n            assert destPos > srcPos: \"destPos=\" + destPos + \" srcPos=\" + srcPos + \" arcIdx=\" + arcIdx + \" maxBytesPerArc=\" + maxBytesPerArc + \" reusedBytesPerArc[arcIdx]=\" + builder.reusedBytesPerArc[arcIdx] + \" nodeIn.numArcs=\" + nodeIn.numArcs;\n            builder.bytes.copyBytes(srcPos, destPos, arcLen);\n            if (arcIdx == 0) {\n              break;\n            }\n          }\n          --arcIdx;\n          nextLabel = nodeIn.arcs[arcIdx].label;\n        } else {\n          assert directArcIdx > arcIdx;\n          // mark this as a missing arc\n          //System.out.println(\"  direct pack idx=\" + directArcIdx + \" no arc\");\n          builder.bytes.writeByte(destPos, BIT_MISSING_ARC);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ae67e1f82a53594208ca929f382ee861dad3d7a8","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}