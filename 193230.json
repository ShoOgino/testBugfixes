{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","sourceNew":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b);\n    if (sect == expected)\n      return;\n    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);//always fails\n    }\n  }\n\n","sourceOld":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b);\n    if (sect == expected)\n      return;\n    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);//always fails\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","sourceNew":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b);\n    if (sect == expected)\n      return;\n    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);//always fails\n    }\n  }\n\n","sourceOld":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b);\n    if (sect == expected)\n      return;\n    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);//always fails\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","sourceNew":null,"sourceOld":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b);\n    if (sect == expected)\n      return;\n    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);//always fails\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}