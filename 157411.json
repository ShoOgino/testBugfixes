{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    long seed = System.currentTimeMillis();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = new DefaultPathPolicy();\n    assertEquals(\"path policy does not match default for root\" + \"(seed \"\n        + seed + \")\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy()\n        .shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \"\n          + cp.toString('/') + \"(seed \" + seed + \")\", pathPolicy\n          .shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertEquals(\"ordinal policy does not match default for root\"\n        + \"(seed \" + seed + \")\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL), dfip\n        .getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal\n          + \"(seed \" + seed + \")\", ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    long seed = System.currentTimeMillis();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = new DefaultPathPolicy();\n    assertEquals(\"path policy does not match default for root\" + \"(seed \"\n        + seed + \")\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy()\n        .shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \"\n          + cp.toString('/') + \"(seed \" + seed + \")\", pathPolicy\n          .shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertEquals(\"ordinal policy does not match default for root\"\n        + \"(seed \" + seed + \")\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL), dfip\n        .getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal\n          + \"(seed \" + seed + \")\", ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214e298ef4711259f333346502d6068a4db56a22","date":1355153351,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    long seed = System.currentTimeMillis();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = new DefaultPathPolicy();\n    assertEquals(\"path policy does not match default for root\" + \"(seed \"\n        + seed + \")\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy()\n        .shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \"\n          + cp.toString('/') + \"(seed \" + seed + \")\", pathPolicy\n          .shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertEquals(\"ordinal policy does not match default for root\"\n        + \"(seed \" + seed + \")\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL), dfip\n        .getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal\n          + \"(seed \" + seed + \")\", ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    long seed = System.currentTimeMillis();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = new DefaultPathPolicy();\n    assertEquals(\"path policy does not match default for root\" + \"(seed \"\n        + seed + \")\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy()\n        .shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \"\n          + cp.toString('/') + \"(seed \" + seed + \")\", pathPolicy\n          .shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new DefaultOrdinalPolicy();\n    assertEquals(\"ordinal policy does not match default for root\"\n        + \"(seed \" + seed + \")\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL), dfip\n        .getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal\n          + \"(seed \" + seed + \")\", ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["214e298ef4711259f333346502d6068a4db56a22"],"214e298ef4711259f333346502d6068a4db56a22":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","214e298ef4711259f333346502d6068a4db56a22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["214e298ef4711259f333346502d6068a4db56a22","407687e67faf6e1f02a211ca078d8e3eed631027"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"214e298ef4711259f333346502d6068a4db56a22":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}