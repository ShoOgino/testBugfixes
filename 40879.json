{"path":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    searcher.close();\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    searcher.close();\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    searcher.close();\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    searcher.close();\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    searcher.close();\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c8323d210478d76a02372693d254b69aac614689"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}