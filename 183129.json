{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = newDirectory(RANDOM);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = newDirectory(RANDOM);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    Directory directory = newDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}