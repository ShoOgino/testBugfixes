{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8","date":1584125777,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n\n        Supplier<List<CoreDescriptor>> descriptorsSupplier = () -> {\n          List<CoreDescriptor> descriptors = new ArrayList<>(cc.getLoadedCoreNames().size());\n          Collection<SolrCore> cores = cc.getCores();\n          for (SolrCore core : cores) {\n            descriptors.add(core.getCoreDescriptor());\n          }\n          return descriptors;\n        };\n\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config, descriptorsSupplier);\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client={}  Waiting for a quorum.\", zookeeperHost);\n        } else {\n          log.info(\"Zookeeper client={}\", zookeeperHost);\n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n\n        Supplier<List<CoreDescriptor>> descriptorsSupplier = () -> {\n          List<CoreDescriptor> descriptors = new ArrayList<>(cc.getLoadedCoreNames().size());\n          Collection<SolrCore> cores = cc.getCores();\n          for (SolrCore core : cores) {\n            descriptors.add(core.getCoreDescriptor());\n          }\n          return descriptors;\n        };\n\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config, descriptorsSupplier);\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n\n        Supplier<List<CoreDescriptor>> descriptorsSupplier = () -> {\n          List<CoreDescriptor> descriptors = new ArrayList<>(cc.getLoadedCoreNames().size());\n          Collection<SolrCore> cores = cc.getCores();\n          for (SolrCore core : cores) {\n            descriptors.add(core.getCoreDescriptor());\n          }\n          return descriptors;\n        };\n\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config, descriptorsSupplier);\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239ac2cf147bbfbf488bc36002d5d26b2939d4ba","date":1587405343,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client={}  Waiting for a quorum.\", zookeeperHost);\n        } else {\n          log.info(\"Zookeeper client={}\", zookeeperHost);\n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n\n        Supplier<List<CoreDescriptor>> descriptorsSupplier = () -> {\n          List<CoreDescriptor> descriptors = new ArrayList<>(cc.getLoadedCoreNames().size());\n          Collection<SolrCore> cores = cc.getCores();\n          for (SolrCore core : cores) {\n            descriptors.add(core.getCoreDescriptor());\n          }\n          return descriptors;\n        };\n\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config, descriptorsSupplier);\n\n        if (zkRun != null) {\n          if (StringUtils.isNotEmpty(System.getProperty(\"solr.jetty.https.port\"))) {\n            // Embedded ZK and probably running with SSL\n            new ClusterProperties(zkController.getZkClient()).setClusterProperty(ZkStateReader.URL_SCHEME, \"https\");\n          }\n          if (zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n            // we are part of an ensemble and we are not uploading the config - pause to give the config time\n            // to get up\n            Thread.sleep(10000);\n          }\n        }\n\n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client={}  Waiting for a quorum.\", zookeeperHost);\n        } else {\n          log.info(\"Zookeeper client={}\", zookeeperHost);\n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n\n        // We may have already loaded NodeConfig from zookeeper with same connect string, so no need to recheck chroot\n        boolean alreadyUsedChroot = cc.getConfig().isFromZookeeper() && zookeeperHost.equals(System.getProperty(\"zkHost\"));\n        if(!alreadyUsedChroot && !ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n\n        Supplier<List<CoreDescriptor>> descriptorsSupplier = () -> {\n          List<CoreDescriptor> descriptors = new ArrayList<>(cc.getLoadedCoreNames().size());\n          Collection<SolrCore> cores = cc.getCores();\n          for (SolrCore core : cores) {\n            descriptors.add(core.getCoreDescriptor());\n          }\n          return descriptors;\n        };\n\n        ZkController zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config, descriptorsSupplier);\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n\n        this.zkController = zkController;\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c560208bc8842ee884b76b08784ccb132f05b48":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"],"140be51d03394488536f4aacedace29f9b318347":["1c560208bc8842ee884b76b08784ccb132f05b48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"]},"commit2Childs":{"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["1c560208bc8842ee884b76b08784ccb132f05b48"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"],"1c560208bc8842ee884b76b08784ccb132f05b48":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"140be51d03394488536f4aacedace29f9b318347":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}