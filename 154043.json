{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T,boolean).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   * \n   * <p>\n   * <b>NOTE:</b> if {@code useDirectSource} is {@code false}, then a\n   * {@link DocValues#getSource()} is used, which is an in-memory {@link Source}.\n   */\n  public AssociationsIterator(String field, T association, boolean useDirectSource) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n    this.useDirectSource = useDirectSource;\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   * \n   * <p>\n   * <b>NOTE:</b> if {@code useDirectSource} is {@code false}, then a\n   * {@link DocValues#getSource()} is used, which is an in-memory {@link Source}.\n   */\n  public AssociationsIterator(String field, T association, boolean useDirectSource) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n    this.useDirectSource = useDirectSource;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}