{"path":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","commits":[{"id":"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0","date":1374088456,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c88c33fee958027b9192ef2c6bb54836618b165","date":1390430350,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n      \n      waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      \n      ChaosMonkey.stop(jettys.get(0));\n      \n      // enter safe mode and restart a node\n      NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n      \n      int rnd = LuceneTestCase.random().nextInt(10000);\n      Timer timer = new Timer();\n      timer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n        }\n      }, rnd);\n      \n      ChaosMonkey.start(jettys.get(0));\n      \n      waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aaa71958ba765b2cf194f405f54cc4d05b4ee41","date":1395201129,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n      \n      waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      \n      ChaosMonkey.stop(jettys.get(0));\n      \n      // enter safe mode and restart a node\n      NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n      \n      int rnd = LuceneTestCase.random().nextInt(10000);\n      Timer timer = new Timer();\n      timer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n        }\n      }, rnd);\n      \n      ChaosMonkey.start(jettys.get(0));\n      \n      waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294","date":1408633409,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/hdfs/StressHdfsTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    randomlyEnableAutoSoftCommit();\n    \n    int cnt = random().nextInt(2) + 1;\n    for (int i = 0; i < cnt; i++) {\n      createAndDeleteCollection();\n    }\n\n    if (testRestartIntoSafeMode) {\n      Timer timer = new Timer();\n      \n      try {\n        createCollection(DELETE_DATA_DIR_COLLECTION, 1, 1, 1);\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n        \n        ChaosMonkey.stop(jettys.get(0));\n        \n        // enter safe mode and restart a node\n        NameNodeAdapter.enterSafeMode(dfsCluster.getNameNode(), false);\n        \n        int rnd = LuceneTestCase.random().nextInt(10000);\n        \n        timer.schedule(new TimerTask() {\n          \n          @Override\n          public void run() {\n            NameNodeAdapter.leaveSafeMode(dfsCluster.getNameNode());\n          }\n        }, rnd);\n        \n        ChaosMonkey.start(jettys.get(0));\n        \n        waitForRecoveriesToFinish(DELETE_DATA_DIR_COLLECTION, false);\n      } finally {\n        timer.cancel();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["7aaa71958ba765b2cf194f405f54cc4d05b4ee41"],"7c88c33fee958027b9192ef2c6bb54836618b165":["ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"],"abb23fcc2461782ab204e61213240feb77d355aa":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aaa71958ba765b2cf194f405f54cc4d05b4ee41":["7c88c33fee958027b9192ef2c6bb54836618b165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294":["abb23fcc2461782ab204e61213240feb77d355aa"],"7c88c33fee958027b9192ef2c6bb54836618b165":["7aaa71958ba765b2cf194f405f54cc4d05b4ee41"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0"],"ce05d6b4ba1d00f03884a62f237cd38b1ce5c0b0":["7c88c33fee958027b9192ef2c6bb54836618b165","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"7aaa71958ba765b2cf194f405f54cc4d05b4ee41":["0d29d666b8eaa2fe8efe1e0d42fc8e32876d7294"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}