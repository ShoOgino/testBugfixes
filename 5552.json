{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n    fields = new ArrayList<FieldMetaData>();\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(SegmentWriteState,int,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#PulsingPostingsWriter(int,PostingsWriterBase).mjava","sourceNew":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(SegmentWriteState state, int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n    fields = new ArrayList<FieldMetaData>();\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n    this.segmentState = state;\n  }\n\n","sourceOld":"  /** If the total number of positions (summed across all docs\n   *  for this term) is <= maxPositions, then the postings are\n   *  inlined into terms dict */\n  public PulsingPostingsWriter(int maxPositions, PostingsWriterBase wrappedPostingsWriter) {\n    pending = new Position[maxPositions];\n    for(int i=0;i<maxPositions;i++) {\n      pending[i] = new Position();\n    }\n\n    // We simply wrap another postings writer, but only call\n    // on it when tot positions is >= the cutoff:\n    this.wrappedPostingsWriter = wrappedPostingsWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}