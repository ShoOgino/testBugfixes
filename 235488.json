{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1dcb481c1d36eb918fd5685a875aa54cd72e400","date":1342796663,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    SolrCore core = getCoreInc();\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    SolrCore core = getCoreInc();\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    SolrCore core = getCoreInc();\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    try (SolrCore core = getCoreInc()) {\n      DirectSolrConnection connection = new DirectSolrConnection(core);\n      SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n      // prefer the handler mapped to /update, but use our generic backup handler\n      // if that lookup fails\n      if (handler == null) {\n        handler = updater;\n      }\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    SolrCore core = getCoreInc();\n    DirectSolrConnection connection = new DirectSolrConnection(core);\n    SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n    // prefer the handler mapped to /update, but use our generic backup handler\n    // if that lookup fails\n    if (handler == null) {\n      handler = updater;\n    }\n    try {\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#update(String).mjava","sourceNew":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    try (SolrCore core = getCoreInc()) {\n      DirectSolrConnection connection = new DirectSolrConnection(core);\n      SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n      // prefer the handler mapped to /update, but use our generic backup handler\n      // if that lookup fails\n      if (handler == null) {\n        handler = updater;\n      }\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes an \"update\" (add, commit or optimize) and\n   * returns the response as a String.\n   *\n   * @param xml The XML of the update\n   * @return The XML response to the update\n   */\n  public String update(String xml) {\n    try (SolrCore core = getCoreInc()) {\n      DirectSolrConnection connection = new DirectSolrConnection(core);\n      SolrRequestHandler handler = core.getRequestHandler(\"/update\");\n      // prefer the handler mapped to /update, but use our generic backup handler\n      // if that lookup fails\n      if (handler == null) {\n        handler = updater;\n      }\n      return connection.request(handler, null, xml);\n    } catch (SolrException e) {\n      throw (SolrException)e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["c26f00b574427b55127e869b935845554afde1fa","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b1dcb481c1d36eb918fd5685a875aa54cd72e400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b1dcb481c1d36eb918fd5685a875aa54cd72e400":["aba371508186796cc6151d8223a5b4e16d02e26e","e332392bbbdd01cb69ad6a89051f483cda38e15e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}