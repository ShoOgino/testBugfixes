{"path":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","commits":[{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"/dev/null","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(new TermQuery(bbb));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")));\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length());\n        hits = searcher.search(new TermQuery(aaa));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(new TermQuery(bbb));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")));\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length());\n        hits = searcher.search(new TermQuery(aaa));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(new TermQuery(bbb));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")));\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length());\n        hits = searcher.search(new TermQuery(aaa));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        Hits hits = searcher.search(new TermQuery(bbb));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")));\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length());\n        hits = searcher.search(new TermQuery(aaa));\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length());\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d34c8b8a760c050d0e5c4b802584b3de2002e431","date":1220117586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(reader.docFreq(ccc), 37);\n        reader.deleteDocument(0);\n        assertEquals(reader.docFreq(aaa), 37);\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(System.getProperty(\"tempDir\"), \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cb1066f2afe9450585d0d10063ea4450085236f1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["d34c8b8a760c050d0e5c4b802584b3de2002e431"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["cb1066f2afe9450585d0d10063ea4450085236f1"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["d34c8b8a760c050d0e5c4b802584b3de2002e431"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}