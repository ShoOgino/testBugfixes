{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsHashPerField#createNewHash(AtomicInteger,AtomicInteger).mjava","commits":[{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsHashPerField#createNewHash(AtomicInteger,AtomicInteger).mjava","pathOld":"/dev/null","sourceNew":"  private static TermsHashPerField createNewHash(AtomicInteger newCalled, AtomicInteger addCalled) {\n    IntBlockPool intBlockPool = new IntBlockPool();\n    ByteBlockPool byteBlockPool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    ByteBlockPool termBlockPool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n\n    TermsHashPerField hash = new TermsHashPerField(1, intBlockPool, byteBlockPool, termBlockPool, Counter.newCounter(),\n        null, \"testfield\", IndexOptions.DOCS_AND_FREQS) {\n\n      private FreqProxTermsWriterPerField.FreqProxPostingsArray freqProxPostingsArray;\n\n      @Override\n      void newTerm(int termID, int docID) {\n        newCalled.incrementAndGet();\n        FreqProxTermsWriterPerField.FreqProxPostingsArray postings = freqProxPostingsArray;\n        postings.lastDocIDs[termID] = docID;\n        postings.lastDocCodes[termID] = docID << 1;\n        postings.termFreqs[termID] = 1;\n      }\n\n      @Override\n      void addTerm(int termID, int docID) {\n        addCalled.incrementAndGet();\n        FreqProxTermsWriterPerField.FreqProxPostingsArray postings = freqProxPostingsArray;\n        if (docID != postings.lastDocIDs[termID]) {\n          if (1 == postings.termFreqs[termID]) {\n            writeVInt(0, postings.lastDocCodes[termID]|1);\n          } else {\n            writeVInt(0, postings.lastDocCodes[termID]);\n            writeVInt(0, postings.termFreqs[termID]);\n          }\n          postings.termFreqs[termID] = 1;\n          postings.lastDocCodes[termID] = (docID - postings.lastDocIDs[termID]) << 1;\n          postings.lastDocIDs[termID] = docID;\n        } else {\n          postings.termFreqs[termID] = Math.addExact(postings.termFreqs[termID], 1);\n        }\n      }\n\n      @Override\n      void newPostingsArray() {\n        freqProxPostingsArray = (FreqProxTermsWriterPerField.FreqProxPostingsArray) postingsArray;\n      }\n\n      @Override\n      ParallelPostingsArray createPostingsArray(int size) {\n        return new FreqProxTermsWriterPerField.FreqProxPostingsArray(size, true, false, false);\n      }\n    };\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}