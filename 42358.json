{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,NormsProducer).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, NormsProducer norms) throws IOException {\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen, norms);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["28288370235ed02234a64753cdbf0c6ec096304a"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["f838187609fee3a1afa5f162f93c796046242c84"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2bb2842e561df4e8e9ad89010605fc86ac265465","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"f838187609fee3a1afa5f162f93c796046242c84":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"28288370235ed02234a64753cdbf0c6ec096304a":["2bb2842e561df4e8e9ad89010605fc86ac265465","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["f838187609fee3a1afa5f162f93c796046242c84"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["622a708571e534680618b3c5e0c28ac539a47776"],"f838187609fee3a1afa5f162f93c796046242c84":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}