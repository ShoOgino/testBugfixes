{"path":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}