{"path":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","commits":[{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","pathOld":"/dev/null","sourceNew":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      if(pException.matcher(response).find()) {\n        fail(\"Failed to complete restore action\");\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","pathOld":"/dev/null","sourceNew":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      if(pException.matcher(response).find()) {\n        fail(\"Failed to complete restore action\");\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","date":1428245942,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","sourceNew":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      if(pException.matcher(response).find()) {\n        fail(\"Failed to complete restore action\");\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","sourceNew":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","sourceNew":null,"sourceOld":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["71475d88ea48a7d9a847f209667255318b3ea4c7","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}