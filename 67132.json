{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","sourceNew":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"257da767277782760db0814096b999899995b2b1","date":1289498882,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","sourceNew":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + new Date() + \"; \" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","sourceNew":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + new Date() + \"; \" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","sourceNew":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + new Date() + \"; \" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","sourceOld":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#message(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Prints a message to the infoStream (if non-null),\n   * prefixed with the identifying information for this\n   * writer and the thread that's calling it.\n   */\n  public void message(String message) {\n    if (infoStream != null)\n      infoStream.println(\"IW \" + messageID + \" [\" + new Date() + \"; \" + Thread.currentThread().getName() + \"]: \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"257da767277782760db0814096b999899995b2b1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["257da767277782760db0814096b999899995b2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["9454a6510e2db155fb01faa5c049b06ece95fab9","257da767277782760db0814096b999899995b2b1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","257da767277782760db0814096b999899995b2b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"257da767277782760db0814096b999899995b2b1":["06584e6e98d592b34e1329b384182f368d2025e8","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["257da767277782760db0814096b999899995b2b1","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}