{"path":"src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,Hits,Hits).mjava","commits":[{"id":"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc","date":1131138902,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,Hits,Hits).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkEqual(Query query, Hits hits1, Hits hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length() != hits2.length()) {\n       TestCase.fail(\"Unequal lengths: hits1=\"+hits1.length()+\",hits2=\"+hits2.length());\n     }\n    for (int i = 0; i < hits1.length(); i++) {\n      if (hits1.id(i) != hits2.id(i)) {\n        TestCase.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1.id(i) != hits2.id(i))\n          || Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance)\n      {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal       : \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,Hits,Hits).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       TestCase.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        TestCase.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, Hits hits1, Hits hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length() != hits2.length()) {\n       TestCase.fail(\"Unequal lengths: hits1=\"+hits1.length()+\",hits2=\"+hits2.length());\n     }\n    for (int i = 0; i < hits1.length(); i++) {\n      if (hits1.id(i) != hits2.id(i)) {\n        TestCase.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1.id(i) != hits2.id(i))\n          || Math.abs(hits1.score(i) -  hits2.score(i)) > scoreTolerance)\n      {\n        TestCase.fail(\"Hit \" + i + \", doc nrs \" + hits1.id(i) + \" and \" + hits2.id(i)\n                      + \"\\nunequal       : \" + hits1.score(i)\n                      + \"\\n           and: \" + hits2.score(i)\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}