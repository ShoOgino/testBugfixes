{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = new BytesRef();\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = new BytesRef();\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = new BytesRef();\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = new BytesRef();\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      dv.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      BytesRef scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      scratch = dv.get(hits.scoreDocs[i].doc);\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoBinaryValues().mjava","sourceNew":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits.value);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoBinaryValues() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new BinaryDocValuesField(\"dv1\", new BytesRef(longTerm)));\n    doc.add(new BinaryDocValuesField(\"dv2\", new BytesRef(text)));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      int hitDocID = hits.scoreDocs[i].doc;\n      Document hitDoc = isearcher.doc(hitDocID);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv1\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      BytesRef scratch = dv.binaryValue();\n      assertEquals(new BytesRef(longTerm), scratch);\n      dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv2\");\n      assertEquals(hitDocID, dv.advance(hitDocID));\n      scratch = dv.binaryValue();\n      assertEquals(new BytesRef(text), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","470eaac3a77cf637b62126a5408b178d7be93eb1"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}