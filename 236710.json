{"path":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","commits":[{"id":"70cbbf09b1986180fc73b08b8ded592b3465806b","date":1355001417,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","sourceNew":"  // TODO: refactor some of this stuff up into a base class for use by other tests\n  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: refactor some of this stuff up into a base class for use by other tests\n  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","sourceNew":"  // TODO: refactor some of this stuff up into a base class for use by other tests\n  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  // TODO: refactor some of this stuff up into a base class for use by other tests\n  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d0eda576bd1392f929c375143ff45503e89192","date":1394979067,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#doQuery(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doQuery(String,String...).mjava","sourceNew":"  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  // TODO: refactor some of this stuff up into a base class for use by other tests\n  void doQuery(String expectedDocs, String... queryParams) throws Exception {\n    Set<String> expectedIds = new HashSet<>( StrUtils.splitSmart(expectedDocs, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(queryParams));\n    Set<String> obtainedIds = new HashSet<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["70cbbf09b1986180fc73b08b8ded592b3465806b"],"c0d0eda576bd1392f929c375143ff45503e89192":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec5368fa415ebab044b7ae01de50d5b49519b7e"],"70cbbf09b1986180fc73b08b8ded592b3465806b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0d0eda576bd1392f929c375143ff45503e89192"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c0d0eda576bd1392f929c375143ff45503e89192"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"c0d0eda576bd1392f929c375143ff45503e89192":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","70cbbf09b1986180fc73b08b8ded592b3465806b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"70cbbf09b1986180fc73b08b8ded592b3465806b":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}