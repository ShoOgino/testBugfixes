{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        input.add(s.substring(0, Math.min(s.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreqPayload tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (Input tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreqPayload tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<>(benchmarkInput.size());\n      for (Input tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ROOT,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (Input tf : benchmarkInput) {\n        String s = tf.term.utf8ToString();\n        String sub = s.substring(0, Math.min(s.length(), \n            minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        input.add(sub);\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s queries: %d, time[ms]: %s, ~kQPS: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["2acf500f78aa12b92e371fd89c719291986b6b90","cc41b743423981e7ec17a024ce7e107096e472fe"],"cc41b743423981e7ec17a024ce7e107096e472fe":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cc41b743423981e7ec17a024ce7e107096e472fe":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}