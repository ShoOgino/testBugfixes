{"path":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":null,"sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","date":1283910026,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","pathOld":"solr/src/test/org/apache/solr/MinimalSchemaTest#testAllConfiguredHandlers().mjava","sourceNew":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Iterates over all (non \"/update/*\") handlers in the core and hits \n   * them with a request (using some simple params) to verify that they \n   * don't generate an error against the minimal schema\n   */\n  @Test\n  public void testAllConfiguredHandlers() {\n    Set<String> handlerNames = h.getCore().getRequestHandlers().keySet();\n    for (String handler : handlerNames) {\n      try {\n        if (handler.startsWith(\"/update\")) {\n          continue;\n        }\n        if (handler.startsWith(\"/mlt\")) {\n          continue;\n        }\n\n        assertQ(\"failure w/handler: '\" + handler + \"'\",\n                req(\"qt\", handler,\n                    // this should be fairly innoculous for any type of query\n                    \"q\", \"foo:bar\")\n                ,\"//lst[@name='responseHeader']\"\n                );\n      } catch (Exception e) {\n        throw new RuntimeException(\"exception w/handler: '\" + handler + \"'\", \n                                   e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}