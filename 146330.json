{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","commits":[{"id":"ec381030975b88c20fde64532548a9e9a4bc4f51","date":1432653875,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(cname);\n      create.setMaxShardsPerNode(1);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(cname);\n      addReplica.setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(cname)\n              .setMaxShardsPerNode(1)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(cname)\n              .setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(cname);\n      create.setMaxShardsPerNode(1);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(cname);\n      addReplica.setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(cname)\n              .setMaxShardsPerNode(1)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(cname)\n              .setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(cname)\n              .setMaxShardsPerNode(1)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(cname)\n              .setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(cname)\n              .setMaxShardsPerNode(1)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(cname)\n              .setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(cname)\n              .setMaxShardsPerNode(1)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setConfigName(\"conf1\");\n      create.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(cname)\n              .setShardName(\"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n\n      CollectionAdminRequest.createCollection(cname,\"conf1\",1,1).setMaxShardsPerNode(1).process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      addReplica.process(client);\n\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusZNodeVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusZNodeVersion().mjava","sourceNew":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusZNodeVersion() throws Exception {\n    String cname = \"clusterStatusZNodeVersion\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      setV2(CollectionAdminRequest.createCollection(cname, \"conf1\", 1, 1).setMaxShardsPerNode(1)).process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", cname);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(cname);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Integer znodeVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(znodeVersion);\n\n      CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(cname, \"shard1\");\n      setV2(addReplica);\n      addReplica.process(client);\n      assertV2CallsCount();\n      waitForRecoveriesToFinish(cname, true);\n\n      rsp = client.request(request);\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      collection = (Map<String, Object>) collections.get(cname);\n      Integer newVersion = (Integer) collection.get(\"znodeVersion\");\n      assertNotNull(newVersion);\n      assertTrue(newVersion > znodeVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"ec381030975b88c20fde64532548a9e9a4bc4f51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"3217321f3e1d7922898c6c633d17acfa840d6875":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","ac97ea104d893f16aab430d9904473bc1f233f3c"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","4d3fc88a06a44fc3112186e9be4562b36713955d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["ec381030975b88c20fde64532548a9e9a4bc4f51"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec381030975b88c20fde64532548a9e9a4bc4f51":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["4d3fc88a06a44fc3112186e9be4562b36713955d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec381030975b88c20fde64532548a9e9a4bc4f51"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}