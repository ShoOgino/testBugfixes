{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 20),\n          new TermFreq(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new TermFreqPayloadArrayIterator(new TermFreqPayload[] {\n          new TermFreqPayload(\"x y\", 20),\n          new TermFreqPayload(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 20),\n          new TermFreq(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 20),\n          new Input(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new TermFreqPayloadArrayIterator(new TermFreqPayload[] {\n          new TermFreqPayload(\"x y\", 20),\n          new TermFreqPayload(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Directory tempDir = getDirectory();\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, \"wfst\", true);\n\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 20),\n          new Input(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(true);\n\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 20),\n          new Input(\"x\", 2),\n        }));\n\n    for(int topN=1;topN<4;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x\", false, topN);\n\n      assertEquals(Math.min(topN, 2), results.size());\n\n      assertEquals(\"x\", results.get(0).key);\n      assertEquals(2, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"x y\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["6ce825e9276493231308229152c48f755ce1a0a5"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}