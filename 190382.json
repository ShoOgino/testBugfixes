{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testContextNotAllTermsRequired().mjava","commits":[{"id":"3ddd7fe363a03b018dd62c48017d9997657a111e","date":1476884674,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testContextNotAllTermsRequired().mjava","pathOld":"/dev/null","sourceNew":"  public void testContextNotAllTermsRequired() throws Exception {\n\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    // No context provided, all results returned\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    LookupResult result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Both have \"foo\" context:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(2, results.size());\n\n    result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Only one has \"foo\" context and len\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"len\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(1, results.size());\n\n    result = results.get(0);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"<b>len</b>d me your ear\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2305f39a86a068f1cee6fc5fbdfb760b153ac138","date":1476906991,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testContextNotAllTermsRequired().mjava","pathOld":"/dev/null","sourceNew":"  public void testContextNotAllTermsRequired() throws Exception {\n\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    // No context provided, all results returned\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    LookupResult result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Both have \"foo\" context:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(2, results.size());\n\n    result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Only one has \"foo\" context and len\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"len\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(1, results.size());\n\n    result = results.get(0);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"<b>len</b>d me your ear\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testContextNotAllTermsRequired().mjava","pathOld":"/dev/null","sourceNew":"  public void testContextNotAllTermsRequired() throws Exception {\n\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\"), asSet(\"foo\", \"bar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\"), asSet(\"foo\", \"baz\"))\n    };\n    Path tempDir = createTempDir(\"analyzingInfixContext\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newFSDirectory(tempDir), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    // No context provided, all results returned\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    LookupResult result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Both have \"foo\" context:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(2, results.size());\n\n    result = results.get(0);\n    assertEquals(\"a penny saved is a penny earned\", result.key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", result.highlightKey);\n    assertEquals(10, result.value);\n    assertEquals(new BytesRef(\"foobaz\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"baz\")));\n\n    result = results.get(1);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"lend me your <b>ear</b>\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    // Only one has \"foo\" context and len\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"len\", random()), asSet(\"foo\"), 10, false, true);\n    assertEquals(1, results.size());\n\n    result = results.get(0);\n    assertEquals(\"lend me your ear\", result.key);\n    assertEquals(\"<b>len</b>d me your ear\", result.highlightKey);\n    assertEquals(8, result.value);\n    assertEquals(new BytesRef(\"foobar\"), result.payload);\n    assertNotNull(result.contexts);\n    assertEquals(2, result.contexts.size());\n    assertTrue(result.contexts.contains(new BytesRef(\"foo\")));\n    assertTrue(result.contexts.contains(new BytesRef(\"bar\")));\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ddd7fe363a03b018dd62c48017d9997657a111e"],"3ddd7fe363a03b018dd62c48017d9997657a111e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2305f39a86a068f1cee6fc5fbdfb760b153ac138","3ddd7fe363a03b018dd62c48017d9997657a111e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3ddd7fe363a03b018dd62c48017d9997657a111e":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}