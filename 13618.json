{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, sessionWrapper);\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n      message = message.plus(CoreAdminParams.CORE_NODE_NAME, Assign.assignCoreNodeName(stateManager, coll));\n    }\n    ReplicaInfo ri = new ReplicaInfo(\n        message.getStr(CoreAdminParams.CORE_NODE_NAME),\n        message.getStr(CoreAdminParams.NAME),\n        message.getStr(ZkStateReader.COLLECTION_PROP),\n        message.getStr(ZkStateReader.SHARD_ID_PROP),\n        Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT)),\n        message.getStr(CoreAdminParams.NODE),\n        message.getProperties()\n    );\n    simAddReplica(message.getStr(CoreAdminParams.NODE), ri, true);\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"deea3439de4f487ae553317e50d5d641ca386374":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","d9ccfe45460d496c5e5e1b70396521dac842d966"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}