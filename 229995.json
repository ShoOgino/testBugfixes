{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","commits":[{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      StoredDocument docParallel = parallel.doc(parallelHits[i].doc);\n      StoredDocument docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      StoredDocument docParallel = parallel.doc(parallelHits[i].doc);\n      StoredDocument docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      StoredDocument docParallel = parallel.doc(parallelHits[i].doc);\n      StoredDocument docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      StoredDocument docParallel = parallel.doc(parallelHits[i].doc);\n      StoredDocument docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      StoredDocument docParallel = parallel.doc(parallelHits[i].doc);\n      StoredDocument docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}