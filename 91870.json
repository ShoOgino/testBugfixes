{"path":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#assertRapidMultiCommitQueues(String,long,long,long,BlockingQueue[Long]).mjava","commits":[{"id":"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7","date":1499971216,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#assertRapidMultiCommitQueues(String,long,long,long,BlockingQueue[Long]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method\n   * @see #testSoftAndHardCommitMaxTimeRapidAdds\n   */\n  private static void assertRapidMultiCommitQueues\n    (final String debug, final long startTimestampNanos, final long commitWaitMillis,\n     final long maxNumCommits, final BlockingQueue<Long> queue) throws InterruptedException {\n\n    assert 0 < maxNumCommits;\n    \n    // do all our math/comparisons in Nanos...\n    final long commitWaitNanos = NANOSECONDS.convert(commitWaitMillis, MILLISECONDS);\n\n    // these will be modified in each iteration of our assertion loop\n    long prevTimestampNanos = startTimestampNanos;\n    int count = 1;\n    Long commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    assertNotNull(debug + \": did not find a single commit\", commitNanos);\n    \n    while (null != commitNanos) {\n      if (commitNanos < prevTimestampNanos + commitWaitMillis) {\n        fail(debug + \": commit#\" + count + \" has TS too low relative to previous TS & commitWait: \" +\n             \"commitNanos=\" + commitNanos + \", prevTimestampNanos=\" + prevTimestampNanos +\n             \", commitWaitMillis=\" + commitWaitMillis);\n      }\n      if (maxNumCommits < count) {\n        fail(debug + \": commit#\" + count + \" w/ commitNanos=\" + commitNanos +\n             \", but maxNumCommits=\" +maxNumCommits);\n      }\n      \n      prevTimestampNanos = commitNanos;\n      count++;\n      commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#assertRapidMultiCommitQueues(String,long,long,long,BlockingQueue[Long]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method\n   * @see #testSoftAndHardCommitMaxTimeRapidAdds\n   */\n  private static void assertRapidMultiCommitQueues\n    (final String debug, final long startTimestampNanos, final long commitWaitMillis,\n     final long maxNumCommits, final BlockingQueue<Long> queue) throws InterruptedException {\n\n    assert 0 < maxNumCommits;\n    \n    // do all our math/comparisons in Nanos...\n    final long commitWaitNanos = NANOSECONDS.convert(commitWaitMillis, MILLISECONDS);\n\n    // these will be modified in each iteration of our assertion loop\n    long prevTimestampNanos = startTimestampNanos;\n    int count = 1;\n    Long commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    assertNotNull(debug + \": did not find a single commit\", commitNanos);\n    \n    while (null != commitNanos) {\n      if (commitNanos < prevTimestampNanos + commitWaitMillis) {\n        fail(debug + \": commit#\" + count + \" has TS too low relative to previous TS & commitWait: \" +\n             \"commitNanos=\" + commitNanos + \", prevTimestampNanos=\" + prevTimestampNanos +\n             \", commitWaitMillis=\" + commitWaitMillis);\n      }\n      if (maxNumCommits < count) {\n        fail(debug + \": commit#\" + count + \" w/ commitNanos=\" + commitNanos +\n             \", but maxNumCommits=\" +maxNumCommits);\n      }\n      \n      prevTimestampNanos = commitNanos;\n      count++;\n      commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#assertRapidMultiCommitQueues(String,long,long,long,BlockingQueue[Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#assertRapidMultiCommitQueues(String,long,long,long,BlockingQueue[Long]).mjava","sourceNew":"  /**\n   * Helper method\n   * @see #testSoftAndHardCommitMaxTimeRapidAdds\n   */\n  private static void assertRapidMultiCommitQueues\n    (final String debug, final long startTimestampNanos, final long commitWaitMillis,\n     final long maxNumCommits, final BlockingQueue<Long> queue) throws InterruptedException {\n\n    assert 0 < maxNumCommits;\n    \n    // do all our math/comparisons in Nanos...\n    final long commitWaitNanos = NANOSECONDS.convert(commitWaitMillis, MILLISECONDS);\n\n    // these will be modified in each iteration of our assertion loop\n    long prevTimestampNanos = startTimestampNanos;\n    int count = 1;\n    Long commitNanos = queue.poll(commitWaitMillis * 6, MILLISECONDS);\n    assertNotNull(debug + \": did not find a single commit\", commitNanos);\n    \n    while (null != commitNanos) {\n      if (commitNanos < prevTimestampNanos + commitWaitMillis) {\n        fail(debug + \": commit#\" + count + \" has TS too low relative to previous TS & commitWait: \" +\n             \"commitNanos=\" + commitNanos + \", prevTimestampNanos=\" + prevTimestampNanos +\n             \", commitWaitMillis=\" + commitWaitMillis);\n      }\n      if (maxNumCommits < count) {\n        fail(debug + \": commit#\" + count + \" w/ commitNanos=\" + commitNanos +\n             \", but maxNumCommits=\" +maxNumCommits);\n      }\n      \n      prevTimestampNanos = commitNanos;\n      count++;\n      commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method\n   * @see #testSoftAndHardCommitMaxTimeRapidAdds\n   */\n  private static void assertRapidMultiCommitQueues\n    (final String debug, final long startTimestampNanos, final long commitWaitMillis,\n     final long maxNumCommits, final BlockingQueue<Long> queue) throws InterruptedException {\n\n    assert 0 < maxNumCommits;\n    \n    // do all our math/comparisons in Nanos...\n    final long commitWaitNanos = NANOSECONDS.convert(commitWaitMillis, MILLISECONDS);\n\n    // these will be modified in each iteration of our assertion loop\n    long prevTimestampNanos = startTimestampNanos;\n    int count = 1;\n    Long commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    assertNotNull(debug + \": did not find a single commit\", commitNanos);\n    \n    while (null != commitNanos) {\n      if (commitNanos < prevTimestampNanos + commitWaitMillis) {\n        fail(debug + \": commit#\" + count + \" has TS too low relative to previous TS & commitWait: \" +\n             \"commitNanos=\" + commitNanos + \", prevTimestampNanos=\" + prevTimestampNanos +\n             \", commitWaitMillis=\" + commitWaitMillis);\n      }\n      if (maxNumCommits < count) {\n        fail(debug + \": commit#\" + count + \" w/ commitNanos=\" + commitNanos +\n             \", but maxNumCommits=\" +maxNumCommits);\n      }\n      \n      prevTimestampNanos = commitNanos;\n      count++;\n      commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);\n    }\n  }\n\n","bugFix":["8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","8e1aa489b66a1cd9fdb5fb758a9603da94a2d6d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}