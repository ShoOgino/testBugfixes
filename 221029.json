{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#checkCollectionParameters().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#checkCollectionParameters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     // default - will add them to multicollection1\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}