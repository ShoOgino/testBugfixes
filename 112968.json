{"path":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","commits":[{"id":"e35534ac782c9c9d1227a10245ab7729d9eef22f","date":1279904940,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec.getClass().isAssignableFrom(c.getClass()))\n          codecs.remove(codec.name);\n      else\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","sourceNew":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec.getClass().isAssignableFrom(c.getClass()))\n        codecs.remove(codec.name);\n      else\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec.getClass().isAssignableFrom(c.getClass()))\n          codecs.remove(codec.name);\n      else\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","sourceNew":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec.getClass().isAssignableFrom(c.getClass()))\n        codecs.remove(codec.name);\n      else\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1e1d807860d59dc4157506e7c4073c5f5f0597c","date":1280408774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#unregister(Codec).mjava","sourceNew":null,"sourceOld":"  /** @lucene.internal */\n  public synchronized void unregister(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (codecs.containsKey(codec.name)) {\n      Codec c = codecs.get(codec.name);\n      if (codec == c) {\n        codecs.remove(codec.name);\n      } else {\n        throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is being impersonated by a different codec instance!!!\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"b1e1d807860d59dc4157506e7c4073c5f5f0597c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["e35534ac782c9c9d1227a10245ab7729d9eef22f"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e35534ac782c9c9d1227a10245ab7729d9eef22f":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e35534ac782c9c9d1227a10245ab7729d9eef22f","3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"b1e1d807860d59dc4157506e7c4073c5f5f0597c":["7b91922b55d15444d554721b352861d028eb8278","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}