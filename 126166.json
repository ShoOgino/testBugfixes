{"path":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBlendedFreqScoringRewrite#adjustScoreTerms(IndexReader,ScoreTerm[]).mjava","commits":[{"id":"9f7c14f40c65357617cada58ca9b026ab9f81c24","date":1432120112,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBlendedFreqScoringRewrite#adjustScoreTerms(IndexReader,ScoreTerm[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void adjustScoreTerms(IndexReader reader, ScoreTerm[] scoreTerms) {\n      if (scoreTerms.length <= 1) {\n        return;\n      }\n      int maxDoc = reader.maxDoc();\n      int maxDf = 0;\n      long maxTtf = 0;\n      for (ScoreTerm scoreTerm : scoreTerms) {\n        TermContext ctx = scoreTerm.termState;\n        int df = ctx.docFreq();\n        maxDf = Math.max(df, maxDf);\n        long ttf = ctx.totalTermFreq();\n        maxTtf = ttf == -1 || maxTtf == -1 ? -1 : Math.max(ttf, maxTtf);\n      }\n\n      assert maxDf >= 0 : \"DF must be >= 0\";\n      if (maxDf == 0) {\n        return; // we are done that term doesn't exist at all\n      }\n      assert (maxTtf == -1) || (maxTtf >= maxDf);\n\n      for (int i = 0; i < scoreTerms.length; i++) {\n        TermContext ctx = scoreTerms[i].termState;\n        ctx = adjustFrequencies(ctx, maxDf, maxTtf);\n\n        ScoreTerm adjustedScoreTerm = new ScoreTerm(ctx);\n        adjustedScoreTerm.boost = scoreTerms[i].boost;\n        adjustedScoreTerm.bytes.copyBytes(scoreTerms[i].bytes);\n        scoreTerms[i] = adjustedScoreTerm;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBlendedFreqScoringRewrite#adjustScoreTerms(IndexReader,ScoreTerm[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBlendedFreqScoringRewrite#adjustScoreTerms(IndexReader,ScoreTerm[]).mjava","sourceNew":"    @Override\n    void adjustScoreTerms(IndexReader reader, ScoreTerm[] scoreTerms) {\n      if (scoreTerms.length <= 1) {\n        return;\n      }\n      int maxDf = 0;\n      long maxTtf = 0;\n      for (ScoreTerm scoreTerm : scoreTerms) {\n        TermContext ctx = scoreTerm.termState;\n        int df = ctx.docFreq();\n        maxDf = Math.max(df, maxDf);\n        long ttf = ctx.totalTermFreq();\n        maxTtf = ttf == -1 || maxTtf == -1 ? -1 : Math.max(ttf, maxTtf);\n      }\n\n      assert maxDf >= 0 : \"DF must be >= 0\";\n      if (maxDf == 0) {\n        return; // we are done that term doesn't exist at all\n      }\n      assert (maxTtf == -1) || (maxTtf >= maxDf);\n\n      for (int i = 0; i < scoreTerms.length; i++) {\n        TermContext ctx = scoreTerms[i].termState;\n        ctx = adjustFrequencies(ctx, maxDf, maxTtf);\n\n        ScoreTerm adjustedScoreTerm = new ScoreTerm(ctx);\n        adjustedScoreTerm.boost = scoreTerms[i].boost;\n        adjustedScoreTerm.bytes.copyBytes(scoreTerms[i].bytes);\n        scoreTerms[i] = adjustedScoreTerm;\n      }\n    }\n\n","sourceOld":"    @Override\n    void adjustScoreTerms(IndexReader reader, ScoreTerm[] scoreTerms) {\n      if (scoreTerms.length <= 1) {\n        return;\n      }\n      int maxDoc = reader.maxDoc();\n      int maxDf = 0;\n      long maxTtf = 0;\n      for (ScoreTerm scoreTerm : scoreTerms) {\n        TermContext ctx = scoreTerm.termState;\n        int df = ctx.docFreq();\n        maxDf = Math.max(df, maxDf);\n        long ttf = ctx.totalTermFreq();\n        maxTtf = ttf == -1 || maxTtf == -1 ? -1 : Math.max(ttf, maxTtf);\n      }\n\n      assert maxDf >= 0 : \"DF must be >= 0\";\n      if (maxDf == 0) {\n        return; // we are done that term doesn't exist at all\n      }\n      assert (maxTtf == -1) || (maxTtf >= maxDf);\n\n      for (int i = 0; i < scoreTerms.length; i++) {\n        TermContext ctx = scoreTerms[i].termState;\n        ctx = adjustFrequencies(ctx, maxDf, maxTtf);\n\n        ScoreTerm adjustedScoreTerm = new ScoreTerm(ctx);\n        adjustedScoreTerm.boost = scoreTerms[i].boost;\n        adjustedScoreTerm.bytes.copyBytes(scoreTerms[i].bytes);\n        scoreTerms[i] = adjustedScoreTerm;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBlendedFreqScoringRewrite#adjustScoreTerms(IndexReader,ScoreTerm[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    void adjustScoreTerms(IndexReader reader, ScoreTerm[] scoreTerms) {\n      if (scoreTerms.length <= 1) {\n        return;\n      }\n      int maxDf = 0;\n      long maxTtf = 0;\n      for (ScoreTerm scoreTerm : scoreTerms) {\n        TermContext ctx = scoreTerm.termState;\n        int df = ctx.docFreq();\n        maxDf = Math.max(df, maxDf);\n        long ttf = ctx.totalTermFreq();\n        maxTtf = ttf == -1 || maxTtf == -1 ? -1 : Math.max(ttf, maxTtf);\n      }\n\n      assert maxDf >= 0 : \"DF must be >= 0\";\n      if (maxDf == 0) {\n        return; // we are done that term doesn't exist at all\n      }\n      assert (maxTtf == -1) || (maxTtf >= maxDf);\n\n      for (int i = 0; i < scoreTerms.length; i++) {\n        TermContext ctx = scoreTerms[i].termState;\n        ctx = adjustFrequencies(ctx, maxDf, maxTtf);\n\n        ScoreTerm adjustedScoreTerm = new ScoreTerm(ctx);\n        adjustedScoreTerm.boost = scoreTerms[i].boost;\n        adjustedScoreTerm.bytes.copyBytes(scoreTerms[i].bytes);\n        scoreTerms[i] = adjustedScoreTerm;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9f7c14f40c65357617cada58ca9b026ab9f81c24"],"9f7c14f40c65357617cada58ca9b026ab9f81c24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"9f7c14f40c65357617cada58ca9b026ab9f81c24":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f7c14f40c65357617cada58ca9b026ab9f81c24"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}