{"path":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","commits":[{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int,float).mjava","sourceNew":"    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr, float score) {\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      TestCase.assertTrue(queryText + \": positive score\", score > 0.0);\n      TestCase.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        TestCase.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["61cbcf396559d597a914594d7e2830c142ecfd91"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61cbcf396559d597a914594d7e2830c142ecfd91"],"61cbcf396559d597a914594d7e2830c142ecfd91":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}