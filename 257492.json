{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["818b04e906a094f03512fe99c83e359da8277708"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["818b04e906a094f03512fe99c83e359da8277708","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"818b04e906a094f03512fe99c83e359da8277708":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}