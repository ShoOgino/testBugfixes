{"path":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newField(\"datefield\", DateTools.timeToString(now + 888888,\n        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));\n    doc.add(newField(\"body\", \"Today is a very sunny day in New York City\",\n                     TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["132903c28af3aa6f67284b78de91c0f0a99488c2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, null, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, null, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(query1, df1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query1, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, df1, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(query2, df2, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    Filter df1 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false));\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    Filter df2 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true));\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    Filter df1 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false));\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    Filter df2 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true));\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false);\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = TermRangeFilter.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true);\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    Filter df1 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false));\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    Filter df2 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true));\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    Query filtered = new BooleanQuery.Builder()\n        .add(query1, Occur.MUST)\n        .add(df1, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query1, Occur.MUST)\n        .add(df2, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query2, Occur.MUST)\n        .add(df1, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query2, Occur.MUST)\n        .add(df2, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    Filter df1 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false));\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    Filter df2 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true));\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    result = searcher.search(new FilteredQuery(query1, df1), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query1, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df1), 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    result = searcher.search(new FilteredQuery(query2, df2), 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":null,"sourceOld":"  /**\n   *\n   */\n  public void testAfter() throws IOException {\n    // create an index\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    \n    long now = System.currentTimeMillis();\n    \n    Document doc = new Document();\n    // add time that is in the future\n    doc.add(newStringField(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES));\n    doc.add(newTextField(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES));\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // filter that should preserve matches\n    // DateFilter df1 = DateFilter.After(\"datefield\", now);\n    Filter df1 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,\n        false));\n    // filter that should discard matches\n    // DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    Filter df2 = new QueryWrapperFilter(TermRangeQuery.newStringRange(\"datefield\", DateTools\n        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n        DateTools.timeToString(now + 999999999,\n            DateTools.Resolution.MILLISECOND), false, true));\n    \n    // search something that doesn't exist with DateFilter\n    Query query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n    \n    // search for something that does exists\n    Query query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n    \n    ScoreDoc[] result;\n    \n    // ensure that queries return expected results without DateFilter first\n    result = searcher.search(query1, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    result = searcher.search(query2, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    // run queries with DateFilter\n    Query filtered = new BooleanQuery.Builder()\n        .add(query1, Occur.MUST)\n        .add(df1, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query1, Occur.MUST)\n        .add(df2, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query2, Occur.MUST)\n        .add(df1, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(1, result.length);\n    \n    filtered = new BooleanQuery.Builder()\n        .add(query2, Occur.MUST)\n        .add(df2, Occur.FILTER)\n        .build();\n    result = searcher.search(filtered, 1000).scoreDocs;\n    assertEquals(0, result.length);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"1db68e96dd908fcd79ef809095822736aa601d08":["2713584a660051cd646423be682771e3bbd99985"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}