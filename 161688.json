{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","commits":[{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(FieldInfo,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit remove this:\n    if (ndv == null) {\n      return;\n    }\n    final long minValue = ndv.minValue();\n    final long maxValue = ndv.maxValue();\n    long minValue2 = Long.MAX_VALUE;\n    long maxValue2 = Long.MIN_VALUE;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      minValue2 = Math.min(minValue2, value);\n      maxValue2 = Math.max(maxValue2, value);\n    }\n    if (minValue != minValue2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports minValue=\" + minValue + \" but this is not the case: \" + minValue2);\n    }\n    if (maxValue != maxValue2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports maxValue=\" + maxValue + \" but this is not the case: \" + maxValue2);\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(FieldInfo fi, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit remove this:\n    if (ndv == null) {\n      return;\n    }\n    final long minValue = ndv.minValue();\n    final long maxValue = ndv.maxValue();\n    long minValue2 = Long.MAX_VALUE;\n    long maxValue2 = Long.MIN_VALUE;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      minValue2 = Math.min(minValue2, value);\n      maxValue2 = Math.max(maxValue2, value);\n    }\n    if (minValue != minValue2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports minValue=\" + minValue + \" but this is not the case: \" + minValue2);\n    }\n    if (maxValue != maxValue2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports maxValue=\" + maxValue + \" but this is not the case: \" + maxValue2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit remove this:\n    if (ndv == null) {\n      return;\n    }\n    // nocommit what else to check!\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit remove this:\n    if (ndv == null) {\n      return;\n    }\n    final long minValue = ndv.minValue();\n    final long maxValue = ndv.maxValue();\n    long minValue2 = Long.MAX_VALUE;\n    long maxValue2 = Long.MIN_VALUE;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      minValue2 = Math.min(minValue2, value);\n      maxValue2 = Math.max(maxValue2, value);\n    }\n    if (minValue != minValue2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports minValue=\" + minValue + \" but this is not the case: \" + minValue2);\n    }\n    if (maxValue != maxValue2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports maxValue=\" + maxValue + \" but this is not the case: \" + maxValue2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit what else to check!\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit remove this:\n    if (ndv == null) {\n      return;\n    }\n    // nocommit what else to check!\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    // nocommit what else to check!\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value > 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      long value = ndv.get(i);\n      if (docsWithField.get(i) == false && value != 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has value=\" + value + \" for doc: \" + i);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkNumericDocValues(String,AtomicReader,NumericDocValues).mjava","sourceNew":null,"sourceOld":"  private static void checkNumericDocValues(String fieldName, AtomicReader reader, NumericDocValues ndv) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.get(i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","caa40272511a69bd4ad04b8242ae420932f5799b"],"50599bdf4e0c26952f76b740a4280d058cab3539":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"caa40272511a69bd4ad04b8242ae420932f5799b":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["32fb848e256860b63adc9c2b068f386032c77b67"],"32fb848e256860b63adc9c2b068f386032c77b67":["50599bdf4e0c26952f76b740a4280d058cab3539"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"50599bdf4e0c26952f76b740a4280d058cab3539":["32fb848e256860b63adc9c2b068f386032c77b67"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"caa40272511a69bd4ad04b8242ae420932f5799b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","50599bdf4e0c26952f76b740a4280d058cab3539"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["caa40272511a69bd4ad04b8242ae420932f5799b"],"32fb848e256860b63adc9c2b068f386032c77b67":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}