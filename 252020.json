{"path":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","commits":[{"id":"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","date":1292262017,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getSortDirection().mjava","sourceNew":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","sourceOld":"    /**\n     * Sort direction or null if current position does not inidcate a \n     * sort direction. (True is desc, False is asc).  \n     * Position is advanced to after the comma (or end) when result is non null \n     */\n    Boolean getSortDirection() throws ParseException {\n      final int startPos = pos;\n      final String order = getId(null);\n\n      Boolean top = null;\n\n      if (null != order) {\n        if (\"desc\".equals(order) || \"top\".equals(order)) {\n          top = true;\n        } else if (\"asc\".equals(order) || \"bottom\".equals(order)) {\n          top = false;\n        }\n\n        // it's not a legal direction if more stuff comes after it\n        eatws();\n        final char c = ch();\n        if (0 == c) {\n          // :NOOP\n        } else if (',' == c) {\n          pos++;\n        } else {\n          top = null;\n        }\n      }\n\n      if (null == top) pos = startPos; // no direction, reset\n      return top;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"c26f00b574427b55127e869b935845554afde1fa":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}