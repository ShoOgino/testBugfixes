{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","commits":[{"id":"0a12d3c6475f1b99b086e4ca6b9ba34e65081859","date":1204263291,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser) {\n    this._baseURL = baseURL.toExternalForm();\n    if( this._baseURL.endsWith( \"/\" ) ) {\n      this._baseURL = this._baseURL.substring( 0, this._baseURL.length()-1 );\n    }\n\n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a121769840c8d93ec99800c02d0611ade27780a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ccf1a425d8699b7df67dc5e22765fcc448e8f44","date":1212681755,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser) {\n    this._baseURL = baseURL.toExternalForm();\n    if( this._baseURL.endsWith( \"/\" ) ) {\n      this._baseURL = this._baseURL.substring( 0, this._baseURL.length()-1 );\n    }\n\n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n  }\n\n","bugFix":null,"bugIntro":["3a121769840c8d93ec99800c02d0611ade27780a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c00763ceedfa0fc93dffe88eddf2ba67e7585de","date":1215037404,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["9ccf1a425d8699b7df67dc5e22765fcc448e8f44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9ccf1a425d8699b7df67dc5e22765fcc448e8f44":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["9ccf1a425d8699b7df67dc5e22765fcc448e8f44"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ccf1a425d8699b7df67dc5e22765fcc448e8f44":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}