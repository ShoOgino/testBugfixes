{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(getPrefixQuery(fields[i], termStr));\n      }\n      return getMultiFieldQuery(clauses);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","sourceOld":"  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        clauses.add(new BooleanClause(getPrefixQuery(fields[i], termStr),\n            BooleanClause.Occur.SHOULD));\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getPrefixQuery(field, termStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81d0720146de53dd3a4a023d2a3d1089d86d748d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}