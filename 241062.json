{"path":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#causeGc().mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#causeGc().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Very hacky, very crude, but (sometimes) works. \n   * Don't look, it will burn your eyes out. \n   */\n  private void causeGc() {\n    List<GarbageCollectorMXBean> garbageCollectorMXBeans = ManagementFactory.getGarbageCollectorMXBeans();\n    List<Long> ccounts = new ArrayList<Long>();\n    for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n      ccounts.add(g.getCollectionCount());\n    }\n    List<Long> ccounts2 = new ArrayList<Long>();\n    do {\n      System.gc();\n      ccounts.clear();\n      for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n        ccounts2.add(g.getCollectionCount());\n      }\n    } while (ccounts2.equals(ccounts));\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#causeGc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#causeGc().mjava","sourceNew":"  /**\n   * Very hacky, very crude, but (sometimes) works. \n   * Don't look, it will burn your eyes out. \n   */\n  private void causeGc() {\n    List<GarbageCollectorMXBean> garbageCollectorMXBeans = ManagementFactory.getGarbageCollectorMXBeans();\n    List<Long> ccounts = new ArrayList<>();\n    for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n      ccounts.add(g.getCollectionCount());\n    }\n    List<Long> ccounts2 = new ArrayList<>();\n    do {\n      System.gc();\n      ccounts.clear();\n      for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n        ccounts2.add(g.getCollectionCount());\n      }\n    } while (ccounts2.equals(ccounts));\n  }  \n\n","sourceOld":"  /**\n   * Very hacky, very crude, but (sometimes) works. \n   * Don't look, it will burn your eyes out. \n   */\n  private void causeGc() {\n    List<GarbageCollectorMXBean> garbageCollectorMXBeans = ManagementFactory.getGarbageCollectorMXBeans();\n    List<Long> ccounts = new ArrayList<Long>();\n    for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n      ccounts.add(g.getCollectionCount());\n    }\n    List<Long> ccounts2 = new ArrayList<Long>();\n    do {\n      System.gc();\n      ccounts.clear();\n      for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n        ccounts2.add(g.getCollectionCount());\n      }\n    } while (ccounts2.equals(ccounts));\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01578325020f17ab9d0ae59f122d17f90c5fecbc","date":1423765178,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/StressRamUsageEstimator#causeGc().mjava","sourceNew":null,"sourceOld":"  /**\n   * Very hacky, very crude, but (sometimes) works. \n   * Don't look, it will burn your eyes out. \n   */\n  private void causeGc() {\n    List<GarbageCollectorMXBean> garbageCollectorMXBeans = ManagementFactory.getGarbageCollectorMXBeans();\n    List<Long> ccounts = new ArrayList<>();\n    for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n      ccounts.add(g.getCollectionCount());\n    }\n    List<Long> ccounts2 = new ArrayList<>();\n    do {\n      System.gc();\n      ccounts.clear();\n      for (GarbageCollectorMXBean g : garbageCollectorMXBeans) {\n        ccounts2.add(g.getCollectionCount());\n      }\n    } while (ccounts2.equals(ccounts));\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dd6c9e9b1251473f465b0443b56046b2658402da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01578325020f17ab9d0ae59f122d17f90c5fecbc"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["01578325020f17ab9d0ae59f122d17f90c5fecbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"01578325020f17ab9d0ae59f122d17f90c5fecbc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}