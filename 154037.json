{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","commits":[{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel GarcÃ­a MartÃ­nez","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":["29e605d5d76b951a56badc9b8d630a3657aff0f8","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664c02a9f8ee4f39f4731f071c69e1932178f381","date":1591796512,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          if (error != null) {\n            reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"msg\"));\n            if(reason == null) {\n              reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"trace\"));\n            }\n            Object metadataObj = Utils.getObjectByPath(error, false, Collections.singletonList(\"metadata\"));\n            if  (metadataObj instanceof NamedList) {\n              metadata = (NamedList<String>) metadataObj;\n            } else if (metadataObj instanceof List) {\n              // NamedList parsed as List convert to NamedList again\n              List<Object> list = (List<Object>) metadataObj;\n              metadata = new NamedList<>(list.size()/2);\n              for (int i = 0; i < list.size(); i+=2) {\n                metadata.add((String)list.get(i), (String) list.get(i+1));\n              }\n            } else if (metadataObj instanceof Map) {\n              metadata = new NamedList((Map) metadataObj);\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          if (error != null) {\n            reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"msg\"));\n            if(reason == null) {\n              reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"trace\"));\n            }\n            Object metadataObj = Utils.getObjectByPath(error, false, Collections.singletonList(\"metadata\"));\n            if  (metadataObj instanceof NamedList) {\n              metadata = (NamedList<String>) metadataObj;\n            } else if (metadataObj instanceof List) {\n              // NamedList parsed as List convert to NamedList again\n              List<Object> list = (List<Object>) metadataObj;\n              metadata = new NamedList<>(list.size()/2);\n              for (int i = 0; i < list.size(); i+=2) {\n                metadata.add((String)list.get(i), (String) list.get(i+1));\n              }\n            } else if (metadataObj instanceof Map) {\n              metadata = new NamedList((Map) metadataObj);\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          if (error != null) {\n            reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"msg\"));\n            if(reason == null) {\n              reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"trace\"));\n            }\n            Object metadataObj = Utils.getObjectByPath(error, false, Collections.singletonList(\"metadata\"));\n            if  (metadataObj instanceof NamedList) {\n              metadata = (NamedList<String>) metadataObj;\n            } else if (metadataObj instanceof List) {\n              // NamedList parsed as List convert to NamedList again\n              List<Object> list = (List<Object>) metadataObj;\n              metadata = new NamedList<>(list.size()/2);\n              for (int i = 0; i < list.size(); i+=2) {\n                metadata.add((String)list.get(i), (String) list.get(i+1));\n              }\n            } else if (metadataObj instanceof Map) {\n              metadata = new NamedList((Map) metadataObj);\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          if (isUnmatchedErrorCode(mimeType, httpStatus)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                  + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                  null);\n          }\n\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          if (error != null) {\n            reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"msg\"));\n            if(reason == null) {\n              reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"trace\"));\n            }\n            Object metadataObj = Utils.getObjectByPath(error, false, Collections.singletonList(\"metadata\"));\n            if  (metadataObj instanceof NamedList) {\n              metadata = (NamedList<String>) metadataObj;\n            } else if (metadataObj instanceof List) {\n              // NamedList parsed as List convert to NamedList again\n              List<Object> list = (List<Object>) metadataObj;\n              metadata = new NamedList<>(list.size()/2);\n              for (int i = 0; i < list.size(); i+=2) {\n                metadata.add((String)list.get(i), (String) list.get(i+1));\n              }\n            } else if (metadataObj instanceof Map) {\n              metadata = new NamedList((Map) metadataObj);\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      String mimeType = null;\n      Charset charset = null;\n      String charsetName = null;\n\n      ContentType contentType = ContentType.get(entity);\n      if (contentType != null) {\n        mimeType = contentType.getMimeType().trim().toLowerCase(Locale.ROOT);\n        charset = contentType.getCharset();\n\n        if (charset != null) {\n          charsetName = charset.name();\n        }\n      }\n\n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || contentType == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Charset exceptionCharset = charset != null? charset : FALLBACK_CHARSET;\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, exceptionCharset);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + exceptionCharset, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      try {\n        rsp = processor.processResponse(respBody, charsetName);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          if (error != null) {\n            reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"msg\"));\n            if(reason == null) {\n              reason = (String) Utils.getObjectByPath(error, false, Collections.singletonList(\"trace\"));\n            }\n            Object metadataObj = Utils.getObjectByPath(error, false, Collections.singletonList(\"metadata\"));\n            if  (metadataObj instanceof NamedList) {\n              metadata = (NamedList<String>) metadataObj;\n            } else if (metadataObj instanceof List) {\n              // NamedList parsed as List convert to NamedList again\n              List<Object> list = (List<Object>) metadataObj;\n              metadata = new NamedList<>(list.size()/2);\n              for (int i = 0; i < list.size(); i+=2) {\n                metadata.add((String)list.get(i), (String) list.get(i+1));\n              }\n            } else if (metadataObj instanceof Map) {\n              metadata = new NamedList((Map) metadataObj);\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), FALLBACK_CHARSET);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occurred while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occurred when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"664c02a9f8ee4f39f4731f071c69e1932178f381":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["664c02a9f8ee4f39f4731f071c69e1932178f381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c99002731351c8c955238845b0038682148eec53":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c99002731351c8c955238845b0038682148eec53"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"664c02a9f8ee4f39f4731f071c69e1932178f381":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["c99002731351c8c955238845b0038682148eec53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"c99002731351c8c955238845b0038682148eec53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["664c02a9f8ee4f39f4731f071c69e1932178f381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}