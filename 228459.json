{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetsAccumulatorWrapper#accumulate(List[MatchingDocs]).mjava","commits":[{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetsAccumulatorWrapper#accumulate(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    List<FacetResult> results = accumulator.accumulate(matchingDocs);\n    List<FacetResult> rangeResults = rangeAccumulator.accumulate(matchingDocs);\n\n    int aUpto = 0;\n    int raUpto = 0;\n    List<FacetResult> merged = new ArrayList<FacetResult>();\n    for(FacetRequest fr : searchParams.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        merged.add(rangeResults.get(raUpto++));\n      } else {\n        merged.add(results.get(aUpto++));\n      }\n    }\n\n    return merged;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetsAccumulatorWrapper#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    List<FacetResult> merged = new ArrayList<FacetResult>();\n    for (FacetsAccumulator fa : accumulators) {\n      merged.addAll(fa.accumulate(matchingDocs));\n    }\n    return merged;\n  }\n\n","sourceOld":"  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    List<FacetResult> results = accumulator.accumulate(matchingDocs);\n    List<FacetResult> rangeResults = rangeAccumulator.accumulate(matchingDocs);\n\n    int aUpto = 0;\n    int raUpto = 0;\n    List<FacetResult> merged = new ArrayList<FacetResult>();\n    for(FacetRequest fr : searchParams.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        merged.add(rangeResults.get(raUpto++));\n      } else {\n        merged.add(results.get(aUpto++));\n      }\n    }\n\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetsAccumulatorWrapper#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    List<FacetResult> merged = new ArrayList<FacetResult>();\n    for (FacetsAccumulator fa : accumulators) {\n      merged.addAll(fa.accumulate(matchingDocs));\n    }\n    return merged;\n  }\n\n","sourceOld":"  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    List<FacetResult> results = accumulator.accumulate(matchingDocs);\n    List<FacetResult> rangeResults = rangeAccumulator.accumulate(matchingDocs);\n\n    int aUpto = 0;\n    int raUpto = 0;\n    List<FacetResult> merged = new ArrayList<FacetResult>();\n    for(FacetRequest fr : searchParams.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        merged.add(rangeResults.get(raUpto++));\n      } else {\n        merged.add(results.get(aUpto++));\n      }\n    }\n\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}