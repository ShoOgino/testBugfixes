{"path":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff728f0ac9112fac26f50ef2a8e7580c2525e6c","date":1389897879,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(10, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(8, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(7, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"indexed_not_tokenized\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   * \n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.getFields().size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    doc.removeFields(\"keyword\"); // removing a field more than once\n    assertEquals(6, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.getFields().size());\n    doc.removeField(\"doesnotexists\"); // removing non-existing fields is\n                                      // siltenlty ignored\n    assertEquals(4, doc.getFields().size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.getFields().size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.getFields().size());\n    doc.removeFields(\"doesnotexists\"); // removing non-existing fields is\n                                       // siltenlty ignored\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ff728f0ac9112fac26f50ef2a8e7580c2525e6c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff728f0ac9112fac26f50ef2a8e7580c2525e6c"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8ff728f0ac9112fac26f50ef2a8e7580c2525e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8ff728f0ac9112fac26f50ef2a8e7580c2525e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}