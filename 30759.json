{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","sourceNew":"  /**\n   * @param weightedTerms an array of pre-created {@link WeightedSpanTerm}s\n   */\n  public QueryScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap<String,WeightedSpanTerm>(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n    skipInitExtractor = true;\n  }\n\n","sourceOld":"  /**\n   * @param weightedTerms an array of pre-created {@link WeightedSpanTerm}s\n   */\n  public QueryScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap<String,WeightedSpanTerm>(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n    skipInitExtractor = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","sourceNew":"  /**\n   * @param weightedTerms an array of pre-created {@link WeightedSpanTerm}s\n   */\n  public QueryScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap<String,WeightedSpanTerm>(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n    skipInitExtractor = true;\n  }\n\n","sourceOld":"  /**\n   * @param weightedTerms an array of pre-created {@link WeightedSpanTerm}s\n   */\n  public QueryScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap<String,WeightedSpanTerm>(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n    skipInitExtractor = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}