{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XYZSolidFactory#makeXYZSolid(PlanetModel,double,double,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XYZSolidFactory#makeXYZSolid(PlanetModel,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/XYZSolidFactory#makeXYZSolid(PlanetModel,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a XYZSolid of the right kind given (x,y,z) bounds.\n   * @param planetModel is the planet model\n   * @param minX is the min X boundary\n   * @param maxX is the max X boundary\n   * @param minY is the min Y boundary\n   * @param maxY is the max Y boundary\n   * @param minZ is the min Z boundary\n   * @param maxZ is the max Z boundary\n   */\n  public static XYZSolid makeXYZSolid(final PlanetModel planetModel, final double minX, final double maxX, final double minY, final double maxY, final double minZ, final double maxZ) {\n    if (Math.abs(maxX - minX) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n          return new dXdYdZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ);\n        } else {\n          return new dXdYZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ, maxZ);\n        }\n      } else {\n        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n          return new dXYdZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, (minZ+maxZ) * 0.5);\n        } else {\n          return new dXYZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, minZ, maxZ);\n        }\n      }\n    }\n    if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n        return new XdYdZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, (minZ+maxZ) * 0.5);\n      } else {\n        return new XdYZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, minZ, maxZ);\n      }\n    }\n    if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n      return new XYdZSolid(planetModel, minX, maxX, minY, maxY, (minZ+maxZ) * 0.5);\n    }\n    return new StandardXYZSolid(planetModel, minX, maxX, minY, maxY, minZ, maxZ);\n  }\n\n","sourceOld":"  /**\n   * Create a XYZSolid of the right kind given (x,y,z) bounds.\n   * @param planetModel is the planet model\n   * @param minX is the min X boundary\n   * @param maxX is the max X boundary\n   * @param minY is the min Y boundary\n   * @param maxY is the max Y boundary\n   * @param minZ is the min Z boundary\n   * @param maxZ is the max Z boundary\n   */\n  public static XYZSolid makeXYZSolid(final PlanetModel planetModel, final double minX, final double maxX, final double minY, final double maxY, final double minZ, final double maxZ) {\n    if (Math.abs(maxX - minX) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n          return new dXdYdZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ);\n        } else {\n          return new dXdYZSolid(planetModel, (minX+maxX) * 0.5, (minY+maxY) * 0.5, minZ, maxZ);\n        }\n      } else {\n        if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n          return new dXYdZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, (minZ+maxZ) * 0.5);\n        } else {\n          return new dXYZSolid(planetModel, (minX+maxX) * 0.5, minY, maxY, minZ, maxZ);\n        }\n      }\n    }\n    if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n        return new XdYdZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, (minZ+maxZ) * 0.5);\n      } else {\n        return new XdYZSolid(planetModel, minX, maxX, (minY+maxY) * 0.5, minZ, maxZ);\n      }\n    }\n    if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {\n      return new XYdZSolid(planetModel, minX, maxX, minY, maxY, (minZ+maxZ) * 0.5);\n    }\n    return new StandardXYZSolid(planetModel, minX, maxX, minY, maxY, minZ, maxZ);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}