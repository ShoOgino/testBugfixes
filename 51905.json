{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs1 = timeout -  ((System.nanoTime() - startTime) /1000000);\n        int secsLeft = (int) (timeLeftSecs1 > 0 ? timeLeftSecs1 : -1);\n        if(secsLeft<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        long timeLeftSecs = timeout -  ((System.nanoTime() - startTime) /1000000);\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) (timeLeftSecs > 0 ? timeLeftSecs : -1));\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ded8305bfbb6878fe2da714c21c39238a95672c","date":1412179095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","sourceNew":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout -   TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if(timeLeftSecs<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n\n    }\n  }\n\n","sourceOld":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs1 = timeout -  ((System.nanoTime() - startTime) /1000000);\n        int secsLeft = (int) (timeLeftSecs1 > 0 ? timeLeftSecs1 : -1);\n        if(secsLeft<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        long timeLeftSecs = timeout -  ((System.nanoTime() - startTime) /1000000);\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) (timeLeftSecs > 0 ? timeLeftSecs : -1));\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout -   TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if(timeLeftSecs<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","sourceNew":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if (timeout > 0 && managedIndexSchema.getResourceLoader() instanceof ZkSolrResourceLoader) {\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout - TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if (timeLeftSecs <= 0) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not enough time left to update replicas. However, the schema is updated already.\");\n        }\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n    }\n  }\n\n","sourceOld":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout -   TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if(timeLeftSecs<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","sourceNew":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if (timeout > 0 && managedIndexSchema.getResourceLoader() instanceof ZkSolrResourceLoader) {\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout - TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if (timeLeftSecs <= 0) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not enough time left to update replicas. However, the schema is updated already.\");\n        }\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n    }\n  }\n\n","sourceOld":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if(timeout > 0 && managedIndexSchema.getResourceLoader()instanceof ZkSolrResourceLoader){\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout -   TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if(timeLeftSecs<=0) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Not enough time left to update replicas. However the schema is updated already\");\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484264228e1de4c93d0f9ec7ad2181223b11889a","date":1460910418,"type":4,"author":"Varun Thacker","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","sourceNew":null,"sourceOld":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if (timeout > 0 && managedIndexSchema.getResourceLoader() instanceof ZkSolrResourceLoader) {\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout - TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if (timeLeftSecs <= 0) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not enough time left to update replicas. However, the schema is updated already.\");\n        }\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(int,long).mjava","sourceNew":null,"sourceOld":"  private void waitForOtherReplicasToUpdate(int timeout, long startTime) {\n    if (timeout > 0 && managedIndexSchema.getResourceLoader() instanceof ZkSolrResourceLoader) {\n      CoreDescriptor cd = req.getCore().getCoreDescriptor();\n      String collection = cd.getCollectionName();\n      if (collection != null) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n        long timeLeftSecs = timeout - TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n        if (timeLeftSecs <= 0) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Not enough time left to update replicas. However, the schema is updated already.\");\n        }\n        ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n            cd.getCloudDescriptor().getCoreNodeName(),\n            (managedIndexSchema).getSchemaZkVersion(),\n            zkLoader.getZkController(),\n            (int) timeLeftSecs);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4ded8305bfbb6878fe2da714c21c39238a95672c","eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["4ded8305bfbb6878fe2da714c21c39238a95672c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ded8305bfbb6878fe2da714c21c39238a95672c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ded8305bfbb6878fe2da714c21c39238a95672c"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["eeeea2295d6355a29e259130a5c48ace73022d7c","484264228e1de4c93d0f9ec7ad2181223b11889a"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8cb57c50beb99a1245256e866350af8e5ea1f36"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f8cb57c50beb99a1245256e866350af8e5ea1f36","484264228e1de4c93d0f9ec7ad2181223b11889a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4ded8305bfbb6878fe2da714c21c39238a95672c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["4ded8305bfbb6878fe2da714c21c39238a95672c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}