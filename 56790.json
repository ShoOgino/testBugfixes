{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","commits":[{"id":"39d69912999d6e0acfb6eb6be558fcc165eee0b2","date":1308066875,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","sourceNew":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","sourceOld":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["df16fc2e9b615e0138edac46655ae628f5d098ad","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}