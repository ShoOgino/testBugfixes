{"path":"lucene/src/test/org/apache/lucene/util/TestSentinelIntSet#testRandom().mjava","commits":[{"id":"d03dbeb61d60670c339bf390631ae5daf7ac0d45","date":1327009120,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSentinelIntSet#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandom() throws Exception {\n    for (int i=0; i<10000; i++) {\n      int initSz = random.nextInt(20);\n      int num = random.nextInt(30);\n      int maxVal = (random.nextBoolean() ? random.nextInt(50) : random.nextInt(Integer.MAX_VALUE)) + 1;\n\n      HashSet<Integer> a = new HashSet<Integer>(initSz);\n      SentinelIntSet b = new SentinelIntSet(initSz, -1);\n      \n      for (int j=0; j<num; j++) {\n        int val = random.nextInt(maxVal);\n        boolean exists = !a.add(val);\n        boolean existsB = b.exists(val);\n        assertEquals(exists, existsB);\n        int slot = b.find(val);\n        assertEquals(exists, slot>=0);\n        b.put(val);\n        \n        assertEquals(a.size(), b.size());\n      }\n      \n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSentinelIntSet#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandom() throws Exception {\n    for (int i=0; i<10000; i++) {\n      int initSz = random.nextInt(20);\n      int num = random.nextInt(30);\n      int maxVal = (random.nextBoolean() ? random.nextInt(50) : random.nextInt(Integer.MAX_VALUE)) + 1;\n\n      HashSet<Integer> a = new HashSet<Integer>(initSz);\n      SentinelIntSet b = new SentinelIntSet(initSz, -1);\n      \n      for (int j=0; j<num; j++) {\n        int val = random.nextInt(maxVal);\n        boolean exists = !a.add(val);\n        boolean existsB = b.exists(val);\n        assertEquals(exists, existsB);\n        int slot = b.find(val);\n        assertEquals(exists, slot>=0);\n        b.put(val);\n        \n        assertEquals(a.size(), b.size());\n      }\n      \n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSentinelIntSet#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSentinelIntSet#testRandom().mjava","sourceNew":"  @Test\n  public void testRandom() throws Exception {\n    for (int i=0; i<10000; i++) {\n      int initSz = random.nextInt(20);\n      int num = random.nextInt(30);\n      int maxVal = (random.nextBoolean() ? random.nextInt(50) : random.nextInt(Integer.MAX_VALUE)) + 1;\n\n      HashSet<Integer> a = new HashSet<Integer>(initSz);\n      SentinelIntSet b = new SentinelIntSet(initSz, -1);\n      \n      for (int j=0; j<num; j++) {\n        int val = random.nextInt(maxVal);\n        boolean exists = !a.add(val);\n        boolean existsB = b.exists(val);\n        assertEquals(exists, existsB);\n        int slot = b.find(val);\n        assertEquals(exists, slot>=0);\n        b.put(val);\n        \n        assertEquals(a.size(), b.size());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    for (int i=0; i<10000; i++) {\n      int initSz = random.nextInt(20);\n      int num = random.nextInt(30);\n      int maxVal = (random.nextBoolean() ? random.nextInt(50) : random.nextInt(Integer.MAX_VALUE)) + 1;\n\n      HashSet<Integer> a = new HashSet<Integer>(initSz);\n      SentinelIntSet b = new SentinelIntSet(initSz, -1);\n      \n      for (int j=0; j<num; j++) {\n        int val = random.nextInt(maxVal);\n        boolean exists = !a.add(val);\n        boolean existsB = b.exists(val);\n        assertEquals(exists, existsB);\n        int slot = b.find(val);\n        assertEquals(exists, slot>=0);\n        b.put(val);\n        \n        assertEquals(a.size(), b.size());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d03dbeb61d60670c339bf390631ae5daf7ac0d45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d03dbeb61d60670c339bf390631ae5daf7ac0d45"],"d03dbeb61d60670c339bf390631ae5daf7ac0d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d03dbeb61d60670c339bf390631ae5daf7ac0d45"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d03dbeb61d60670c339bf390631ae5daf7ac0d45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}