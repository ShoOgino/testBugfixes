{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","commits":[{"id":"8723a3379c08ae0b4ba0cf4f246306f86ad8362d","date":1287582680,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last), useCompoundFile));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last), useCompoundFile));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","date":1290598569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(makeOneMerge(infos, infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(makeOneMerge(infos, infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(makeOneMerge(infos, infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last), useCompoundFile));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(makeOneMerge(infos, infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(makeOneMerge(infos, infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(makeOneMerge(infos, infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(makeOneMerge(infos, infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(makeOneMerge(infos, infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(makeOneMerge(infos, infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last), useCompoundFile));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last), useCompoundFile));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(makeOneMerge(infos, infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(makeOneMerge(infos, infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(makeOneMerge(infos, infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b589b416d5461faed99d25118babbda4b89acb4","date":1294225264,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bcd63cc99c783b21344aeeebc8c04db29770205","date":1295239623,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae31c2e5298b269d50b60961fe85afc5fbe873c3","date":1295256360,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(infos.range(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(infos.range(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(infos.range(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimizeSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to optimize the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findMergesForOptimizeSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"optimize: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForOptimize + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is optimized.\n        if (last - start - 1 > 1 || (start != last - 1 && !isOptimized(infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of this one, or an unoptimized single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1 already optimized.\n    if (last > 0 && (++start + 1 < last || !isOptimized(infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","1b589b416d5461faed99d25118babbda4b89acb4"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"8bcd63cc99c783b21344aeeebc8c04db29770205":["1b589b416d5461faed99d25118babbda4b89acb4"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["3bb13258feba31ab676502787ab2e1779f129b7a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38a62612cfa4e104080d89d7751a8f1a258ac335"],"ae31c2e5298b269d50b60961fe85afc5fbe873c3":["868da859b43505d9d2a023bfeae6dd0c795f5295","8bcd63cc99c783b21344aeeebc8c04db29770205"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["8bcd63cc99c783b21344aeeebc8c04db29770205"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["8bcd63cc99c783b21344aeeebc8c04db29770205","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","8bcd63cc99c783b21344aeeebc8c04db29770205"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"1b589b416d5461faed99d25118babbda4b89acb4":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1b589b416d5461faed99d25118babbda4b89acb4"],"3bb13258feba31ab676502787ab2e1779f129b7a":["8017ab6544f30f93b106e419e7298173bad77f69","5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1b589b416d5461faed99d25118babbda4b89acb4"],"8bcd63cc99c783b21344aeeebc8c04db29770205":["ae31c2e5298b269d50b60961fe85afc5fbe873c3","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["70ad682703b8585f5d0a637efec044d57ec05efb"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["38a62612cfa4e104080d89d7751a8f1a258ac335","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"ae31c2e5298b269d50b60961fe85afc5fbe873c3":[],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8017ab6544f30f93b106e419e7298173bad77f69","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"8017ab6544f30f93b106e419e7298173bad77f69":["3bb13258feba31ab676502787ab2e1779f129b7a"],"1b589b416d5461faed99d25118babbda4b89acb4":["70ad682703b8585f5d0a637efec044d57ec05efb","8bcd63cc99c783b21344aeeebc8c04db29770205","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","8017ab6544f30f93b106e419e7298173bad77f69"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ae31c2e5298b269d50b60961fe85afc5fbe873c3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae31c2e5298b269d50b60961fe85afc5fbe873c3","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}