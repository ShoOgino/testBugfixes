{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,AtomicBoolean,InputStream,DataInput,DataOutput,BufferedOutputStream).mjava","commits":[{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,AtomicBoolean,InputStream,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  private void handleIndexing(Socket socket, AtomicBoolean stop, InputStream is, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n    Thread.currentThread().setName(\"indexing\");\n    message(\"start handling indexing socket=\" + socket);\n    while (true) {\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n      byte cmd;\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        // done\n        return;\n      }\n      //message(\"INDEXING OP \" + cmd);\n      if (cmd == CMD_ADD_DOC) {\n        handleAddDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_UPDATE_DOC) {\n        handleUpdateDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_DOC) {\n        handleDeleteDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_ALL_DOCS) {\n        writer.deleteAll();\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_FORCE_MERGE) {\n        writer.forceMerge(1);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_INDEXING_DONE) {\n        out.writeByte((byte) 1);\n        bos.flush();\n        break;\n      } else {\n        throw new IllegalArgumentException(\"cmd must be add, update or delete; got \" + cmd);\n      }\n    }\n  }\n\n","sourceOld":"  private void handleIndexing(Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"indexing\");\n    message(\"start handling indexing socket=\" + socket);\n    while (true) {\n      byte cmd;\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        // done\n        return;\n      }\n      //message(\"INDEXING OP \" + cmd);\n      if (cmd == CMD_ADD_DOC) {\n        handleAddDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_UPDATE_DOC) {\n        handleUpdateDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_DOC) {\n        handleDeleteDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_ALL_DOCS) {\n        writer.deleteAll();\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_FORCE_MERGE) {\n        writer.forceMerge(1);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_INDEXING_DONE) {\n        out.writeByte((byte) 1);\n        bos.flush();\n        break;\n      } else {\n        throw new IllegalArgumentException(\"cmd must be add, update or delete; got \" + cmd);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,AtomicBoolean,InputStream,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,DataInput,DataOutput,BufferedOutputStream).mjava","sourceNew":"  private void handleIndexing(Socket socket, AtomicBoolean stop, InputStream is, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n    Thread.currentThread().setName(\"indexing\");\n    message(\"start handling indexing socket=\" + socket);\n    while (true) {\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n      byte cmd;\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        // done\n        return;\n      }\n      //message(\"INDEXING OP \" + cmd);\n      if (cmd == CMD_ADD_DOC) {\n        handleAddDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_UPDATE_DOC) {\n        handleUpdateDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_DOC) {\n        handleDeleteDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_ALL_DOCS) {\n        writer.deleteAll();\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_FORCE_MERGE) {\n        writer.forceMerge(1);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_INDEXING_DONE) {\n        out.writeByte((byte) 1);\n        bos.flush();\n        break;\n      } else {\n        throw new IllegalArgumentException(\"cmd must be add, update or delete; got \" + cmd);\n      }\n    }\n  }\n\n","sourceOld":"  private void handleIndexing(Socket socket, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException {\n    Thread.currentThread().setName(\"indexing\");\n    message(\"start handling indexing socket=\" + socket);\n    while (true) {\n      byte cmd;\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        // done\n        return;\n      }\n      //message(\"INDEXING OP \" + cmd);\n      if (cmd == CMD_ADD_DOC) {\n        handleAddDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_UPDATE_DOC) {\n        handleUpdateDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_DOC) {\n        handleDeleteDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_ALL_DOCS) {\n        writer.deleteAll();\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_FORCE_MERGE) {\n        writer.forceMerge(1);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_INDEXING_DONE) {\n        out.writeByte((byte) 1);\n        bos.flush();\n        break;\n      } else {\n        throw new IllegalArgumentException(\"cmd must be add, update or delete; got \" + cmd);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#handleIndexing(Socket,AtomicBoolean,InputStream,DataInput,DataOutput,BufferedOutputStream).mjava","pathOld":"/dev/null","sourceNew":"  private void handleIndexing(Socket socket, AtomicBoolean stop, InputStream is, DataInput in, DataOutput out, BufferedOutputStream bos) throws IOException, InterruptedException {\n    Thread.currentThread().setName(\"indexing\");\n    message(\"start handling indexing socket=\" + socket);\n    while (true) {\n      while (true) {\n        if (is.available() > 0) {\n          break;\n        }\n        if (stop.get()) {\n          return;\n        }\n        Thread.sleep(10);\n      }\n      byte cmd;\n      try {\n        cmd = in.readByte();\n      } catch (EOFException eofe) {\n        // done\n        return;\n      }\n      //message(\"INDEXING OP \" + cmd);\n      if (cmd == CMD_ADD_DOC) {\n        handleAddDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_UPDATE_DOC) {\n        handleUpdateDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_DOC) {\n        handleDeleteDocument(in, out);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_DELETE_ALL_DOCS) {\n        writer.deleteAll();\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_FORCE_MERGE) {\n        writer.forceMerge(1);\n        out.writeByte((byte) 1);\n        bos.flush();\n      } else if (cmd == CMD_INDEXING_DONE) {\n        out.writeByte((byte) 1);\n        bos.flush();\n        break;\n      } else {\n        throw new IllegalArgumentException(\"cmd must be add, update or delete; got \" + cmd);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3d0d2e502d016d967c45c0c972ace4d02885e07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b6213064c76adb293e52f03a3eb1528c5b1858"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3d0d2e502d016d967c45c0c972ace4d02885e07","68496c2200e559fb7802f7575427b7a482659afb","33b6213064c76adb293e52f03a3eb1528c5b1858"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}