{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatusCollectionName().mjava","commits":[{"id":"3e0a004e91693120f3f1ae6f95a5f02c9ad431e5","date":1599157536,"type":0,"author":"Andy Vuong","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatusCollectionName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testColStatusCollectionName() throws Exception {\n    final String[] collectionNames = {\"collectionStatusTest_1\", \"collectionStatusTest_2\"};\n    for (String collectionName : collectionNames) {\n      CollectionAdminRequest.createCollection(collectionName, \"conf2\", 1, 1)\n      .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(collectionName, 1, 1);\n    }\n    // assert only one collection is returned using the solrj colstatus interface\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionNames[0]);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertNotNull(rsp.getResponse().get(collectionNames[0]));\n    assertNull(rsp.getResponse().get(collectionNames[1]));\n   \n    req = CollectionAdminRequest.collectionStatus(collectionNames[1]);\n    rsp = req.process(cluster.getSolrClient());\n    assertNotNull(rsp.getResponse().get(collectionNames[1]));\n    assertNull(rsp.getResponse().get(collectionNames[0]));\n    \n    // assert passing null collection fails\n    expectThrows(NullPointerException.class, \n        \"Passing null to collectionStatus should result in an NPE\",\n        () -> CollectionAdminRequest.collectionStatus(null));\n    \n    // assert passing non-existent collection returns no collections\n    req = CollectionAdminRequest.collectionStatus(\"doesNotExist\");\n    rsp = req.process(cluster.getSolrClient());\n    assertNull(rsp.getResponse().get(collectionNames[0]));\n    assertNull(rsp.getResponse().get(collectionNames[1]));\n    \n    // assert collectionStatuses returns all collections\n    req = CollectionAdminRequest.collectionStatuses();\n    rsp = req.process(cluster.getSolrClient());\n    assertNotNull(rsp.getResponse().get(collectionNames[1]));\n    assertNotNull(rsp.getResponse().get(collectionNames[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e0a004e91693120f3f1ae6f95a5f02c9ad431e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e0a004e91693120f3f1ae6f95a5f02c9ad431e5"]},"commit2Childs":{"3e0a004e91693120f3f1ae6f95a5f02c9ad431e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e0a004e91693120f3f1ae6f95a5f02c9ad431e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}