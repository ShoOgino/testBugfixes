{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef]).mjava","commits":[{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int).mjava","sourceNew":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), 1024);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir,\n      FieldInfos fieldInfo, int codecId) throws IOException {\n    docValues = load(fieldInfo, si.name, si.docCount, dir, codecId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int).mjava","sourceNew":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), 1024);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir,\n      FieldInfos fieldInfo, int codecId) throws IOException {\n    docValues = load(fieldInfo, si.name, si.docCount, dir, codecId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator, IOContext context) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), context);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId, context);\n  }\n\n","sourceOld":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), 1024);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef],IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#DefaultDocValuesProducer(SegmentInfo,Directory,FieldInfos,int,boolean,Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator, IOContext context) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), context);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId, context);\n  }\n\n","sourceOld":"  /**\n   * \n   * Creates a new {@link DefaultDocValuesProducer} instance and loads all\n   * {@link IndexDocValues} instances for this segment and codec.\n   * \n   * @param si\n   *          the segment info to load the {@link IndexDocValues} for.\n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param fieldInfo\n   *          the {@link FieldInfos}\n   * @param codecId\n   *          the codec ID\n   * @param useCompoundFile\n   *          if <code>true</code> this producer opens a compound file to read\n   *          IndexDocValues fields, otherwise each field defines its own set of\n   *          files.\n   * @param sortComparator\n   *          defines the sort order for sorted IndexDocValues variants\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, \n      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator) throws IOException {\n    this.useCompoundFile = useCompoundFile;\n    this.sortComparator = sortComparator;\n    final Directory directory;\n    if (useCompoundFile) {\n      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), 1024);\n    } else {\n      cfs = null;\n      directory = dir;\n    }\n    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bc0b8069918917b33f361011899a1af0cdd2d462","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9507caf22f292ac0e5e59f62db4275adf4511","bc0b8069918917b33f361011899a1af0cdd2d462","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"bc0b8069918917b33f361011899a1af0cdd2d462":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}