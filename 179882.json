{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","commits":[{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = StrictMath.toRadians(centerLat);\n    final double radLon = StrictMath.toRadians(centerLon);\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = StrictMath.asin(StrictMath.sin(radDistance) / StrictMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(StrictMath.toDegrees(minLon), StrictMath.toDegrees(maxLon),\n        StrictMath.toDegrees(minLat), StrictMath.toDegrees(maxLat));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = SloppyMath.asin(SloppyMath.sin(radDistance) / SloppyMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = StrictMath.toRadians(centerLat);\n    final double radLon = StrictMath.toRadians(centerLon);\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = StrictMath.asin(StrictMath.sin(radDistance) / StrictMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(StrictMath.toDegrees(minLon), StrictMath.toDegrees(maxLon),\n        StrictMath.toDegrees(minLat), StrictMath.toDegrees(maxLat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = SloppyMath.asin(SloppyMath.sin(radDistance) / SloppyMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f","ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = SloppyMath.asin(SloppyMath.sin(radDistance) / SloppyMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}