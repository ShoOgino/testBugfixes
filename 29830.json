{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManager#maybeReopen(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#maybeReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManager#maybeReopen(boolean).mjava","sourceNew":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c36db4818c5eba16bdcbedab4f06dd69ae59190","date":1329160108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#maybeReopen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#maybeReopen(boolean).mjava","sourceNew":"  public void maybeReopen() throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = writer.getAndIncrementGeneration();\n        if (searchingGen == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return;\n        }\n        boolean setSearchGen;\n        if (!mgr.isSearcherCurrent()) {\n          setSearchGen = mgr.maybeReopen();\n        } else {\n          setSearchGen = true;\n        }\n        if (setSearchGen) {\n          searchingGen = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  public boolean maybeReopen(boolean applyAllDeletes) throws IOException {\n    if (reopenLock.tryLock()) {\n      try {\n        final SearcherManagerRef reference = applyAllDeletes ? withDeletes : withoutDeletes;\n        // Mark gen as of when reopen started:\n        final long newSearcherGen = indexingGen.getAndIncrement();\n        boolean setSearchGen = false;\n        if (reference.generation == MAX_SEARCHER_GEN) {\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n          return false;\n        }\n        if (!(setSearchGen = reference.manager.isSearcherCurrent())) {\n          setSearchGen = reference.manager.maybeReopen();\n        }\n        if (setSearchGen) {\n          reference.generation = newSearcherGen;// update searcher gen\n          newGeneration.signalAll(); // wake up threads if we have a new generation\n        }\n        return setSearchGen;\n      } finally {\n        reopenLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}