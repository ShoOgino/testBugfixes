{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45fdedf2abdbdaadf855ce764379f18d0a4fb462","date":1327605607,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e147cce225492338f15a94a427f51f867da574ee","date":1346365916,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"45fdedf2abdbdaadf855ce764379f18d0a4fb462":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e147cce225492338f15a94a427f51f867da574ee":["45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["45fdedf2abdbdaadf855ce764379f18d0a4fb462","e147cce225492338f15a94a427f51f867da574ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e147cce225492338f15a94a427f51f867da574ee"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"45fdedf2abdbdaadf855ce764379f18d0a4fb462":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","e147cce225492338f15a94a427f51f867da574ee","05a14b2611ead08655a2b2bdc61632eb31316e57"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["45fdedf2abdbdaadf855ce764379f18d0a4fb462","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"e147cce225492338f15a94a427f51f867da574ee":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}