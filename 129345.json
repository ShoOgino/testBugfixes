{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testMalformedGivesError().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testMalformedGivesError().mjava","pathOld":"/dev/null","sourceNew":"  /** Sanity check that malformed requests produce errors */\n  public void testMalformedGivesError() throws Exception {\n\n    ignoreException(\".*'join' domain change.*\");\n    \n    for (String join : Arrays.asList(\"bogus\",\n                                     \"{ }\",\n                                     \"{ from:null, to:foo_s }\",\n                                     \"{ from:foo_s }\",\n                                     \"{ from:foo_s, to:foo_s, bogus:'what what?' }\",\n                                     \"{ to:foo_s, bogus:'what what?' }\")) {\n      SolrException e = expectThrows(SolrException.class, () -> {\n          final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n                                        \"{ x : { type:terms, field:x_s, domain: { join:\"+join+\" } } }\");\n          final NamedList trash = getRandClient(random()).request(new QueryRequest(req));\n        });\n      assertEquals(join + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(join + \" -> \" + e, e.getMessage().contains(\"'join' domain change\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testMalformedGivesError().mjava","pathOld":"/dev/null","sourceNew":"  /** Sanity check that malformed requests produce errors */\n  public void testMalformedGivesError() throws Exception {\n\n    ignoreException(\".*'join' domain change.*\");\n    \n    for (String join : Arrays.asList(\"bogus\",\n                                     \"{ }\",\n                                     \"{ from:null, to:foo_s }\",\n                                     \"{ from:foo_s }\",\n                                     \"{ from:foo_s, to:foo_s, bogus:'what what?' }\",\n                                     \"{ to:foo_s, bogus:'what what?' }\")) {\n      SolrException e = expectThrows(SolrException.class, () -> {\n          final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n                                        \"{ x : { type:terms, field:x_s, domain: { join:\"+join+\" } } }\");\n          final NamedList trash = getRandClient(random()).request(new QueryRequest(req));\n        });\n      assertEquals(join + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(join + \" -> \" + e, e.getMessage().contains(\"'join' domain change\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testMalformedGivesError().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testMalformedGivesError().mjava","sourceNew":"  /** Sanity check that malformed requests produce errors */\n  public void testMalformedGivesError() throws Exception {\n\n    ignoreException(\".*'join' domain change.*\");\n    \n    for (String join : Arrays.asList(\"bogus\",\n                                     \"{ }\",\n                                     \"{ from:null, to:foo_s }\",\n                                     \"{ from:foo_s }\",\n                                     \"{ from:foo_s, to:foo_s, bogus:'what what?' }\",\n                                     \"{ to:foo_s, bogus:'what what?' }\")) {\n      SolrException e = expectThrows(SolrException.class, () -> {\n          final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n                                        \"{ x : { type:terms, field:x_s, domain: { join:\"+join+\" } } }\");\n          final NamedList trash = getRandClient(random()).request(new QueryRequest(req));\n        });\n      assertEquals(join + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(join + \" -> \" + e, e.getMessage().contains(\"'join' domain change\"));\n    }\n  }\n\n","sourceOld":"  /** Sanity check that malformed requests produce errors */\n  public void testMalformedGivesError() throws Exception {\n\n    ignoreException(\".*'join' domain change.*\");\n    \n    for (String join : Arrays.asList(\"bogus\",\n                                     \"{ }\",\n                                     \"{ from:null, to:foo_s }\",\n                                     \"{ from:foo_s }\",\n                                     \"{ from:foo_s, to:foo_s, bogus:'what what?' }\",\n                                     \"{ to:foo_s, bogus:'what what?' }\")) {\n      SolrException e = expectThrows(SolrException.class, () -> {\n          final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n                                        \"{ x : { type:terms, field:x_s, domain: { join:\"+join+\" } } }\");\n          final NamedList trash = getRandClient(random()).request(new QueryRequest(req));\n        });\n      assertEquals(join + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(join + \" -> \" + e, e.getMessage().contains(\"'join' domain change\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","92910727264a23a47b7a6c94b0f75d655537b9ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}