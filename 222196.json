{"path":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76ea4531bf2fa6dd07ba0b7fb4bb86881bbe5f62","date":1327853020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader().getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader().getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3548d95924aea5ee6d88499a7d166498a8e49","date":1328909332,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, readerContext.reader().getLiveDocs());\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"76ea4531bf2fa6dd07ba0b7fb4bb86881bbe5f62":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6bd4a7478aca8c3880512b730b28bf3239340635","76ea4531bf2fa6dd07ba0b7fb4bb86881bbe5f62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["76ea4531bf2fa6dd07ba0b7fb4bb86881bbe5f62","5cab9a86bd67202d20b6adc463008c8e982b070a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76ea4531bf2fa6dd07ba0b7fb4bb86881bbe5f62":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}