{"path":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","commits":[{"id":"fa96fdb58cefcada21fc51faf37114033f044f3f","date":1180916840,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"/dev/null","sourceNew":"    public DocList getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInteristingTermsFromMLTQuery( mltquery, terms );\n      }\n      return searcher.getDocList(mltquery, filters, null, start, rows, flags);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea4437408fce2427fff22143e392585a968e2b1a","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc512c052d4f0e04ae655f1070aaa43b45934dde","date":1183993013,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInteristingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocList getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInteristingTermsFromMLTQuery( mltquery, terms );\n      }\n      return searcher.getDocList(mltquery, filters, null, start, rows, flags);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea4437408fce2427fff22143e392585a968e2b1a","date":1211501492,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInteristingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd36d5d7353f6cf7c2cccbd79385b298db7bc906","date":1213706937,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(Reader,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      mltquery = mlt.like(reader);\n      setBoosts(mltquery);\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( mltquery, terms );\n      }\n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(mltquery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(mltquery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["ea4437408fce2427fff22143e392585a968e2b1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fa96fdb58cefcada21fc51faf37114033f044f3f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"ea4437408fce2427fff22143e392585a968e2b1a":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"fa96fdb58cefcada21fc51faf37114033f044f3f":["fc512c052d4f0e04ae655f1070aaa43b45934dde"],"ea4437408fce2427fff22143e392585a968e2b1a":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fc512c052d4f0e04ae655f1070aaa43b45934dde":["ea4437408fce2427fff22143e392585a968e2b1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}