{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d1e4b35dac0c9d26a9adbec0a5d8f39fd3c038","date":1268936538,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d1e4b35dac0c9d26a9adbec0a5d8f39fd3c038":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b2d1e4b35dac0c9d26a9adbec0a5d8f39fd3c038"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b2d1e4b35dac0c9d26a9adbec0a5d8f39fd3c038":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b2d1e4b35dac0c9d26a9adbec0a5d8f39fd3c038"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}