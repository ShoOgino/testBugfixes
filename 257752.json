{"path":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","commits":[{"id":"bfa27be7bde9d711ce2b418fadc555654849383f","date":1573652589,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertTrue(\"compute ratio (\" + computeStats.getMean() + \") should be higher or equal from get/put (\"\n          + getPutStats.getMean() + \")\", computeStats.getMean() >= getPutStats.getMean());\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["31ecc981dc25a90bf2ac19cace122c85954f78e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31ecc981dc25a90bf2ac19cace122c85954f78e3","date":1573846700,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","sourceNew":"  @Test\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertGreaterThanOrEqual( \"Compute ratio should be higher or equal to get/put ratio\", computeStats.getMean(), getPutStats.getMean(), 0.0001);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertTrue(\"compute ratio (\" + computeStats.getMean() + \") should be higher or equal from get/put (\"\n          + getPutStats.getMean() + \")\", computeStats.getMean() >= getPutStats.getMean());\n    });\n  }\n\n","bugFix":["bfa27be7bde9d711ce2b418fadc555654849383f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3804b9db1dda3e227157d89abb62dfa8dcf4be37","date":1576500393,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14094\")\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertGreaterThanOrEqual( \"Compute ratio should be higher or equal to get/put ratio\", computeStats.getMean(), getPutStats.getMean(), 0.0001);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertGreaterThanOrEqual( \"Compute ratio should be higher or equal to get/put ratio\", computeStats.getMean(), getPutStats.getMean(), 0.0001);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88eb92dc3728d3502ed73320a0c36f754f7ac093","date":1576508044,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrCachePerf#testGetPutCompute().mjava","sourceNew":"  @Test\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertGreaterThanOrEqual( \"Compute ratio should be higher or equal to get/put ratio\", computeStats.getMean(), getPutStats.getMean(), 0.0001);\n    });\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14094\")\n  public void testGetPutCompute() throws Exception {\n    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();\n    Map<String, SummaryStatistics> computeRatio = new HashMap<>();\n    Map<String, SummaryStatistics> getPutTime = new HashMap<>();\n    Map<String, SummaryStatistics> computeTime = new HashMap<>();\n    // warm-up\n    int threads = 10;\n    for (int i = 0; i < 10; i++) {\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);\n      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);\n    }\n    for (int i = 0; i < 100; i++) {\n      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);\n      doTestGetPutCompute(computeRatio, computeTime, threads, true);\n    }\n    computeRatio.forEach((type, computeStats) -> {\n      SummaryStatistics getPutStats = getPutRatio.get(type);\n      assertGreaterThanOrEqual( \"Compute ratio should be higher or equal to get/put ratio\", computeStats.getMean(), getPutStats.getMean(), 0.0001);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfa27be7bde9d711ce2b418fadc555654849383f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31ecc981dc25a90bf2ac19cace122c85954f78e3":["bfa27be7bde9d711ce2b418fadc555654849383f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3804b9db1dda3e227157d89abb62dfa8dcf4be37":["31ecc981dc25a90bf2ac19cace122c85954f78e3"],"88eb92dc3728d3502ed73320a0c36f754f7ac093":["3804b9db1dda3e227157d89abb62dfa8dcf4be37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88eb92dc3728d3502ed73320a0c36f754f7ac093"]},"commit2Childs":{"bfa27be7bde9d711ce2b418fadc555654849383f":["31ecc981dc25a90bf2ac19cace122c85954f78e3"],"31ecc981dc25a90bf2ac19cace122c85954f78e3":["3804b9db1dda3e227157d89abb62dfa8dcf4be37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfa27be7bde9d711ce2b418fadc555654849383f"],"3804b9db1dda3e227157d89abb62dfa8dcf4be37":["88eb92dc3728d3502ed73320a0c36f754f7ac093"],"88eb92dc3728d3502ed73320a0c36f754f7ac093":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}