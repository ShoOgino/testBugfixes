{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5","date":1358867305,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene42FieldInfosFormat.CODEC_NAME, \n                                   Lucene42FieldInfosFormat.FORMAT_START, \n                                   Lucene42FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene42FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene42FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene42FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene42FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71","9a70ce9bddc6f985feb8e5e182aebe20872328d4","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene42FieldInfosFormat.CODEC_NAME, \n                                   Lucene42FieldInfosFormat.FORMAT_START, \n                                   Lucene42FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene42FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene42FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene42FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene42FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene42FieldInfosFormat.CODEC_NAME, \n                                   Lucene42FieldInfosFormat.FORMAT_START, \n                                   Lucene42FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene42FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene42FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene42FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene42FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene42FieldInfosFormat.CODEC_NAME, \n                                   Lucene42FieldInfosFormat.FORMAT_START, \n                                   Lucene42FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene42FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene42FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene42FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene42FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":6,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, context);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene46FieldInfosFormat.CODEC_NAME, \n                                   Lucene46FieldInfosFormat.FORMAT_START, \n                                   Lucene46FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene46FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene46FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene46FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene46FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final long dvGen = input.readLong();\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene42FieldInfosFormat.CODEC_NAME, \n                                   Lucene42FieldInfosFormat.FORMAT_START, \n                                   Lucene42FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene42FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene42FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene42FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene42FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene42FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(attributes));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8435160e9702b19398118ddf76b61c846612b6a4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5"],"8435160e9702b19398118ddf76b61c846612b6a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}