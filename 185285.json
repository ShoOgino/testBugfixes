{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","commits":[{"id":"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027","date":1328885564,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, SolrCore core,\n      String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, core, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, core, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da91f7508b93144ab17d5f9298b4793e9c42bb95","date":1328889420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, SolrCore core,\n      String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, core, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, core, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, SolrCore core,\n      String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, core, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, core, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3","date":1329434163,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,SolrCore,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, SolrCore core,\n      String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = cloudState.getLeader(collection, entry.getKey());\n      core = checkProps(cores, core, path, leaderProps);\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n      Set<Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        ZkNodeProps zkProps = shardEntry.getValue();\n        core = checkProps(cores, core, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3":["da91f7508b93144ab17d5f9298b4793e9c42bb95"],"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3"],"da91f7508b93144ab17d5f9298b4793e9c42bb95":["7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027"],"30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b3a4ab7d2fe963a5a758d16f8bed1b0ce3b9027":["da91f7508b93144ab17d5f9298b4793e9c42bb95"],"da91f7508b93144ab17d5f9298b4793e9c42bb95":["30bbdb9dd708c5f7b113e3c7c1ebc06c7453b4e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}