{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","commits":[{"id":"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c","date":1478089840,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"/dev/null","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"/dev/null","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","date":1479484655,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42},{\\\"null\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42},{\\\"null\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42},{\\\"null\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42},{\\\"null\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle, \"indent\", \"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle, \"indent\", \"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle, \"indent\", \"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#implTestJSON(String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle, \"indent\", \"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  private void implTestJSON(final String namedListStyle) throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle, \"indent\", \"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    nl.add(null, null);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_FLAT) {\n      expectedNLjson = \"\\\"nl\\\":[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\",null,42,null,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_MAP) {\n      expectedNLjson = \"\\\"nl\\\":{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\",\\\"\\\":42,\\\"\\\":null}\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42],[null,null]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFMAP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"data1\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},42,null]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNTV) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"type\\\":\\\"str\\\",\\\"value\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"int\\\",\\\"value\\\":42},\" +\n          \"{\\\"name\\\":null,\\\"type\\\":\\\"null\\\",\\\"value\\\":null}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3":["0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"a52341299179de5479672f7cf518bf4b173f34b3":["87f40a063571d1870bae89b6d191c3cb53b10f5e","ac1e7fa558287a811ea07634d815ee7b1c541284"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["87f40a063571d1870bae89b6d191c3cb53b10f5e","ac1e7fa558287a811ea07634d815ee7b1c541284"],"cd70af1186a18d10a788433cc33be44327a83ce7":["9720b151fde2073f4e401450f4574e5f31c2d0ff","7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a52341299179de5479672f7cf518bf4b173f34b3"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["cd70af1186a18d10a788433cc33be44327a83ce7","87f40a063571d1870bae89b6d191c3cb53b10f5e"]},"commit2Childs":{"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3":["87f40a063571d1870bae89b6d191c3cb53b10f5e","cd70af1186a18d10a788433cc33be44327a83ce7"],"a52341299179de5479672f7cf518bf4b173f34b3":["e98520789adb1d5ad05afb4956eca0944a929688"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["cd70af1186a18d10a788433cc33be44327a83ce7"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9720b151fde2073f4e401450f4574e5f31c2d0ff","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}