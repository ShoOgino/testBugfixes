{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new StandardAnalyzer(TEST_VERSION_CURRENT))\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory(random);\n        Directory indexStoreB = newDirectory(random);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory(random);\n        Directory indexStoreB = newDirectory(random);\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(newField(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(newField(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(newField(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(newField(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(newField(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(newField(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(newField(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(newField(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(newField(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(newField(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(newField(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(newField(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = new MockRAMDirectory();\n        Directory indexStoreB = new MockRAMDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(new Field(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(new Field(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(new Field(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(new Field(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(new Field(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(new Field(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(new Field(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":null,"sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(newField(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(newField(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(newField(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(newField(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(newField(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(newField(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":null,"sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(newField(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(newField(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(newField(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(newField(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(newField(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(newField(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testEmptyIndex().mjava","sourceNew":null,"sourceOld":"    public void testEmptyIndex() throws Exception {\n        // creating two directories for indices\n        Directory indexStoreA = newDirectory();\n        Directory indexStoreB = newDirectory();\n\n        // creating a document to store\n        Document lDoc = new Document();\n        lDoc.add(newField(\"fulltext\", \"Once upon a time.....\", Field.Store.YES, Field.Index.ANALYZED));\n        lDoc.add(newField(\"id\", \"doc1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc2 = new Document();\n        lDoc2.add(newField(\"fulltext\", \"in a galaxy far far away.....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc2.add(newField(\"id\", \"doc2\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc2.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating a document to store\n        Document lDoc3 = new Document();\n        lDoc3.add(newField(\"fulltext\", \"a bizarre bug manifested itself....\",\n            Field.Store.YES, Field.Index.ANALYZED));\n        lDoc3.add(newField(\"id\", \"doc3\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        lDoc3.add(newField(\"handle\", \"1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n        // creating an index writer for the first index\n        IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        // creating an index writer for the second index, but writing nothing\n        IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        //--------------------------------------------------------------------\n        // scenario 1\n        //--------------------------------------------------------------------\n\n        // writing the documents to the first index\n        writerA.addDocument(lDoc);\n        writerA.addDocument(lDoc2);\n        writerA.addDocument(lDoc3);\n        writerA.optimize();\n        writerA.close();\n\n        // closing the second index\n        writerB.close();\n\n        // creating the query\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n        Query query = parser.parse(\"handle:1\");\n\n        // building the searchables\n        Searcher[] searchers = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers[0] = new IndexSearcher(indexStoreB, true);\n        searchers[1] = new IndexSearcher(indexStoreA, true);\n        // creating the multiSearcher\n        Searcher mSearcher = getMultiSearcherInstance(searchers);\n        // performing the search\n        ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits.length; i++) {\n          mSearcher.doc(hits[i].doc);\n        }\n        mSearcher.close();\n\n\n        //--------------------------------------------------------------------\n        // scenario 2\n        //--------------------------------------------------------------------\n\n        // adding one document to the empty index\n        writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.addDocument(lDoc);\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers2 = new Searcher[2];\n        // VITAL STEP:adding the searcher for the empty index first, before the searcher for the populated index\n        searchers2[0] = new IndexSearcher(indexStoreB, true);\n        searchers2[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        MultiSearcher mSearcher2 = getMultiSearcherInstance(searchers2);\n        // performing the same search\n        ScoreDoc[] hits2 = mSearcher2.search(query, null, 1000).scoreDocs;\n\n        assertEquals(4, hits2.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits2.length; i++) {\n          // no exception should happen at this point\n          mSearcher2.doc(hits2[i].doc);\n        }\n\n        // test the subSearcher() method:\n        Query subSearcherQuery = parser.parse(\"id:doc1\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(2, hits2.length);\n        assertEquals(0, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[0]\n        assertEquals(1, mSearcher2.subSearcher(hits2[1].doc));   // hit from searchers2[1]\n        subSearcherQuery = parser.parse(\"id:doc2\");\n        hits2 = mSearcher2.search(subSearcherQuery, null, 1000).scoreDocs;\n        assertEquals(1, hits2.length);\n        assertEquals(1, mSearcher2.subSearcher(hits2[0].doc));   // hit from searchers2[1]\n        mSearcher2.close();\n\n        //--------------------------------------------------------------------\n        // scenario 3\n        //--------------------------------------------------------------------\n\n        // deleting the document just added, this will cause a different exception to take place\n        Term term = new Term(\"id\", \"doc1\");\n        IndexReader readerB = IndexReader.open(indexStoreB, false);\n        readerB.deleteDocuments(term);\n        readerB.close();\n\n        // optimizing the index with the writer\n        writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, \n                new MockAnalyzer())\n                .setOpenMode(OpenMode.APPEND));\n        writerB.optimize();\n        writerB.close();\n\n        // building the searchables\n        Searcher[] searchers3 = new Searcher[2];\n\n        searchers3[0] = new IndexSearcher(indexStoreB, true);\n        searchers3[1] = new IndexSearcher(indexStoreA, true);\n        // creating the mulitSearcher\n        Searcher mSearcher3 = getMultiSearcherInstance(searchers3);\n        // performing the same search\n        ScoreDoc[] hits3 = mSearcher3.search(query, null, 1000).scoreDocs;\n\n        assertEquals(3, hits3.length);\n\n        // iterating over the hit documents\n        for (int i = 0; i < hits3.length; i++) {\n          mSearcher3.doc(hits3[i].doc);\n        }\n        mSearcher3.close();\n        indexStoreA.close();\n        indexStoreB.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}