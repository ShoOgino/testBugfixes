{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          q = applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    q = applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          q = applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    q = applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          q = applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    q = applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          q = applySlop(q,slop);\n          clauses.add(q);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    q = applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, true);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          q = applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, true);\n    q = applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81d0720146de53dd3a4a023d2a3d1089d86d748d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9e1499c5d26c936238506df90a3c02c76707722"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}