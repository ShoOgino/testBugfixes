{"path":"backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","sourceNew":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}