{"path":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","commits":[{"id":"86c487a0031f30e4a08cfb3d4ec49266d772f957","date":1205881260,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testCachability() throws Exception\r\n\t{\r\n\t\tTermsFilter a=new TermsFilter();\r\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\r\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\r\n\t\tHashSet cachedFilters=new HashSet();\r\n\t\tcachedFilters.add(a);\r\n\t\tTermsFilter b=new TermsFilter();\r\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\r\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\r\n\t\t\r\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\r\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\r\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\r\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\r\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\r\n\t\t\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2","date":1211591790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet cachedFilters=new HashSet();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t\t\n\t}\n\n","sourceOld":"\tpublic void testCachability() throws Exception\r\n\t{\r\n\t\tTermsFilter a=new TermsFilter();\r\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\r\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\r\n\t\tHashSet cachedFilters=new HashSet();\r\n\t\tcachedFilters.add(a);\r\n\t\tTermsFilter b=new TermsFilter();\r\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\r\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\r\n\t\t\r\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\r\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\r\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\r\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\r\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\r\n\t\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t\t\n\t}\n\n","sourceOld":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet cachedFilters=new HashSet();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","sourceOld":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","sourceOld":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}