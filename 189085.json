{"path":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","commits":[{"id":"dd04250707c52f2a0cecd6303dcc85617b122f6d","date":1304372426,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymMap#testLoadRules().mjava","sourceNew":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","sourceOld":"  public void testLoadRules() throws Exception {\n    Map<String, String> args = new HashMap<String, String>();\n    args.put( \"synonyms\", \"something.txt\" );\n    SynonymFilterFactory ff = new SynonymFilterFactory();\n    ff.init(args);\n    ff.inform( new ResourceLoader() {\n      @Override\n      public List<String> getLines(String resource) throws IOException {\n        if( !\"something.txt\".equals(resource) ) {\n          throw new RuntimeException( \"should not get a differnt resource\" );\n        }\n        List<String> rules = new ArrayList<String>();\n        rules.add( \"a,b\" );\n        return rules;\n      }\n\n      @Override\n      public Object newInstance(String cname, String... subpackages) {\n        throw new RuntimeException(\"stub\");\n      }\n\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        throw new RuntimeException(\"stub\");\n      }\n    });\n    \n    SynonymMap synMap = ff.getSynonymMap();\n    assertEquals( 2, synMap.submap.size() );\n    assertTokIncludes( synMap, \"a\", \"a\" );\n    assertTokIncludes( synMap, \"a\", \"b\" );\n    assertTokIncludes( synMap, \"b\", \"a\" );\n    assertTokIncludes( synMap, \"b\", \"b\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["dd04250707c52f2a0cecd6303dcc85617b122f6d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["dd04250707c52f2a0cecd6303dcc85617b122f6d"],"dd04250707c52f2a0cecd6303dcc85617b122f6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"dd04250707c52f2a0cecd6303dcc85617b122f6d":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}