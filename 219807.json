{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","commits":[{"id":"03288de96c3666aa5583cc4dce079f6894fb3b31","date":1339438313,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(_TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.shutdown();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.shutdown();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cf306d90c1980484689e1b7eb8bd76539c10be","date":1409678854,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (String file : infos.files(dir, true)) {\n      try (IndexInput in = dir.openInput(file, IOContext.DEFAULT)) {}\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        String segment = IndexFileNames.parseSegmentName(file);\n        // warning: N^2\n        boolean found = false;\n        for (SegmentCommitInfo si : infos) {\n          if (si.info.name.equals(segment)) {\n            found = true;\n            try (CompoundFileDirectory cfs = new CompoundFileDirectory(si.info.getId(), dir, file, IOContext.DEFAULT, false)) {\n              for (String cfsFile : cfs.listAll()) {\n                try (IndexInput cfsIn = cfs.openInput(cfsFile, IOContext.DEFAULT)) {}\n              }\n            }\n          }\n        }\n        assertTrue(found);\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":null,"sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (String file : infos.files(dir, true)) {\n      try (IndexInput in = dir.openInput(file, IOContext.DEFAULT)) {}\n      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n        String segment = IndexFileNames.parseSegmentName(file);\n        // warning: N^2\n        boolean found = false;\n        for (SegmentCommitInfo si : infos) {\n          if (si.info.name.equals(segment)) {\n            found = true;\n            try (CompoundFileDirectory cfs = new CompoundFileDirectory(si.info.getId(), dir, file, IOContext.DEFAULT, false)) {\n              for (String cfsFile : cfs.listAll()) {\n                try (IndexInput cfsIn = cfs.openInput(cfsFile, IOContext.DEFAULT)) {}\n              }\n            }\n          }\n        }\n        assertTrue(found);\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51cf306d90c1980484689e1b7eb8bd76539c10be":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["51cf306d90c1980484689e1b7eb8bd76539c10be"],"03288de96c3666aa5583cc4dce079f6894fb3b31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"9bb9a29a5e71a90295f175df8919802993142c9a":["51cf306d90c1980484689e1b7eb8bd76539c10be","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"51cf306d90c1980484689e1b7eb8bd76539c10be":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"03288de96c3666aa5583cc4dce079f6894fb3b31":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51cf306d90c1980484689e1b7eb8bd76539c10be"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}