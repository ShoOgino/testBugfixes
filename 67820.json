{"path":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","sourceOld":"  /**\n   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,\n   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.\n   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are\n   * not in the cache, this call will first compute them (which will also add them to the cache). \n   * @param outputFile file to store in.\n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @param clCache category list cache for faster computation, can be null\n   * @throws IOException on error\n   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)\n   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {\n    File parentFile = outputFile.getParentFile();\n    if (\n        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||\n        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))\n      ) {\n      throw new IllegalArgumentException(\"Exepecting a writable file: \"+outputFile);\n    }\n    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);\n    TotalFacetCounts.storeToFile(outputFile, tfc);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}