{"path":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","sourceNew":"\tstatic BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException\n\t{\n\t\tString occs=clauseElem.getAttribute(\"occurs\");\n\t\tBooleanClause.Occur occurs=BooleanClause.Occur.SHOULD;\n\t\tif(\"must\".equalsIgnoreCase(occs))\n\t\t{\n\t\t\toccurs=BooleanClause.Occur.MUST;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(\"mustNot\".equalsIgnoreCase(occs))\n\t\t\t{\n\t\t\t\toccurs=BooleanClause.Occur.MUST_NOT;\n\t\t\t}\t\t\t\n\t\t\telse\n\t\t\t{\n\t\t\t\tif((\"should\".equalsIgnoreCase(occs))||(\"\".equals(occs)))\n\t\t\t\t{\n\t\t\t\t\toccurs=BooleanClause.Occur.SHOULD;\n\t\t\t\t}\t\t\t\n\t\t\t\telse\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tif(occs!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\"+occs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn occurs;\n\t\t\n\t}\n\n","sourceOld":"\tstatic BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException\n\t{\n\t\tString occs=clauseElem.getAttribute(\"occurs\");\n\t\tBooleanClause.Occur occurs=BooleanClause.Occur.SHOULD;\n\t\tif(\"must\".equalsIgnoreCase(occs))\n\t\t{\n\t\t\toccurs=BooleanClause.Occur.MUST;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(\"mustNot\".equalsIgnoreCase(occs))\n\t\t\t{\n\t\t\t\toccurs=BooleanClause.Occur.MUST_NOT;\n\t\t\t}\t\t\t\n\t\t\telse\n\t\t\t{\n\t\t\t\tif((\"should\".equalsIgnoreCase(occs))||(\"\".equals(occs)))\n\t\t\t\t{\n\t\t\t\t\toccurs=BooleanClause.Occur.SHOULD;\n\t\t\t\t}\t\t\t\n\t\t\t\telse\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tif(occs!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\"+occs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn occurs;\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","sourceNew":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","sourceOld":"\tstatic BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException\n\t{\n\t\tString occs=clauseElem.getAttribute(\"occurs\");\n\t\tBooleanClause.Occur occurs=BooleanClause.Occur.SHOULD;\n\t\tif(\"must\".equalsIgnoreCase(occs))\n\t\t{\n\t\t\toccurs=BooleanClause.Occur.MUST;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(\"mustNot\".equalsIgnoreCase(occs))\n\t\t\t{\n\t\t\t\toccurs=BooleanClause.Occur.MUST_NOT;\n\t\t\t}\t\t\t\n\t\t\telse\n\t\t\t{\n\t\t\t\tif((\"should\".equalsIgnoreCase(occs))||(\"\".equals(occs)))\n\t\t\t\t{\n\t\t\t\t\toccurs=BooleanClause.Occur.SHOULD;\n\t\t\t\t}\t\t\t\n\t\t\t\telse\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tif(occs!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\"+occs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn occurs;\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/BooleanQueryBuilder#getOccursValue(Element).mjava","sourceNew":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","sourceOld":"  static BooleanClause.Occur getOccursValue(Element clauseElem) throws ParserException {\n    String occs = clauseElem.getAttribute(\"occurs\");\n    BooleanClause.Occur occurs = BooleanClause.Occur.SHOULD;\n    if (\"must\".equalsIgnoreCase(occs)) {\n      occurs = BooleanClause.Occur.MUST;\n    } else {\n      if (\"mustNot\".equalsIgnoreCase(occs)) {\n        occurs = BooleanClause.Occur.MUST_NOT;\n      } else {\n        if ((\"should\".equalsIgnoreCase(occs)) || (\"\".equals(occs))) {\n          occurs = BooleanClause.Occur.SHOULD;\n        } else {\n          if (occs != null) {\n            throw new ParserException(\"Invalid value for \\\"occurs\\\" attribute of clause:\" + occs);\n          }\n        }\n      }\n    }\n    return occurs;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}