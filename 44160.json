{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#getNumLeaves().mjava","commits":[{"id":"069d686c3ab4d51d0d217cff30aad53b2b70ece0","date":1484748426,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#getNumLeaves().mjava","pathOld":"/dev/null","sourceNew":"    /** Return the number of leaves below the current node. */\n    public int getNumLeaves() {\n      int leftMostLeafNode = nodeID;\n      while (leftMostLeafNode < leafNodeOffset) {\n        leftMostLeafNode = leftMostLeafNode * 2;\n      }\n      int rightMostLeafNode = nodeID;\n      while (rightMostLeafNode < leafNodeOffset) {\n        rightMostLeafNode = rightMostLeafNode * 2 + 1;\n      }\n      final int numLeaves;\n      if (rightMostLeafNode >= leftMostLeafNode) {\n        // both are on the same level\n        numLeaves = rightMostLeafNode - leftMostLeafNode + 1;\n      } else {\n        // left is one level deeper than right\n        numLeaves = rightMostLeafNode - leftMostLeafNode + 1 + leafNodeOffset;\n      }\n      assert numLeaves == getNumLeavesSlow(nodeID) : numLeaves + \" \" + getNumLeavesSlow(nodeID);\n      return numLeaves;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#getNumLeaves().mjava","pathOld":"/dev/null","sourceNew":"    /** Return the number of leaves below the current node. */\n    public int getNumLeaves() {\n      int leftMostLeafNode = nodeID;\n      while (leftMostLeafNode < leafNodeOffset) {\n        leftMostLeafNode = leftMostLeafNode * 2;\n      }\n      int rightMostLeafNode = nodeID;\n      while (rightMostLeafNode < leafNodeOffset) {\n        rightMostLeafNode = rightMostLeafNode * 2 + 1;\n      }\n      final int numLeaves;\n      if (rightMostLeafNode >= leftMostLeafNode) {\n        // both are on the same level\n        numLeaves = rightMostLeafNode - leftMostLeafNode + 1;\n      } else {\n        // left is one level deeper than right\n        numLeaves = rightMostLeafNode - leftMostLeafNode + 1 + leafNodeOffset;\n      }\n      assert numLeaves == getNumLeavesSlow(nodeID) : numLeaves + \" \" + getNumLeavesSlow(nodeID);\n      return numLeaves;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"069d686c3ab4d51d0d217cff30aad53b2b70ece0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["069d686c3ab4d51d0d217cff30aad53b2b70ece0"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","069d686c3ab4d51d0d217cff30aad53b2b70ece0"]},"commit2Childs":{"069d686c3ab4d51d0d217cff30aad53b2b70ece0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["069d686c3ab4d51d0d217cff30aad53b2b70ece0","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}