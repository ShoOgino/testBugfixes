{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","commits":[{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#swapSearcher(Directory).mjava","sourceNew":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","sourceOld":"  private void swapSearcher(final Directory dir) throws IOException {\n    /*\n     * opening a searcher is possibly very expensive.\n     * We rather close it again if the Spellchecker was closed during\n     * this operation than block access to the current searcher while opening.\n     */\n    final IndexSearcher indexSearcher = createSearcher(dir);\n    synchronized (searcherLock) {\n      if(closed){\n        indexSearcher.close();\n        throw new AlreadyClosedException(\"Spellchecker has been closed\");\n      }\n      if (searcher != null) {\n        searcher.close();\n      }\n      // set the spellindex in the sync block - ensure consistency.\n      searcher = indexSearcher;\n      this.spellIndex = dir;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}