{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}