{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","commits":[{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","date":1565791119,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testSetLimits().mjava","sourceNew":null,"sourceOld":"  public void testSetLimits() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache<String, String> cache = new LFUCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this sets minSize = 4, evictions will target minSize\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", \"foo 6\");\n    // should evict to minSize\n    assertEquals(4, cache.size());\n    // should allow adding 1 more item before hitting \"size\" limit\n    cache.put(\"7\", \"foo 7\");\n    assertEquals(5, cache.size());\n    // should evict down to minSize = 4\n    cache.put(\"8\", \"foo 8\");\n    assertEquals(4, cache.size());\n\n    // scale up\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, \"bar \" + i);\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}