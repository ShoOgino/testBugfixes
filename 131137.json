{"path":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\r\n     * @return true iff there is a next document\r\n     */\r\n    public boolean next() throws IOException {\r\n        if ( !more ) return false;\r\n        if ( firstTime ) {\r\n            init();\r\n            return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n        // Increment all generators that generated the last doc and incrementally re-sort.\r\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\r\n        do {\r\n            if ( ((Scorer) subScorers.get(0)).next() ) {\r\n                Scorer s = (Scorer) subScorers.get(0);\r\n                int snextdoc = s.doc(), i=1;\r\n                for (; i<subScorers.size() && snextdoc > ((Scorer) subScorers.get(i)).doc(); i++)\r\n                    subScorers.set(i-1, subScorers.get(i));\r\n                if ( i!=1 ) subScorers.set(i-1, s);\r\n            } else {\r\n                subScorers.remove(0);\r\n                if ( subScorers.isEmpty() ) return (more = false);\r\n            }\r\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\r\n        return true;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca9e1c07be7f899d56eb37b44a2e4ca252744a52","date":1134440386,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","sourceNew":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\r\n     * @return true iff there is a next document\r\n     */\r\n    public boolean next() throws IOException {\r\n        if (!more) return false;\r\n        if (firstTime) {\r\n            heapify();\r\n            firstTime = false;\r\n            return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n        // Increment all generators that generated the last doc and adjust the heap.\r\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\r\n        do {\r\n            if (((Scorer) subScorers.get(0)).next())\r\n                heapAdjust(0);\r\n            else {\r\n                heapRemoveRoot();\r\n                if (subScorers.isEmpty()) return (more = false);\r\n            }\r\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\r\n        return true;\r\n    }\r\n\n","sourceOld":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\r\n     * @return true iff there is a next document\r\n     */\r\n    public boolean next() throws IOException {\r\n        if ( !more ) return false;\r\n        if ( firstTime ) {\r\n            init();\r\n            return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n        // Increment all generators that generated the last doc and incrementally re-sort.\r\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\r\n        do {\r\n            if ( ((Scorer) subScorers.get(0)).next() ) {\r\n                Scorer s = (Scorer) subScorers.get(0);\r\n                int snextdoc = s.doc(), i=1;\r\n                for (; i<subScorers.size() && snextdoc > ((Scorer) subScorers.get(i)).doc(); i++)\r\n                    subScorers.set(i-1, subScorers.get(i));\r\n                if ( i!=1 ) subScorers.set(i-1, s);\r\n            } else {\r\n                subScorers.remove(0);\r\n                if ( subScorers.isEmpty() ) return (more = false);\r\n            }\r\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\r\n        return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","sourceNew":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\n     * @return true iff there is a next document\n     */\n    public boolean next() throws IOException {\n        if (!more) return false;\n        if (firstTime) {\n            heapify();\n            firstTime = false;\n            return true;   // more would have been false if no subScorers had any docs\n        }\n        // Increment all generators that generated the last doc and adjust the heap.\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\n        do {\n            if (((Scorer) subScorers.get(0)).next())\n                heapAdjust(0);\n            else {\n                heapRemoveRoot();\n                if (subScorers.isEmpty()) return (more = false);\n            }\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\n        return true;\n    }\n\n","sourceOld":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\r\n     * @return true iff there is a next document\r\n     */\r\n    public boolean next() throws IOException {\r\n        if (!more) return false;\r\n        if (firstTime) {\r\n            heapify();\r\n            firstTime = false;\r\n            return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n        // Increment all generators that generated the last doc and adjust the heap.\r\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\r\n        do {\r\n            if (((Scorer) subScorers.get(0)).next())\r\n                heapAdjust(0);\r\n            else {\r\n                heapRemoveRoot();\r\n                if (subScorers.isEmpty()) return (more = false);\r\n            }\r\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\r\n        return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","sourceNew":"  /**\n   * Generate the next document matching our associated DisjunctionMaxQuery.\n   * \n   * @return true iff there is a next document\n   * @deprecated use {@link #nextDoc()} instead.\n   */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","sourceOld":"    /** Generate the next document matching our associated DisjunctionMaxQuery.\n     * @return true iff there is a next document\n     */\n    public boolean next() throws IOException {\n        if (!more) return false;\n        if (firstTime) {\n            heapify();\n            firstTime = false;\n            return true;   // more would have been false if no subScorers had any docs\n        }\n        // Increment all generators that generated the last doc and adjust the heap.\n        int lastdoc = ((Scorer) subScorers.get(0)).doc();\n        do {\n            if (((Scorer) subScorers.get(0)).next())\n                heapAdjust(0);\n            else {\n                heapRemoveRoot();\n                if (subScorers.isEmpty()) return (more = false);\n            }\n        } while ( ((Scorer) subScorers.get(0)).doc()==lastdoc );\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#next().mjava","sourceNew":null,"sourceOld":"  /**\n   * Generate the next document matching our associated DisjunctionMaxQuery.\n   * \n   * @return true iff there is a next document\n   * @deprecated use {@link #nextDoc()} instead.\n   */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["2123bddbd65dea198cac380540636ce43a880403"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}