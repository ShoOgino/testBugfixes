{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","commits":[{"id":"d0a64ffcef6ae839baf314a48817008c796b053d","date":1499974056,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(h.getCore().getLatestSchema().getField(field).hasDocValues());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(countAssertion, field)\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb52afb063274ec1a69aa3248c465c89309951b5","date":1499974173,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","sourceNew":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertEquals(\"Unexpected schema configuration\", NumberType.FLOAT, h.getCore().getLatestSchema().getField(field).getType().getNumberType());\n    assertFalse(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).getType().isMultiValued());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n  }\n\n","sourceOld":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(h.getCore().getLatestSchema().getField(field).hasDocValues());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(countAssertion, field)\n        );\n  }\n\n","bugFix":null,"bugIntro":["df61eba7dcc3730eae1a5b35f7b4819cf6c12db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df61eba7dcc3730eae1a5b35f7b4819cf6c12db5","date":1499986765,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","sourceNew":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertEquals(\"Unexpected schema configuration\", NumberType.FLOAT, h.getCore().getLatestSchema().getField(field).getType().getNumberType());\n    assertFalse(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).multiValued());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n  }\n\n","sourceOld":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertEquals(\"Unexpected schema configuration\", NumberType.FLOAT, h.getCore().getLatestSchema().getField(field).getType().getNumberType());\n    assertFalse(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).getType().isMultiValued());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n  }\n\n","bugFix":["fb52afb063274ec1a69aa3248c465c89309951b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#testDvMethodNegativeFloatRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  public void testDvMethodNegativeFloatRangeFacet() throws Exception {\n    String field = \"negative_num_f1_dv\";\n    assertTrue(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertEquals(\"Unexpected schema configuration\", NumberType.FLOAT, h.getCore().getLatestSchema().getField(field).getType().getNumberType());\n    assertFalse(\"Unexpected schema configuration\", h.getCore().getLatestSchema().getField(field).multiValued());\n\n    final String[] commonParams = { \n        \"q\", \"*:*\", \"facet\", \"true\", \"facet.range.start\", \"-2\", \"facet.range.end\", \"0\", \"facet.range.gap\", \"2\"\n    };\n    final String countAssertion\n    = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='%s']/lst[@name='counts']/int[@name='-2.0'][.='1']\";\n\n    assertU(adoc(\"id\", \"10001\", field, \"-1.0\"));\n    assertU(commit());\n\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"filter\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n    assertQ(req(commonParams, \"facet.range\", field, \"facet.range.method\", \"dv\"),\n        String.format(Locale.ROOT, countAssertion, field)\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb52afb063274ec1a69aa3248c465c89309951b5":["d0a64ffcef6ae839baf314a48817008c796b053d"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df61eba7dcc3730eae1a5b35f7b4819cf6c12db5"],"d0a64ffcef6ae839baf314a48817008c796b053d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df61eba7dcc3730eae1a5b35f7b4819cf6c12db5"],"df61eba7dcc3730eae1a5b35f7b4819cf6c12db5":["fb52afb063274ec1a69aa3248c465c89309951b5"]},"commit2Childs":{"fb52afb063274ec1a69aa3248c465c89309951b5":["df61eba7dcc3730eae1a5b35f7b4819cf6c12db5"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"d0a64ffcef6ae839baf314a48817008c796b053d":["fb52afb063274ec1a69aa3248c465c89309951b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","d0a64ffcef6ae839baf314a48817008c796b053d"],"df61eba7dcc3730eae1a5b35f7b4819cf6c12db5":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}