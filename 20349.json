{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.indexed() && field.storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.storeTermVectorPositions();\n        doVectorOffsets |= field.storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.indexed() && field.storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.storeTermVectorPositions();\n        doVectorOffsets |= field.storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}