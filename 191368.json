{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    assertNotNull(cluster.createCollection(collection,\n                                           /* 1 shard/replica per server */ NUM_SERVERS, 1,\n                                           CONF_NAME, null, null,\n                                           Collections.singletonMap(\"config\",\"solrconfig-tlog.xml\")));\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    assertNotNull(cluster.createCollection(collection,\n                                           /* 1 shard/replica per server */ NUM_SERVERS, 1,\n                                           CONF_NAME, null, null,\n                                           Collections.singletonMap(\"config\",\"solrconfig-tlog.xml\")));\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","sourceNew":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collection, CONF_NAME, NUM_SERVERS, 1)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .process(cloudClient);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","sourceOld":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    assertNotNull(cluster.createCollection(collection,\n                                           /* 1 shard/replica per server */ NUM_SERVERS, 1,\n                                           CONF_NAME, null, null,\n                                           Collections.singletonMap(\"config\",\"solrconfig-tlog.xml\")));\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","sourceNew":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collection, CONF_NAME, NUM_SERVERS, 1)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .process(cloudClient);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","sourceOld":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    assertNotNull(cluster.createCollection(collection,\n                                           /* 1 shard/replica per server */ NUM_SERVERS, 1,\n                                           CONF_NAME, null, null,\n                                           Collections.singletonMap(\"config\",\"solrconfig-tlog.xml\")));\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkCreateCollection(MiniSolrCloudCluster,String).mjava","sourceNew":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collection, CONF_NAME, NUM_SERVERS, 1)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .process(cloudClient);\n    cluster.waitForActiveCollection(collection, NUM_SERVERS, NUM_SERVERS);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","sourceOld":"  /**\n   * Verify that we can create a collection that involves one replica per node using the\n   * CloudSolrClient available for the cluster\n   */\n  private static void checkCreateCollection(final MiniSolrCloudCluster cluster,\n                                            final String collection) throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collection, CONF_NAME, NUM_SERVERS, 1)\n        .withProperty(\"config\", \"solrconfig-tlog.xml\")\n        .process(cloudClient);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, zkStateReader, true, true, 330);\n    assertEquals(\"sanity query\", 0, cloudClient.query(collection, params(\"q\",\"*:*\")).getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abfeda0a9738b1b31db7c43aa5f067596bf5c9e1"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["abfeda0a9738b1b31db7c43aa5f067596bf5c9e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}