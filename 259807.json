{"path":"backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}