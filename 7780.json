{"path":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":null,"sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f465ad7ab770519c876711f7e3755e85cc4c0830","date":1295972099,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = parser.getLine();\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["f465ad7ab770519c876711f7e3755e85cc4c0830"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"f465ad7ab770519c876711f7e3755e85cc4c0830":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["f465ad7ab770519c876711f7e3755e85cc4c0830","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f465ad7ab770519c876711f7e3755e85cc4c0830":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}