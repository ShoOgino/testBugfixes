{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\", \"Rindfleisch\", \"Überwachungsgesetz\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"Rindfleischüberwachungsgesetz\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertFiltersTo(tf, new String[] { \"Rindfleischüberwachungsgesetz\",\n        \"Rindfleisch\", \"fleisch\", \"überwachungsgesetz\", \"gesetz\" }, new int[] {\n        0, 0, 4, 11, 23 }, new int[] { 29, 11, 11, 29, 29 }, new int[] { 1, 0,\n        0, 0, 0 });\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\", \"Rindfleisch\", \"Überwachungsgesetz\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"Rindfleischüberwachungsgesetz\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertFiltersTo(tf, new String[] { \"Rindfleischüberwachungsgesetz\",\n        \"Rindfleisch\", \"fleisch\", \"überwachungsgesetz\", \"gesetz\" }, new int[] {\n        0, 0, 4, 11, 23 }, new int[] { 29, 11, 11, 29, 29 }, new int[] { 1, 0,\n        0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\", \"Rindfleisch\", \"Überwachungsgesetz\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"Rindfleischüberwachungsgesetz\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, new String[] { \"Rindfleischüberwachungsgesetz\",\n        \"Rindfleisch\", \"fleisch\", \"überwachungsgesetz\", \"gesetz\" }, new int[] {\n        0, 0, 4, 11, 23 }, new int[] { 29, 11, 11, 29, 29 }, new int[] { 1, 0,\n        0, 0, 0 });\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\", \"Rindfleisch\", \"Überwachungsgesetz\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"Rindfleischüberwachungsgesetz\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertFiltersTo(tf, new String[] { \"Rindfleischüberwachungsgesetz\",\n        \"Rindfleisch\", \"fleisch\", \"überwachungsgesetz\", \"gesetz\" }, new int[] {\n        0, 0, 4, 11, 23 }, new int[] { 29, 11, 11, 29, 29 }, new int[] { 1, 0,\n        0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f496009c9f6039ed409630c8ecc249b279924d1f","date":1261164324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\", \"Rindfleisch\", \"Überwachungsgesetz\" };\n\n    Reader reader = getHyphenationReader(\"de_DR.xml\");\n    if (reader == null) {\n      // we gracefully die if we have no reader\n      return;\n    }\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"Rindfleischüberwachungsgesetz\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, new String[] { \"Rindfleischüberwachungsgesetz\",\n        \"Rindfleisch\", \"fleisch\", \"überwachungsgesetz\", \"gesetz\" }, new int[] {\n        0, 0, 4, 11, 23 }, new int[] { 29, 11, 11, 29, 29 }, new int[] { 1, 0,\n        0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(Version.LUCENE_CURRENT, \n        new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(\n        new WhitespaceTokenizer(new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(Version.LUCENE_CURRENT, \n        new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testHyphenationCompoundWordsDELongestMatch().mjava","sourceNew":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","sourceOld":"  public void testHyphenationCompoundWordsDELongestMatch() throws Exception {\n    String[] dict = { \"basketball\", \"basket\", \"ball\", \"kurv\" };\n    Reader reader = getHyphenationReader();\n\n    HyphenationTree hyphenator = HyphenationCompoundWordTokenFilter\n        .getHyphenationTree(reader);\n\n    // the word basket will not be added due to the longest match option\n    HyphenationCompoundWordTokenFilter tf = new HyphenationCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n            \"basketballkurv\")), hyphenator, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE, 40, true);\n    assertTokenStreamContents(tf, \n        new String[] { \"basketballkurv\", \"basketball\", \"ball\", \"kurv\" },\n        new int[] { 1, 0, 0, 0 }\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f496009c9f6039ed409630c8ecc249b279924d1f":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["f496009c9f6039ed409630c8ecc249b279924d1f"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"f496009c9f6039ed409630c8ecc249b279924d1f":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["f496009c9f6039ed409630c8ecc249b279924d1f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}