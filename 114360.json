{"path":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return null;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return null; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return BitsFilteredDocIdSet.wrap(res, acceptDocs);\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return null;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return null; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return BitsFilteredDocIdSet.wrap(res, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}