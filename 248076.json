{"path":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoRect.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dea8da13fd1a227ae1071e8f4ce66bff42174de","date":1471439735,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double point[] = GeoTestUtil.nextPointNear(box);\n          double lat2 = point[0];\n          double lon2 = point[1];\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["713122036535651642e6d4fe57ce12b449e18473","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"713122036535651642e6d4fe57ce12b449e18473":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["713122036535651642e6d4fe57ce12b449e18473","9dea8da13fd1a227ae1071e8f4ce66bff42174de"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["713122036535651642e6d4fe57ce12b449e18473"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["713122036535651642e6d4fe57ce12b449e18473","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9dea8da13fd1a227ae1071e8f4ce66bff42174de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}