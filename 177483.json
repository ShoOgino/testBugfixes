{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n      int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.contains(info)) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n      int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.contains(info)) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f8b6801dbaf49c247119734f6e4516cce94e49a","date":1308478532,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize=\"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f902dca0fec763317e17fa91ff6543fc8120c609","date":1308553979,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize=\"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize= \"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n    \n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegements:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge)) {\n      if (verbose()) {\n        message(\"already merged; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to optimize the index.\n   *  This merge policy defines \"optimized\" to mean only the\n   *  requested number of segments is left in the index, and\n   *  respects the {@link #maxMergeSizeForOptimize} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose()) {\n      message(\"findMergesForOptimize: maxNumSegs=\" + maxNumSegments + \" segsToOptimize=\"+ segmentsToOptimize);\n    }\n\n    // If the segments are already optimized (e.g. there's only 1 segment), or\n    // there are <maxNumSegements, all optimized, nothing to do.\n    if (isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n      if (verbose()) {\n        message(\"already optimized; skip\");\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be optimized (other segments may have been flushed\n    // since optimize started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentInfo info = infos.info(--last);\n      if (segmentsToOptimize.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose()) {\n        message(\"last == 0; skip\");\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is optimized\n    if (maxNumSegments == 1 && last == 1 && isOptimized(infos.info(0))) {\n      if (verbose()) {\n        message(\"already 1 seg; skip\");\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentInfo info = infos.info(i);\n      if (size(info) > maxMergeSizeForOptimize || sizeDocs(info) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findMergesForOptimizeSizeLimit(infos, maxNumSegments, last);\n    } else {\n      return findMergesForOptimizeMaxNumSegments(infos, maxNumSegments, last);\n    }\n  }\n\n","bugFix":null,"bugIntro":["67bcec391f8e94564afde5a0f0e6538d07a96255","67bcec391f8e94564afde5a0f0e6538d07a96255","7602e63987582091a0e432f8d8f7619d2206fab7","7602e63987582091a0e432f8d8f7619d2206fab7"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9f8b6801dbaf49c247119734f6e4516cce94e49a":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"f902dca0fec763317e17fa91ff6543fc8120c609":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","9f8b6801dbaf49c247119734f6e4516cce94e49a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["9f8b6801dbaf49c247119734f6e4516cce94e49a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9f8b6801dbaf49c247119734f6e4516cce94e49a":["f902dca0fec763317e17fa91ff6543fc8120c609","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f902dca0fec763317e17fa91ff6543fc8120c609"],"f902dca0fec763317e17fa91ff6543fc8120c609":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["9f8b6801dbaf49c247119734f6e4516cce94e49a","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f902dca0fec763317e17fa91ff6543fc8120c609","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}