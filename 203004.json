{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c","date":1370731787,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is >= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final int distance = calcDistance(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is >= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is >= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final int distance = calcDistance(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6992bd44f38ea79b60af675e2148c25fb638b765","date":1417146793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is &gt;= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is >= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is &gt;= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is &gt;= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is &gt;= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":null,"sourceOld":"    /**\n     * <p>The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     * </p>\n     * <p>If the minSimilarity is &gt;= 1.0, this uses the maxEdits as the comparison.\n     * Otherwise, this method uses the following logic to calculate similarity.\n     * <pre>\n     *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));\n     *   </pre>\n     * where distance is the Levenshtein distance for the two words.\n     * </p>\n     * \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        utf32.copyUTF8Bytes(term);\n        final int distance = calcDistance(utf32.ints(), realPrefixLength, utf32.length() - realPrefixLength);\n       \n        //Integer.MIN_VALUE is the sentinel that Levenshtein stopped early\n        if (distance == Integer.MIN_VALUE){\n           return AcceptStatus.NO;\n        }\n        //no need to calc similarity, if raw is true and distance > maxEdits\n        if (raw == true && distance > maxEdits){\n              return AcceptStatus.NO;\n        } \n        final float similarity = calcSimilarity(distance, (utf32.length() - realPrefixLength), text.length);\n        \n        //if raw is true, then distance must also be <= maxEdits by now\n        //given the previous if statement\n        if (raw == true ||\n              (raw == false && similarity > minSimilarity)) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else {\n           return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6992bd44f38ea79b60af675e2148c25fb638b765":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6992bd44f38ea79b60af675e2148c25fb638b765","89424def13674ea17829b41c5883c54ecc31a132"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["6992bd44f38ea79b60af675e2148c25fb638b765"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6992bd44f38ea79b60af675e2148c25fb638b765","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["6992bd44f38ea79b60af675e2148c25fb638b765","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"6992bd44f38ea79b60af675e2148c25fb638b765":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4ef80fac452dc9fe7ee68e418183ebbeb8d4001c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6992bd44f38ea79b60af675e2148c25fb638b765"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}