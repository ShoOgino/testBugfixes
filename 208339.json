{"path":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","commits":[{"id":"d8597168c1e453abb749905dd59f89f06724c19d","date":1503433903,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    MetricRegistry registry = new MetricRegistry();\n    Set<String> names = ConcurrentHashMap.newKeySet();\n    SolrInfoBean bean = new SolrInfoBean() {\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public Set<String> getMetricNames() {\n        return names;\n      }\n\n      @Override\n      public MetricRegistry getMetricRegistry() {\n        return registry;\n      }\n    };\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    MetricRegistry registry = new MetricRegistry();\n    Set<String> names = ConcurrentHashMap.newKeySet();\n    SolrInfoBean bean = new SolrInfoBean() {\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public Set<String> getMetricNames() {\n        return names;\n      }\n\n      @Override\n      public MetricRegistry getMetricRegistry() {\n        return registry;\n      }\n    };\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","sourceNew":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    SolrInfoBean bean = new SolrInfoBean() {\n      SolrMetricsContext solrMetricsContext;\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        this.solrMetricsContext = parentContext.getChildContext(this);\n      }\n\n      @Override\n      public SolrMetricsContext getSolrMetricsContext() {\n        return solrMetricsContext;\n      }\n    };\n    bean.initializeMetrics(new SolrMetricsContext(h.getCoreContainer().getMetricManager(), \"testMetricsSnapshot\", \"foobar\"), \"foo\");\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.getSolrMetricsContext().registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getSolrMetricsContext().getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n  }\n\n","sourceOld":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    MetricRegistry registry = new MetricRegistry();\n    Set<String> names = ConcurrentHashMap.newKeySet();\n    SolrInfoBean bean = new SolrInfoBean() {\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public Set<String> getMetricNames() {\n        return names;\n      }\n\n      @Override\n      public MetricRegistry getMetricRegistry() {\n        return registry;\n      }\n    };\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MBeansHandlerTest#testMetricsSnapshot().mjava","sourceNew":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    SolrInfoBean bean = new SolrInfoBean() {\n      SolrMetricsContext solrMetricsContext;\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        this.solrMetricsContext = parentContext.getChildContext(this);\n      }\n\n      @Override\n      public SolrMetricsContext getSolrMetricsContext() {\n        return solrMetricsContext;\n      }\n    };\n    bean.initializeMetrics(new SolrMetricsContext(h.getCoreContainer().getMetricManager(), \"testMetricsSnapshot\", \"foobar\"), \"foo\");\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.getSolrMetricsContext().registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getSolrMetricsContext().getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n    bean.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMetricsSnapshot() throws Exception {\n    final CountDownLatch counter = new CountDownLatch(500);\n    SolrInfoBean bean = new SolrInfoBean() {\n      SolrMetricsContext solrMetricsContext;\n      @Override\n      public String getName() {\n        return \"foo\";\n      }\n\n      @Override\n      public String getDescription() {\n        return \"foo\";\n      }\n\n      @Override\n      public Category getCategory() {\n        return Category.ADMIN;\n      }\n\n      @Override\n      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n        this.solrMetricsContext = parentContext.getChildContext(this);\n      }\n\n      @Override\n      public SolrMetricsContext getSolrMetricsContext() {\n        return solrMetricsContext;\n      }\n    };\n    bean.initializeMetrics(new SolrMetricsContext(h.getCoreContainer().getMetricManager(), \"testMetricsSnapshot\", \"foobar\"), \"foo\");\n    runSnapshots = true;\n    Thread modifier = new Thread(() -> {\n      int i = 0;\n      while (runSnapshots) {\n        bean.getSolrMetricsContext().registerMetricName(\"name-\" + i++);\n        try {\n          Thread.sleep(31);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n      }\n    });\n    Thread reader = new Thread(() -> {\n      while (runSnapshots) {\n        try {\n          bean.getSolrMetricsContext().getMetricsSnapshot();\n        } catch (Exception e) {\n          runSnapshots = false;\n          e.printStackTrace();\n          fail(\"Exception getting metrics snapshot: \" + e.toString());\n        }\n        try {\n          Thread.sleep(53);\n        } catch (InterruptedException e) {\n          runSnapshots = false;\n          break;\n        }\n        counter.countDown();\n      }\n    });\n    modifier.start();\n    reader.start();\n    counter.await(30, TimeUnit.SECONDS);\n    runSnapshots = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["d8597168c1e453abb749905dd59f89f06724c19d"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d8597168c1e453abb749905dd59f89f06724c19d"],"ba055e19afc289adcb5bedaf68513793a7254012":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8597168c1e453abb749905dd59f89f06724c19d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["ba055e19afc289adcb5bedaf68513793a7254012"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","d8597168c1e453abb749905dd59f89f06724c19d"],"d8597168c1e453abb749905dd59f89f06724c19d":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}