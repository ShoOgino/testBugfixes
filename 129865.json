{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText) {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199fcfef6092b06089a588bf55391b8ce5aea8f5","date":1064896716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText) {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac96916a117263e8e2d7ab794824ffd12bce23e","date":1065662541,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a744f34b732efe0beb11df92bde24ccc01460dc","date":1094656002,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field,\n                                              new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t.termText());\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1)\n      return new TermQuery(new Term(field, (String) v.elementAt(0)));\n    else {\n      PhraseQuery q = new PhraseQuery();\n      q.setSlop(phraseSlop);\n      for (int i=0; i<v.size(); i++) {\n        q.add(new Term(field, (String) v.elementAt(i)));\n      }\n      return q;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d","date":1097573772,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getFieldQuery(String, String)}\n   */\n  protected Query getFieldQuery(String field,\n                                                    Analyzer analyzer,\n                                                    String queryText)  throws ParseException {\n    return getFieldQuery(field, queryText);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Note that parameter analyzer is ignored. Calls inside the parser always\n   * use class member analyzer.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   * @deprecated use {@link #getFieldQuery(String, String)}\n   */\n  protected Query getFieldQuery(String field,\n                                                    Analyzer analyzer,\n                                                    String queryText)  throws ParseException {\n    return getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["0ac96916a117263e8e2d7ab794824ffd12bce23e"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"0ac96916a117263e8e2d7ab794824ffd12bce23e":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d"],"0887d7bb675ed6e2d9ebc5f0486b3758481d7d8d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"0ac96916a117263e8e2d7ab794824ffd12bce23e":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["0ac96916a117263e8e2d7ab794824ffd12bce23e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}