{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"/dev/null","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = ((Scorer) conjunction).twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      DocIdSetIterator conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final DocIdSetIterator newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersect(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = ((Scorer) conjunction).asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"673214badd72b272cadb9ca9a05d2d9cb350f577","date":1450803200,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = ((Scorer) conjunction).twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4566afb2ee65953d186f4f93735fde23674641","date":1466575467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af167ac924ed00018fecc030b0a48b8b795c582e","date":1466596267,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          newIterator = scorer(approximation);\n          hasApproximation = true;\n        }\n\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final ConjunctionDISI conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, conj.asTwoPhaseIterator());\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testRecursiveConjunctionApproximation().mjava","sourceNew":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.TOP_SCORES, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.TOP_SCORES, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","sourceOld":"  // This test makes sure that when nesting scorers with ConjunctionDISI, confirmations are pushed to the root.\n  public void testRecursiveConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      Scorer conjunction = null;\n      boolean hasApproximation = false;\n      for (int i = 0; i < numIterators; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        final Scorer newIterator;\n        switch (random().nextInt(3)) {\n          case 0:\n            // simple iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, anonymizeIterator(new BitDocIdSet(set).iterator()));\n            break;\n          case 1:\n            // bitSet iterator\n            sets[i] = set;\n            newIterator = new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator());\n            break;\n          default:\n            // scorer with approximation\n            final FixedBitSet confirmed = clearRandomBits(set);\n            sets[i] = confirmed;\n            final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n            newIterator = scorer(approximation);\n            hasApproximation = true;\n            break;\n        }\n        if (conjunction == null) {\n          conjunction = newIterator;\n        } else {\n          final DocIdSetIterator conj = ConjunctionDISI.intersectScorers(Arrays.asList(conjunction, newIterator));\n          conjunction = scorer(conj, TwoPhaseIterator.unwrap(conj));\n        }\n      }\n\n      TwoPhaseIterator twoPhaseIterator = conjunction.twoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      } else {\n        assertEquals(intersect(sets), toBitSet(maxDoc, conjunction.iterator()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["af167ac924ed00018fecc030b0a48b8b795c582e"],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"9c226b0eeb8b028f572020f459851a663a2c064e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["673214badd72b272cadb9ca9a05d2d9cb350f577","af167ac924ed00018fecc030b0a48b8b795c582e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a3d6eb0072094d94624002318ba2d4c840946833"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["673214badd72b272cadb9ca9a05d2d9cb350f577"],"af167ac924ed00018fecc030b0a48b8b795c582e":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","2e4566afb2ee65953d186f4f93735fde23674641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e4566afb2ee65953d186f4f93735fde23674641":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["673214badd72b272cadb9ca9a05d2d9cb350f577","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a3d6eb0072094d94624002318ba2d4c840946833"],"673214badd72b272cadb9ca9a05d2d9cb350f577":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7dd748bb245633a8195281556bb0e68a6ea97d18"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"af167ac924ed00018fecc030b0a48b8b795c582e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"2e4566afb2ee65953d186f4f93735fde23674641":["af167ac924ed00018fecc030b0a48b8b795c582e"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["af167ac924ed00018fecc030b0a48b8b795c582e","2e4566afb2ee65953d186f4f93735fde23674641"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["673214badd72b272cadb9ca9a05d2d9cb350f577"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a3d6eb0072094d94624002318ba2d4c840946833","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"673214badd72b272cadb9ca9a05d2d9cb350f577":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}