{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e21d98da803ac6174cb50a880e6289139756ca","date":1323342587,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, ID, \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, ID, \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":4,"author":"broustant","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":null,"sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, ID, \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":null,"sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, ID, \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":null,"sourceOld":"  //load up the elevation map\n  private Map<String, ElevationObj> loadElevationMap(Config cfg) throws IOException {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<>();\n    NodeList nodes = (NodeList) cfg.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String qstr = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n\n      NodeList children = null;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      ArrayList<String> include = new ArrayList<>();\n      ArrayList<String> exclude = new ArrayList<>();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, ID, \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            exclude.add(id);\n            continue;\n          }\n        }\n        include.add(id);\n      }\n\n      ElevationObj elev = new ElevationObj(qstr, include, exclude);\n      if (map.containsKey(elev.analyzed)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Boosting query defined twice for query: '\" + elev.text + \"' (\" + elev.analyzed + \"')\");\n      }\n      map.put(elev.analyzed, elev);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d0561cea94adff1867218e77bb763c7583be279"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c26f00b574427b55127e869b935845554afde1fa","19e21d98da803ac6174cb50a880e6289139756ca"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1d0561cea94adff1867218e77bb763c7583be279":["19e21d98da803ac6174cb50a880e6289139756ca"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6d2dadc1f5ca8703d8659f4964961f9967935d75","2ad458affd82a1d762eb506003907d9363a333cb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19e21d98da803ac6174cb50a880e6289139756ca":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efc85580874d26ca9617f9ad61628d56f6859762":["c26f00b574427b55127e869b935845554afde1fa","19e21d98da803ac6174cb50a880e6289139756ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6d2dadc1f5ca8703d8659f4964961f9967935d75","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"c26f00b574427b55127e869b935845554afde1fa":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","19e21d98da803ac6174cb50a880e6289139756ca","efc85580874d26ca9617f9ad61628d56f6859762"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d0561cea94adff1867218e77bb763c7583be279":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"19e21d98da803ac6174cb50a880e6289139756ca":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1d0561cea94adff1867218e77bb763c7583be279","efc85580874d26ca9617f9ad61628d56f6859762"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"efc85580874d26ca9617f9ad61628d56f6859762":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","e5fa6615014cd2288fe930f8c8bb726f9504961d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","efc85580874d26ca9617f9ad61628d56f6859762","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}