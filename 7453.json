{"path":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f598c898a474a16f5313a79aa0f0870baa52df2","date":1328889626,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8726333bca804ff1ebd79d1310561641b5dfcb9e","date":1331697951,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random.nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/str[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/str[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#checkHits(String,boolean,String,double,int,int...).mjava","sourceNew":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/str[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","sourceOld":"  private void checkHits(String fieldName, boolean exact, String pt, double distance, int count, int ... docIds) {\n    String [] tests = new String[docIds != null && docIds.length > 0 ? docIds.length + 1 : 1];\n    tests[0] = \"*[count(//doc)=\" + count + \"]\";\n    if (docIds != null && docIds.length > 0) {\n      int i = 1;\n      for (int docId : docIds) {\n        tests[i++] = \"//result/doc/int[@name='id'][.='\" + docId + \"']\";\n      }\n    }\n\n    String method = exact ? \"geofilt\" : \"bbox\";\n    int postFilterCount = DelegatingCollector.setLastDelegateCount;\n\n    // throw in a random into the main query to prevent most cache hits\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName +\"}\",\n              \"pt\", pt, \"d\", String.valueOf(distance)),\n              tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);    // post filtering shouldn't be used\n    \n    // try uncached\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100), \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount, DelegatingCollector.setLastDelegateCount);      // post filtering shouldn't be used\n\n    // try post filtered for fields that support it\n    if (fieldName.endsWith(\"ll\")) {\n\n    assertQ(req(\"fl\", \"id\", \"q\",\"*:* OR foo_i:\" + random().nextInt(100)+100, \"rows\", \"1000\", \"fq\", \"{!\"+method+\" sfield=\" +fieldName + \" cache=false cost=150\" + \"}\",\n        \"pt\", pt, \"d\", String.valueOf(distance)),\n        tests);\n    assertEquals(postFilterCount + 1, DelegatingCollector.setLastDelegateCount);      // post filtering *should* have been used\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["0f598c898a474a16f5313a79aa0f0870baa52df2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"0f598c898a474a16f5313a79aa0f0870baa52df2":["c26f00b574427b55127e869b935845554afde1fa"],"28288370235ed02234a64753cdbf0c6ec096304a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0f598c898a474a16f5313a79aa0f0870baa52df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0f598c898a474a16f5313a79aa0f0870baa52df2":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}