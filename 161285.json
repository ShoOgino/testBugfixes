{"path":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getNumerics(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestClass().getName() + \"#\" + getTestName() \n          + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["5da0b42730b6b99b31389ef94cb97384e83b9ede","59a0020b413d44dd79d85d7a66ed5004265fb453"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["59a0020b413d44dd79d85d7a66ed5004265fb453","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"56572ec06f1407c066d6b7399413178b33176cd8":["59a0020b413d44dd79d85d7a66ed5004265fb453","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}