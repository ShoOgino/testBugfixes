{"path":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    mock.remoteKeys.put(nodeName, CryptoKeys.deserializeX509PublicKey(mock.getPublicKey()));\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4cc09d2901360848cecc5b598c25edcb51367d89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e76c7a05748b87468b5ccbcf325482013e002a3d","date":1448547807,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    mock.remoteKeys.put(nodeName, CryptoKeys.deserializeX509PublicKey(mock.getPublicKey()));\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"357888e0066ec9901a44897fac3332f4586834ba","date":1464198119,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        wrappedRequestByFilter.set(servletRequest);\n      }\n    };\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1214bb624eb41181e5c8e260e0050c7e973ba0f4","date":1487943042,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","date":1487979822,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf05ac8412c363312f1070705c3172ad940ffc23","date":1488450006,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    mockReq = createMockRequest(header);\n    filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n\n\n    run(\"solr\", () -> {\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n\n    //test 2\n\n    run(null, () -> {\n      principal.set(null); // no user\n      header.set(null);\n      wrappedRequestByFilter.set(null);//\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n    //test 3 . No user request . Request originated from Solr\n    run(\"$\", () -> {\n      mock.solrRequestInfo = null;\n      header.set(null);\n      wrappedRequestByFilter.set(null);\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      assertNotNull(header.get());\n      assertTrue(header.get().getValue().startsWith(nodeName));\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n    run(\"$\", () -> {\n      mock.solrRequestInfo = null;\n      header.set(null);\n      wrappedRequestByFilter.set(null);\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      assertNotNull(header.get());\n      assertTrue(header.get().getValue().startsWith(nodeName));\n      MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n        int called = 0;\n\n        @Override\n        PublicKey getRemotePublicKey(String nodename) {\n          try {\n            return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n          } finally {\n            called++;\n          }\n        }\n      };\n\n      mock1.doAuthenticate(mockReq, null, filterChain);\n\n    });\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":["4cc09d2901360848cecc5b598c25edcb51367d89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc09d2901360848cecc5b598c25edcb51367d89","date":1488606177,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    mockReq = createMockRequest(header);\n    filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n\n\n    run(\"solr\", () -> {\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n\n    //test 2\n\n    run(null, () -> {\n      principal.set(null); // no user\n      header.set(null);\n      wrappedRequestByFilter.set(null);//\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n    //test 3 . No user request . Request originated from Solr\n    run(\"$\", () -> {\n      mock.solrRequestInfo = null;\n      header.set(null);\n      wrappedRequestByFilter.set(null);\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      assertNotNull(header.get());\n      assertTrue(header.get().getValue().startsWith(nodeName));\n      mock.doAuthenticate(mockReq, null, filterChain);\n    });\n\n    run(\"$\", () -> {\n      mock.solrRequestInfo = null;\n      header.set(null);\n      wrappedRequestByFilter.set(null);\n      request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n      mock.setHeader(request);\n      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n      assertNotNull(header.get());\n      assertTrue(header.get().getValue().startsWith(nodeName));\n      MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n        int called = 0;\n\n        @Override\n        PublicKey getRemotePublicKey(String nodename) {\n          try {\n            return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;\n          } finally {\n            called++;\n          }\n        }\n      };\n\n      mock1.doAuthenticate(mockReq, null, filterChain);\n\n    });\n\n  }\n\n","bugFix":["cf05ac8412c363312f1070705c3172ad940ffc23","b3a34dae868734612eb6329aa0ef754f30bd2036"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n    mock1.close();\n    mock.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n    mock1.close();\n    mock.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n    mock1.close();\n    mock.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#test().mjava","sourceNew":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.authenticate(mockReq, null, filterChain);\n\n    assertNotNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.authenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.authenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.authenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n    mock1.close();\n    mock.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    assumeWorkingMockito();\n    \n    AtomicReference<Principal> principal = new AtomicReference<>();\n    String nodeName = \"node_x_233\";\n\n    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);\n    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return principal.get();\n      }\n    };\n    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());\n    mock.remoteKeys.put(nodeName, correctKey);\n\n    principal.set(new BasicUserPrincipal(\"solr\"));\n    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());\n    BasicHttpRequest request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    final AtomicReference<Header> header = new AtomicReference<>();\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n    final AtomicReference<ServletRequest> wrappedRequestByFilter = new AtomicReference<>();\n    HttpServletRequest mockReq = createMockRequest(header);\n    FilterChain filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);\n    mock.doAuthenticate(mockReq, null, filterChain);\n\n    assertNotNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"solr\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    //test 2\n    principal.set(null); // no user\n    header.set(null);\n    wrappedRequestByFilter.set(null);//\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertNull(((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal());\n\n    //test 3 . No user request . Request originated from Solr\n    //create pub key in advance because it can take time and it should be\n    //created before the header is set\n    PublicKey key = new CryptoKeys.RSAKeyPair().getPublicKey();\n    mock.solrRequestInfo = null;\n    header.set(null);\n    wrappedRequestByFilter.set(null);\n    request = new BasicHttpRequest(\"GET\", \"http://localhost:56565\");\n    mock.setHeader(request);\n    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));\n    assertNotNull(header.get());\n    assertTrue(header.get().getValue().startsWith(nodeName));\n\n    mock.doAuthenticate(mockReq, null, filterChain);\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n\n    /*test4 mock the restart of a node*/\n    MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {\n      int called = 0;\n      @Override\n      PublicKey getRemotePublicKey(String nodename) {\n        try {\n          return called == 0 ? key : correctKey;\n        } finally {\n          called++;\n        }\n      }\n    };\n\n    mock1.doAuthenticate(mockReq, null,filterChain );\n    assertNotNull(wrappedRequestByFilter.get());\n    assertEquals(\"$\", ((HttpServletRequest) wrappedRequestByFilter.get()).getUserPrincipal().getName());\n    mock1.close();\n    mock.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"357888e0066ec9901a44897fac3332f4586834ba":["e76c7a05748b87468b5ccbcf325482013e002a3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["4cc09d2901360848cecc5b598c25edcb51367d89","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["e76c7a05748b87468b5ccbcf325482013e002a3d","357888e0066ec9901a44897fac3332f4586834ba"],"4cc09d2901360848cecc5b598c25edcb51367d89":["cf05ac8412c363312f1070705c3172ad940ffc23"],"cf05ac8412c363312f1070705c3172ad940ffc23":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e76c7a05748b87468b5ccbcf325482013e002a3d","357888e0066ec9901a44897fac3332f4586834ba"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["357888e0066ec9901a44897fac3332f4586834ba"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["4cc09d2901360848cecc5b598c25edcb51367d89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85397dd93927c17347c6bf89800cd0fc566c2d03"]},"commit2Childs":{"357888e0066ec9901a44897fac3332f4586834ba":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["cf05ac8412c363312f1070705c3172ad940ffc23"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["e76c7a05748b87468b5ccbcf325482013e002a3d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cc09d2901360848cecc5b598c25edcb51367d89":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"cf05ac8412c363312f1070705c3172ad940ffc23":["4cc09d2901360848cecc5b598c25edcb51367d89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["357888e0066ec9901a44897fac3332f4586834ba","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}