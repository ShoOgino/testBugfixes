{"path":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}