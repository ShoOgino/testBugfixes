{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","sourceNew":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   *\n   * <p> <b>NOTE</b>: This value should be as large as\n   * possible to reduce any possible performance impact.  If\n   * you still encounter an incorrect OutOfMemoryError,\n   * trying lowering the chunk size.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    if (!Constants.JRE_IS_64BIT) {\n      this.chunkSize = chunkSize;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   *\n   * <p> <b>NOTE</b>: This value should be as large as\n   * possible to reduce any possible performance impact.  If\n   * you still encounter an incorrect OutOfMemoryError,\n   * trying lowering the chunk size.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    if (!Constants.JRE_IS_64BIT) {\n      this.chunkSize = chunkSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e3fe3905595c7929af5fdebdaa1d08aadd7b877","date":1376144682,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","sourceNew":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   *\n   * <p> <b>NOTE</b>: This value should be as large as\n   * possible to reduce any possible performance impact.  If\n   * you still encounter an incorrect OutOfMemoryError,\n   * trying lowering the chunk size.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    if (!Constants.JRE_IS_64BIT) {\n      this.chunkSize = chunkSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf83b1542b01ad5cddb41b01dc51f751215919","date":1376231222,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","sourceNew":"  /**\n   * This setting has no effect anymore.\n   * @deprecated This is no longer used since Lucene 4.5.\n   */\n  @Deprecated\n  public final void setReadChunkSize(int chunkSize) {\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b276c0e067d0783512420512a66c9986f2d4f2d9","date":1376232987,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * This setting has no effect anymore.\n   * @deprecated This is no longer used since Lucene 4.5.\n   */\n  @Deprecated\n  public final void setReadChunkSize(int chunkSize) {\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setReadChunkSize(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the maximum number of bytes read at once from the\n   * underlying file during {@link IndexInput#readBytes}.\n   * The default value is {@link #DEFAULT_READ_CHUNK_SIZE};\n   *\n   * <p> This was introduced due to <a\n   * href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6478546\">Sun\n   * JVM Bug 6478546</a>, which throws an incorrect\n   * OutOfMemoryError when attempting to read too many bytes\n   * at once.  It only happens on 32bit JVMs with a large\n   * maximum heap size.</p>\n   *\n   * <p>Changes to this value will not impact any\n   * already-opened {@link IndexInput}s.  You should call\n   * this before attempting to open an index on the\n   * directory.</p>\n   *\n   * <p> <b>NOTE</b>: This value should be as large as\n   * possible to reduce any possible performance impact.  If\n   * you still encounter an incorrect OutOfMemoryError,\n   * trying lowering the chunk size.</p>\n   */\n  public final void setReadChunkSize(int chunkSize) {\n    // LUCENE-1566\n    if (chunkSize <= 0) {\n      throw new IllegalArgumentException(\"chunkSize must be positive\");\n    }\n    if (!Constants.JRE_IS_64BIT) {\n      this.chunkSize = chunkSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["8e3fe3905595c7929af5fdebdaa1d08aadd7b877"],"8e3fe3905595c7929af5fdebdaa1d08aadd7b877":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b276c0e067d0783512420512a66c9986f2d4f2d9"],"b276c0e067d0783512420512a66c9986f2d4f2d9":["0dcf83b1542b01ad5cddb41b01dc51f751215919"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","8e3fe3905595c7929af5fdebdaa1d08aadd7b877"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["b276c0e067d0783512420512a66c9986f2d4f2d9"],"8e3fe3905595c7929af5fdebdaa1d08aadd7b877":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b276c0e067d0783512420512a66c9986f2d4f2d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}