{"path":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testLogReaderSeek().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testLogReaderSeek().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the seek method of the log reader.\n   */\n  @Test\n  public void testLogReaderSeek() throws Exception {\n    this.clearCore();\n\n    int start = 0;\n\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    CdcrUpdateLog.CdcrLogReader reader1 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader2 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader3 = ((CdcrUpdateLog) ulog).newLogReader();\n\n    LinkedList<Long> versions = new LinkedList<>();\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    addDocs(11, start, versions);\n    start += 11;\n    assertU(commit());\n\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    // Test case where target version is equal to startVersion of tlog file\n    long targetVersion = getVer(req(\"q\", \"id:10\"));\n\n    assertTrue(reader1.seek(targetVersion));\n    Object o = reader1.next();\n    assertNotNull(o);\n    List entry = (List) o;\n    long version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader1.next());\n\n    // test case where target version is superior to startVersion of tlog file\n    targetVersion = getVer(req(\"q\", \"id:26\"));\n\n    assertTrue(reader2.seek(targetVersion));\n    o = reader2.next();\n    assertNotNull(o);\n    entry = (List) o;\n    version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader2.next());\n\n    // test case where target version is inferior to startVersion of oldest tlog file\n    targetVersion = getVer(req(\"q\", \"id:0\")) - 1;\n\n    assertFalse(reader3.seek(targetVersion));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testLogReaderSeek().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testLogReaderSeek().mjava","sourceNew":"  /**\n   * Check the seek method of the log reader.\n   */\n  @Test\n  public void testLogReaderSeek() throws Exception {\n    this.clearCore();\n\n    int start = 0;\n\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    CdcrUpdateLog.CdcrLogReader reader1 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader2 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader3 = ((CdcrUpdateLog) ulog).newLogReader();\n\n    LinkedList<Long> versions = new LinkedList<>();\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    addDocs(11, start, versions);\n    start += 11;\n    assertU(commit());\n\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    // Test case where target version is equal to startVersion of tlog file\n    long targetVersion = getVer(req(\"q\", \"id:10\"));\n\n    assertTrue(reader1.seek(targetVersion));\n    Object o = reader1.next();\n    assertNotNull(o);\n    @SuppressWarnings({\"rawtypes\"})\n    List entry = (List) o;\n    long version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader1.next());\n\n    // test case where target version is superior to startVersion of tlog file\n    targetVersion = getVer(req(\"q\", \"id:26\"));\n\n    assertTrue(reader2.seek(targetVersion));\n    o = reader2.next();\n    assertNotNull(o);\n    entry = (List) o;\n    version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader2.next());\n\n    // test case where target version is inferior to startVersion of oldest tlog file\n    targetVersion = getVer(req(\"q\", \"id:0\")) - 1;\n\n    assertFalse(reader3.seek(targetVersion));\n  }\n\n","sourceOld":"  /**\n   * Check the seek method of the log reader.\n   */\n  @Test\n  public void testLogReaderSeek() throws Exception {\n    this.clearCore();\n\n    int start = 0;\n\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    CdcrUpdateLog.CdcrLogReader reader1 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader2 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader3 = ((CdcrUpdateLog) ulog).newLogReader();\n\n    LinkedList<Long> versions = new LinkedList<>();\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    addDocs(11, start, versions);\n    start += 11;\n    assertU(commit());\n\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    // Test case where target version is equal to startVersion of tlog file\n    long targetVersion = getVer(req(\"q\", \"id:10\"));\n\n    assertTrue(reader1.seek(targetVersion));\n    Object o = reader1.next();\n    assertNotNull(o);\n    List entry = (List) o;\n    long version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader1.next());\n\n    // test case where target version is superior to startVersion of tlog file\n    targetVersion = getVer(req(\"q\", \"id:26\"));\n\n    assertTrue(reader2.seek(targetVersion));\n    o = reader2.next();\n    assertNotNull(o);\n    entry = (List) o;\n    version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader2.next());\n\n    // test case where target version is inferior to startVersion of oldest tlog file\n    targetVersion = getVer(req(\"q\", \"id:0\")) - 1;\n\n    assertFalse(reader3.seek(targetVersion));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testLogReaderSeek().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check the seek method of the log reader.\n   */\n  @Test\n  public void testLogReaderSeek() throws Exception {\n    this.clearCore();\n\n    int start = 0;\n\n    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n    CdcrUpdateLog.CdcrLogReader reader1 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader2 = ((CdcrUpdateLog) ulog).newLogReader();\n    CdcrUpdateLog.CdcrLogReader reader3 = ((CdcrUpdateLog) ulog).newLogReader();\n\n    LinkedList<Long> versions = new LinkedList<>();\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    addDocs(11, start, versions);\n    start += 11;\n    assertU(commit());\n\n    addDocs(10, start, versions);\n    start += 10;\n    assertU(commit());\n\n    // Test case where target version is equal to startVersion of tlog file\n    long targetVersion = getVer(req(\"q\", \"id:10\"));\n\n    assertTrue(reader1.seek(targetVersion));\n    Object o = reader1.next();\n    assertNotNull(o);\n    @SuppressWarnings({\"rawtypes\"})\n    List entry = (List) o;\n    long version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader1.next());\n\n    // test case where target version is superior to startVersion of tlog file\n    targetVersion = getVer(req(\"q\", \"id:26\"));\n\n    assertTrue(reader2.seek(targetVersion));\n    o = reader2.next();\n    assertNotNull(o);\n    entry = (List) o;\n    version = (Long) entry.get(1);\n\n    assertEquals(targetVersion, version);\n\n    assertNotNull(reader2.next());\n\n    // test case where target version is inferior to startVersion of oldest tlog file\n    targetVersion = getVer(req(\"q\", \"id:0\")) - 1;\n\n    assertFalse(reader3.seek(targetVersion));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e98520789adb1d5ad05afb4956eca0944a929688":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e98520789adb1d5ad05afb4956eca0944a929688":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}