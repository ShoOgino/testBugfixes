{"path":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","commits":[{"id":"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e","date":1408694655,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","pathOld":"/dev/null","sourceNew":"  private List<ClassificationResult<BytesRef>> calculateLogLikelihood(String[] tokenizedDoc) throws IOException {\n    // initialize the return List\n    ArrayList<ClassificationResult<BytesRef>> ret = new ArrayList<>();\n    for (BytesRef cclass : cclasses) {\n      ClassificationResult<BytesRef> cr = new ClassificationResult<>(cclass, 0d);\n      ret.add(cr);\n    }\n    // for each word\n    for (String word : tokenizedDoc) {\n      // search with text:word for all class:c\n      Map<BytesRef, Integer> hitsInClasses = getWordFreqForClassess(word);\n      // for each class\n      for (BytesRef cclass : cclasses) {\n        Integer hitsI = hitsInClasses.get(cclass);\n        // if the word is out of scope hitsI could be null\n        int hits = 0;\n        if (hitsI != null) {\n          hits = hitsI;\n        }\n        // num : count the no of times the word appears in documents of class c(+1)\n        double num = hits + 1; // +1 is added because of add 1 smoothing\n\n        // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n        double den = classTermFreq.get(cclass) + docsWithClassSize;\n\n        // P(w|c) = num/den\n        double wordProbability = num / den;\n\n        // modify the value in the result list item\n        for (ClassificationResult<BytesRef> cr : ret) {\n          if (cr.getAssignedClass().equals(cclass)) {\n            cr.setScore(cr.getScore() + Math.log(wordProbability));\n            break;\n          }\n        }\n      }\n    }\n\n    // log(P(d|c)) = log(P(w1|c))+...+log(P(wn|c))\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"805a01fd60dd540fc1326f9886d8cc985647f38e","date":1430733992,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","sourceNew":"  private List<ClassificationResult<BytesRef>> calculateLogLikelihood(String[] tokenizedDoc) throws IOException {\n    // initialize the return List\n    ArrayList<ClassificationResult<BytesRef>> ret = new ArrayList<>();\n    for (BytesRef cclass : cclasses) {\n      ClassificationResult<BytesRef> cr = new ClassificationResult<>(cclass, 0d);\n      ret.add(cr);\n    }\n    // for each word\n    for (String word : tokenizedDoc) {\n      // search with text:word for all class:c\n      Map<BytesRef, Integer> hitsInClasses = getWordFreqForClassess(word);\n      // for each class\n      for (BytesRef cclass : cclasses) {\n        Integer hitsI = hitsInClasses.get(cclass);\n        // if the word is out of scope hitsI could be null\n        int hits = 0;\n        if (hitsI != null) {\n          hits = hitsI;\n        }\n        // num : count the no of times the word appears in documents of class c(+1)\n        double num = hits + 1; // +1 is added because of add 1 smoothing\n\n        // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n        double den = classTermFreq.get(cclass) + docsWithClassSize;\n\n        // P(w|c) = num/den\n        double wordProbability = num / den;\n\n        // modify the value in the result list item\n        int removeIdx = -1;\n        int i = 0;\n        for (ClassificationResult<BytesRef> cr : ret) {\n          if (cr.getAssignedClass().equals(cclass)) {\n            removeIdx = i;\n            break;\n          }\n          i++;\n        }\n\n        if (removeIdx >= 0) {\n          ClassificationResult<BytesRef> toRemove = ret.get(removeIdx);\n          ret.add(new ClassificationResult<>(toRemove.getAssignedClass(), toRemove.getScore() + Math.log(wordProbability)));\n          ret.remove(removeIdx);\n        }\n\n      }\n    }\n\n    // log(P(d|c)) = log(P(w1|c))+...+log(P(wn|c))\n    return ret;\n  }\n\n","sourceOld":"  private List<ClassificationResult<BytesRef>> calculateLogLikelihood(String[] tokenizedDoc) throws IOException {\n    // initialize the return List\n    ArrayList<ClassificationResult<BytesRef>> ret = new ArrayList<>();\n    for (BytesRef cclass : cclasses) {\n      ClassificationResult<BytesRef> cr = new ClassificationResult<>(cclass, 0d);\n      ret.add(cr);\n    }\n    // for each word\n    for (String word : tokenizedDoc) {\n      // search with text:word for all class:c\n      Map<BytesRef, Integer> hitsInClasses = getWordFreqForClassess(word);\n      // for each class\n      for (BytesRef cclass : cclasses) {\n        Integer hitsI = hitsInClasses.get(cclass);\n        // if the word is out of scope hitsI could be null\n        int hits = 0;\n        if (hitsI != null) {\n          hits = hitsI;\n        }\n        // num : count the no of times the word appears in documents of class c(+1)\n        double num = hits + 1; // +1 is added because of add 1 smoothing\n\n        // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n        double den = classTermFreq.get(cclass) + docsWithClassSize;\n\n        // P(w|c) = num/den\n        double wordProbability = num / den;\n\n        // modify the value in the result list item\n        for (ClassificationResult<BytesRef> cr : ret) {\n          if (cr.getAssignedClass().equals(cclass)) {\n            cr.setScore(cr.getScore() + Math.log(wordProbability));\n            break;\n          }\n        }\n      }\n    }\n\n    // log(P(d|c)) = log(P(w1|c))+...+log(P(wn|c))\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#calculateLogLikelihood(String[]).mjava","sourceNew":"  private List<ClassificationResult<BytesRef>> calculateLogLikelihood(String[] tokenizedText) throws IOException {\n    // initialize the return List\n    ArrayList<ClassificationResult<BytesRef>> ret = new ArrayList<>();\n    for (BytesRef cclass : cclasses) {\n      ClassificationResult<BytesRef> cr = new ClassificationResult<>(cclass, 0d);\n      ret.add(cr);\n    }\n    // for each word\n    for (String word : tokenizedText) {\n      // search with text:word for all class:c\n      Map<BytesRef, Integer> hitsInClasses = getWordFreqForClassess(word);\n      // for each class\n      for (BytesRef cclass : cclasses) {\n        Integer hitsI = hitsInClasses.get(cclass);\n        // if the word is out of scope hitsI could be null\n        int hits = 0;\n        if (hitsI != null) {\n          hits = hitsI;\n        }\n        // num : count the no of times the word appears in documents of class c(+1)\n        double num = hits + 1; // +1 is added because of add 1 smoothing\n\n        // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n        double den = classTermFreq.get(cclass) + docsWithClassSize;\n\n        // P(w|c) = num/den\n        double wordProbability = num / den;\n\n        // modify the value in the result list item\n        int removeIdx = -1;\n        int i = 0;\n        for (ClassificationResult<BytesRef> cr : ret) {\n          if (cr.getAssignedClass().equals(cclass)) {\n            removeIdx = i;\n            break;\n          }\n          i++;\n        }\n\n        if (removeIdx >= 0) {\n          ClassificationResult<BytesRef> toRemove = ret.get(removeIdx);\n          ret.add(new ClassificationResult<>(toRemove.getAssignedClass(), toRemove.getScore() + Math.log(wordProbability)));\n          ret.remove(removeIdx);\n        }\n\n      }\n    }\n\n    // log(P(d|c)) = log(P(w1|c))+...+log(P(wn|c))\n    return ret;\n  }\n\n","sourceOld":"  private List<ClassificationResult<BytesRef>> calculateLogLikelihood(String[] tokenizedDoc) throws IOException {\n    // initialize the return List\n    ArrayList<ClassificationResult<BytesRef>> ret = new ArrayList<>();\n    for (BytesRef cclass : cclasses) {\n      ClassificationResult<BytesRef> cr = new ClassificationResult<>(cclass, 0d);\n      ret.add(cr);\n    }\n    // for each word\n    for (String word : tokenizedDoc) {\n      // search with text:word for all class:c\n      Map<BytesRef, Integer> hitsInClasses = getWordFreqForClassess(word);\n      // for each class\n      for (BytesRef cclass : cclasses) {\n        Integer hitsI = hitsInClasses.get(cclass);\n        // if the word is out of scope hitsI could be null\n        int hits = 0;\n        if (hitsI != null) {\n          hits = hitsI;\n        }\n        // num : count the no of times the word appears in documents of class c(+1)\n        double num = hits + 1; // +1 is added because of add 1 smoothing\n\n        // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n        double den = classTermFreq.get(cclass) + docsWithClassSize;\n\n        // P(w|c) = num/den\n        double wordProbability = num / den;\n\n        // modify the value in the result list item\n        int removeIdx = -1;\n        int i = 0;\n        for (ClassificationResult<BytesRef> cr : ret) {\n          if (cr.getAssignedClass().equals(cclass)) {\n            removeIdx = i;\n            break;\n          }\n          i++;\n        }\n\n        if (removeIdx >= 0) {\n          ClassificationResult<BytesRef> toRemove = ret.get(removeIdx);\n          ret.add(new ClassificationResult<>(toRemove.getAssignedClass(), toRemove.getScore() + Math.log(wordProbability)));\n          ret.remove(removeIdx);\n        }\n\n      }\n    }\n\n    // log(P(d|c)) = log(P(w1|c))+...+log(P(wn|c))\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"805a01fd60dd540fc1326f9886d8cc985647f38e":["f42902644d0afd11c1be38fd0b0e8237bf4f4d7e"],"134a24d0cb66520908d88384f1a559875704ed25":["805a01fd60dd540fc1326f9886d8cc985647f38e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["134a24d0cb66520908d88384f1a559875704ed25"]},"commit2Childs":{"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e":["805a01fd60dd540fc1326f9886d8cc985647f38e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f42902644d0afd11c1be38fd0b0e8237bf4f4d7e"],"805a01fd60dd540fc1326f9886d8cc985647f38e":["134a24d0cb66520908d88384f1a559875704ed25"],"134a24d0cb66520908d88384f1a559875704ed25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}