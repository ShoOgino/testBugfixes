{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    TestFileListEntityProcessor.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01011c24ad865e85842d59dd197a6f57e97ab0ce","date":1337913389,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").getAbsolutePath(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"), false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"), false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n    tmpdir.delete();\n    tmpdir.mkdir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(\"UTF-8\"),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir().toFile();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir().toFile();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir().toFile();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withDefaultSolrAndXsl().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void withDefaultSolrAndXsl() throws Exception {\n    File tmpdir = createTempDir().toFile();\n    AbstractDataImportHandlerTestCase.createFile(tmpdir, \"x.xsl\", xsl.getBytes(StandardCharsets.UTF_8),\n            false);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map entityAttrs = createMap(\"name\", \"e\",\n            XPathEntityProcessor.USE_SOLR_ADD_SCHEMA, \"true\", \"xsl\", \"\"\n            + new File(tmpdir, \"x.xsl\").toURI(), \"url\", \"cd.xml\");\n    Context c = getContext(null,\n            new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, null, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    assertEquals(3, result.size());\n    assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1e9ce820cd3ed9efb959c181daaafd22f0c70143","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"024e13388acbf5562fcbb77a129620982a5e2d79":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["01011c24ad865e85842d59dd197a6f57e97ab0ce"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["01011c24ad865e85842d59dd197a6f57e97ab0ce","7c7b0ae5716b6c2044195a818e9ae58205175659"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"01011c24ad865e85842d59dd197a6f57e97ab0ce":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","01011c24ad865e85842d59dd197a6f57e97ab0ce"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f4abec28b874149a7223e32cc7a01704c27790de":["024e13388acbf5562fcbb77a129620982a5e2d79"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"01011c24ad865e85842d59dd197a6f57e97ab0ce":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["5eb2511ababf862ea11e10761c70ee560cd84510"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}