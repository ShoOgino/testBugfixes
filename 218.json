{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","commits":[{"id":"a7a6109173bbca417edffdfc7bf9f2e35fef63ab","date":1511856065,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#RandomPointBearingCardinalTest().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    double ab = random().nextDouble() * 0.6 + 0.9;\n    double c = random().nextDouble() * 0.6  + 0.9 ;\n    PlanetModel planetModel = new PlanetModel(ab, c);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * Math.PI;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 10000)\n  public void RandomPointBearingCardinalTest(){\n    double ab = random().nextDouble() * 0.6 + 0.9;\n    double c = random().nextDouble() * 0.6  + 0.9 ;\n    PlanetModel planetModel = new PlanetModel(ab, c);\n    RandomGeo3dShapeGenerator generator = new RandomGeo3dShapeGenerator();\n    GeoPoint center = generator.randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * Math.PI;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03d351abb1e487ff1b7feaacc286da105d59a04","date":1512729671,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    //surface distance calculations methods start not converging when\n    //planet flattening > 0.4\n    PlanetModel planetModel;\n    do {\n      double ab = random().nextDouble() * 2;\n      double c = random().nextDouble() * 2;\n      if (random().nextBoolean()) {\n        planetModel = new PlanetModel(ab, c);\n      } else {\n        planetModel = new PlanetModel(c, ab);\n      }\n    } while (Math.abs(planetModel.flattening) > 0.4);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * Math.PI;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    double ab = random().nextDouble() * 0.6 + 0.9;\n    double c = random().nextDouble() * 0.6  + 0.9 ;\n    PlanetModel planetModel = new PlanetModel(ab, c);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * Math.PI;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"377eb762699271912a888bdf72744172670816e2","date":1514893093,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    //surface distance calculations methods start not converging when\n    //planet flattening > 0.4\n    PlanetModel planetModel;\n    do {\n      double ab = random().nextDouble() * 2;\n      double c = random().nextDouble() * 2;\n      if (random().nextBoolean()) {\n        planetModel = new PlanetModel(ab, c);\n      } else {\n        planetModel = new PlanetModel(c, ab);\n      }\n    } while (Math.abs(planetModel.flattening) > 0.4);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * planetModel.minimumPoleDistance;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    //surface distance calculations methods start not converging when\n    //planet flattening > 0.4\n    PlanetModel planetModel;\n    do {\n      double ab = random().nextDouble() * 2;\n      double c = random().nextDouble() * 2;\n      if (random().nextBoolean()) {\n        planetModel = new PlanetModel(ab, c);\n      } else {\n        planetModel = new PlanetModel(c, ab);\n      }\n    } while (Math.abs(planetModel.flattening) > 0.4);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * Math.PI;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","bugFix":["302d874df4c49c3dbad31bb261d8ddd02ffb295d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#RandomPointBearingCardinalTest().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    //surface distance calculations methods start not converging when\n    //planet scaledFlattening > 0.4\n    PlanetModel planetModel;\n    do {\n      double ab = random().nextDouble() * 2;\n      double c = random().nextDouble() * 2;\n      if (random().nextBoolean()) {\n        planetModel = new PlanetModel(ab, c);\n      } else {\n        planetModel = new PlanetModel(c, ab);\n      }\n    } while (Math.abs(planetModel.scaledFlattening) > 0.4);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * planetModel.minimumPoleDistance;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 100)\n  public void RandomPointBearingCardinalTest(){\n    //surface distance calculations methods start not converging when\n    //planet flattening > 0.4\n    PlanetModel planetModel;\n    do {\n      double ab = random().nextDouble() * 2;\n      double c = random().nextDouble() * 2;\n      if (random().nextBoolean()) {\n        planetModel = new PlanetModel(ab, c);\n      } else {\n        planetModel = new PlanetModel(c, ab);\n      }\n    } while (Math.abs(planetModel.flattening) > 0.4);\n    GeoPoint center = randomGeoPoint(planetModel);\n    double radius =  random().nextDouble() * 0.9 * planetModel.minimumPoleDistance;\n    checkBearingPoint(planetModel, center, radius, 0);\n    checkBearingPoint(planetModel, center, radius, 0.5 * Math.PI);\n    checkBearingPoint(planetModel, center, radius, Math.PI);\n    checkBearingPoint(planetModel, center, radius, 1.5 * Math.PI);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"377eb762699271912a888bdf72744172670816e2":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03d351abb1e487ff1b7feaacc286da105d59a04":["a7a6109173bbca417edffdfc7bf9f2e35fef63ab"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["377eb762699271912a888bdf72744172670816e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"a7a6109173bbca417edffdfc7bf9f2e35fef63ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"377eb762699271912a888bdf72744172670816e2":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7a6109173bbca417edffdfc7bf9f2e35fef63ab"],"a03d351abb1e487ff1b7feaacc286da105d59a04":["377eb762699271912a888bdf72744172670816e2"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7a6109173bbca417edffdfc7bf9f2e35fef63ab":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}