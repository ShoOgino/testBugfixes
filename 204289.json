{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteFeed().mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteFeed().mjava","pathOld":"/dev/null","sourceNew":"    public void testDeleteFeed() throws IOException, StorageException {\n        testSaveFeed();\n        Entry e = new Entry();\n        e.setTitle(new PlainTextConstruct(\"hello world\"));\n        ServerBaseEntry entry = new ServerBaseEntry(e);\n        entry.setFeedId(feedId);\n        entry.setId(\"testme\");\n        entry.setServiceConfig(this.configurator);\n        StorageEntryWrapper entryWrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(entryWrapper);\n        this.modifier.forceWrite();\n        this.modifier.deleteFeed(feedId);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Query q1 = new TermQuery(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,\n                feedId));\n        BooleanQuery boolQuery = new BooleanQuery();\n        boolQuery.add(q,BooleanClause.Occur.SHOULD);\n        boolQuery.add(q1,BooleanClause.Occur.SHOULD);\n        Hits h = searcher.search(boolQuery);\n        assertEquals(\"length == 0\", 0, h.length());\n        searcher.close();\n        \n        \n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteFeed().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteFeed().mjava","sourceNew":"    public void testDeleteFeed() throws IOException, StorageException {\n        testSaveFeed();\n        Entry e = new Entry();\n        e.setTitle(new PlainTextConstruct(\"hello world\"));\n        ServerBaseEntry entry = new ServerBaseEntry(e);\n        entry.setFeedId(feedId);\n        entry.setId(\"testme\");\n        entry.setServiceConfig(this.configurator);\n        StorageEntryWrapper entryWrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(entryWrapper);\n        this.modifier.forceWrite();\n        this.modifier.deleteFeed(feedId);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Query q1 = new TermQuery(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,\n                feedId));\n        BooleanQuery boolQuery = new BooleanQuery();\n        boolQuery.add(q,BooleanClause.Occur.SHOULD);\n        boolQuery.add(q1,BooleanClause.Occur.SHOULD);\n        Hits h = searcher.search(boolQuery);\n        assertEquals(\"length == 0\", 0, h.length());\n        searcher.close();\n        \n        \n        \n    }\n\n","sourceOld":"    public void testDeleteFeed() throws IOException, StorageException {\n        testSaveFeed();\n        Entry e = new Entry();\n        e.setTitle(new PlainTextConstruct(\"hello world\"));\n        ServerBaseEntry entry = new ServerBaseEntry(e);\n        entry.setFeedId(feedId);\n        entry.setId(\"testme\");\n        entry.setServiceConfig(this.configurator);\n        StorageEntryWrapper entryWrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(entryWrapper);\n        this.modifier.forceWrite();\n        this.modifier.deleteFeed(feedId);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Query q1 = new TermQuery(new Term(StorageEntryWrapper.FIELD_FEED_REFERENCE,\n                feedId));\n        BooleanQuery boolQuery = new BooleanQuery();\n        boolQuery.add(q,BooleanClause.Occur.SHOULD);\n        boolQuery.add(q1,BooleanClause.Occur.SHOULD);\n        Hits h = searcher.search(boolQuery);\n        assertEquals(\"length == 0\", 0, h.length());\n        searcher.close();\n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52754a40a1550056d5637c8992b4076b5ed77328":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}