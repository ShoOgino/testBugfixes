{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testDeleteAlsoDeletesAutocreatedConfigSet().mjava","commits":[{"id":"121de2b1a2f90238d017b11597526f7441dd0792","date":1598038996,"type":0,"author":"Anderson Dorow","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#testDeleteAlsoDeletesAutocreatedConfigSet().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    @ShardsFixed(num = 1)\n    public void testDeleteAlsoDeletesAutocreatedConfigSet() throws Exception {\n        String collectionName = \"SimpleCollectionCreateDeleteTest.testDeleteAlsoDeletesAutocreatedConfigSet\";\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1);\n\n        NamedList<Object> request = create.process(cloudClient).getResponse();\n\n        if (request.get(\"success\") != null) {\n            // collection exists now\n            assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n            String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n\n            // config for this collection is '.AUTOCREATED', and exists globally\n            assertTrue(configName.endsWith(\".AUTOCREATED\"));\n            assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n\n            CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collectionName);\n            cloudClient.request(delete);\n\n            // collection has been deleted\n            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n            // ... and so has its autocreated config set\n            assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"121de2b1a2f90238d017b11597526f7441dd0792":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["121de2b1a2f90238d017b11597526f7441dd0792"]},"commit2Childs":{"121de2b1a2f90238d017b11597526f7441dd0792":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["121de2b1a2f90238d017b11597526f7441dd0792"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}