{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","commits":[{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return in.correctOffset(ret); // chain the call\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"252bf4b68a09cc9f46f33927fc4542e65ec7b4f8","date":1359494150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    Map.Entry<Integer,Integer> lastEntry = corrections.lowerEntry(currentOff+1);\n    int ret = lastEntry == null ? currentOff : currentOff + lastEntry.getValue();\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","bugFix":["7e477c2108982ba9974f73aa8800270c75cb4971"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    Map.Entry<Integer,Integer> lastEntry = corrections.lowerEntry(currentOff+1);\n    int ret = lastEntry == null ? currentOff : currentOff + lastEntry.getValue();\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["fc706b1e03a539d44d99998108feb684bb44cbb2","252bf4b68a09cc9f46f33927fc4542e65ec7b4f8"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc706b1e03a539d44d99998108feb684bb44cbb2"],"252bf4b68a09cc9f46f33927fc4542e65ec7b4f8":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["252bf4b68a09cc9f46f33927fc4542e65ec7b4f8"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["61d5f95d14e5b9b046998c51e16709a398c15226","aba371508186796cc6151d8223a5b4e16d02e26e","252bf4b68a09cc9f46f33927fc4542e65ec7b4f8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"252bf4b68a09cc9f46f33927fc4542e65ec7b4f8":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}