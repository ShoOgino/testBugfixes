{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#fillContentStream(Request,Collection[ContentStream],ModifiableSolrParams,boolean).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#fillContentStream(Request,Collection[ContentStream],ModifiableSolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Request fillContentStream(Request req, Collection<ContentStream> streams,\n                                    ModifiableSolrParams wparams,\n                                    boolean isMultipart) throws IOException {\n    if (isMultipart) {\n      // multipart/form-data\n      MultiPartContentProvider content = new MultiPartContentProvider();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            content.addFieldPart(key, new StringContentProvider(val), null);\n          }\n        }\n      }\n      if (streams != null) {\n        for (ContentStream contentStream : streams) {\n          String contentType = contentStream.getContentType();\n          if (contentType == null) {\n            contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n          }\n          String name = contentStream.getName();\n          if (name == null) {\n            name = \"\";\n          }\n          HttpFields fields = new HttpFields();\n          fields.add(HttpHeader.CONTENT_TYPE, contentType);\n          content.addFilePart(name, contentStream.getName(), new InputStreamContentProvider(contentStream.getStream()), fields);\n        }\n      }\n      req.content(content);\n    } else {\n      // application/x-www-form-urlencoded\n      Fields fields = new Fields();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            fields.add(key, val);\n          }\n        }\n      }\n      req.content(new FormContentProvider(fields, StandardCharsets.UTF_8));\n    }\n\n    return req;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#fillContentStream(Request,Collection[ContentStream],ModifiableSolrParams,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#fillContentStream(Request,Collection[ContentStream],ModifiableSolrParams,boolean).mjava","sourceNew":"  private Request fillContentStream(Request req, Collection<ContentStream> streams,\n                                    ModifiableSolrParams wparams,\n                                    boolean isMultipart) throws IOException {\n    if (isMultipart) {\n      // multipart/form-data\n      MultiPartContentProvider content = new MultiPartContentProvider();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            content.addFieldPart(key, new StringContentProvider(val), null);\n          }\n        }\n      }\n      if (streams != null) {\n        for (ContentStream contentStream : streams) {\n          String contentType = contentStream.getContentType();\n          if (contentType == null) {\n            contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n          }\n          String name = contentStream.getName();\n          if (name == null) {\n            name = \"\";\n          }\n          HttpFields fields = new HttpFields();\n          fields.add(HttpHeader.CONTENT_TYPE, contentType);\n          content.addFilePart(name, contentStream.getName(), new InputStreamContentProvider(contentStream.getStream()), fields);\n        }\n      }\n      req.content(content);\n    } else {\n      // application/x-www-form-urlencoded\n      Fields fields = new Fields();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            fields.add(key, val);\n          }\n        }\n      }\n      req.content(new FormContentProvider(fields, FALLBACK_CHARSET));\n    }\n\n    return req;\n  }\n\n","sourceOld":"  private Request fillContentStream(Request req, Collection<ContentStream> streams,\n                                    ModifiableSolrParams wparams,\n                                    boolean isMultipart) throws IOException {\n    if (isMultipart) {\n      // multipart/form-data\n      MultiPartContentProvider content = new MultiPartContentProvider();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            content.addFieldPart(key, new StringContentProvider(val), null);\n          }\n        }\n      }\n      if (streams != null) {\n        for (ContentStream contentStream : streams) {\n          String contentType = contentStream.getContentType();\n          if (contentType == null) {\n            contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n          }\n          String name = contentStream.getName();\n          if (name == null) {\n            name = \"\";\n          }\n          HttpFields fields = new HttpFields();\n          fields.add(HttpHeader.CONTENT_TYPE, contentType);\n          content.addFilePart(name, contentStream.getName(), new InputStreamContentProvider(contentStream.getStream()), fields);\n        }\n      }\n      req.content(content);\n    } else {\n      // application/x-www-form-urlencoded\n      Fields fields = new Fields();\n      Iterator<String> iter = wparams.getParameterNamesIterator();\n      while (iter.hasNext()) {\n        String key = iter.next();\n        String[] vals = wparams.getParams(key);\n        if (vals != null) {\n          for (String val : vals) {\n            fields.add(key, val);\n          }\n        }\n      }\n      req.content(new FormContentProvider(fields, StandardCharsets.UTF_8));\n    }\n\n    return req;\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}