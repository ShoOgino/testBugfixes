{"path":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(\"f1\"));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(\"f4\")));\n    Document doc223 = pr.document(1, new MapFieldSelector(\"f2\", \"f3\"));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(\"f1\"));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(\"f4\")));\n    Document doc223 = pr.document(1, new MapFieldSelector(\"f2\", \"f3\"));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(\"f1\"));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(\"f4\")));\n    Document doc223 = pr.document(1, new MapFieldSelector(\"f2\", \"f3\"));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribParallelReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = getDocument(pr, 0, new MapFieldSelector(\"f1\"));\n    Document doc24 = getDocument(pr, 1, new MapFieldSelector(Arrays.asList(\"f4\")));\n    Document doc223 = getDocument(pr, 1, new MapFieldSelector(\"f2\", \"f3\"));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(\"f1\"));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(\"f4\")));\n    Document doc223 = pr.document(1, new MapFieldSelector(\"f2\", \"f3\"));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}