{"path":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#testReusableTokenStream().mjava","commits":[{"id":"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee","date":1325135089,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#testReusableTokenStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testReusableTokenStream() throws IOException {\n    assertAnalyzesToReuse(analyzer, \"あいうえおabcかきくけこ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"abc\", \"かき\", \"きく\", \"くけ\", \"けこ\" },\n        new int[] { 0, 1, 2, 3, 5,  8,  9, 10, 11 },\n        new int[] { 2, 3, 4, 5, 8, 10, 11, 12, 13 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\" },\n        new int[] { 1, 1, 1, 1, 1,  1,  1,  1,  1});\n    \n    assertAnalyzesToReuse(analyzer, \"あいうえおabんcかきくけ こ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"ab\", \"ん\", \"c\", \"かき\", \"きく\", \"くけ\", \"こ\" },\n        new int[] { 0, 1, 2, 3, 5, 7, 8,  9, 10, 11, 14 },\n        new int[] { 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<SINGLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1,  1,  1,  1,  1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#testReusableTokenStream().mjava","pathOld":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestWithCJKBigramFilter#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws IOException {\n    assertAnalyzesToReuse(analyzer, \"あいうえおabcかきくけこ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"abc\", \"かき\", \"きく\", \"くけ\", \"けこ\" },\n        new int[] { 0, 1, 2, 3, 5,  8,  9, 10, 11 },\n        new int[] { 2, 3, 4, 5, 8, 10, 11, 12, 13 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\" },\n        new int[] { 1, 1, 1, 1, 1,  1,  1,  1,  1});\n    \n    assertAnalyzesToReuse(analyzer, \"あいうえおabんcかきくけ こ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"ab\", \"ん\", \"c\", \"かき\", \"きく\", \"くけ\", \"こ\" },\n        new int[] { 0, 1, 2, 3, 5, 7, 8,  9, 10, 11, 14 },\n        new int[] { 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<SINGLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1,  1,  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws IOException {\n    assertAnalyzesToReuse(analyzer, \"あいうえおabcかきくけこ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"abc\", \"かき\", \"きく\", \"くけ\", \"けこ\" },\n        new int[] { 0, 1, 2, 3, 5,  8,  9, 10, 11 },\n        new int[] { 2, 3, 4, 5, 8, 10, 11, 12, 13 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\" },\n        new int[] { 1, 1, 1, 1, 1,  1,  1,  1,  1});\n    \n    assertAnalyzesToReuse(analyzer, \"あいうえおabんcかきくけ こ\",\n        new String[] { \"あい\", \"いう\", \"うえ\", \"えお\", \"ab\", \"ん\", \"c\", \"かき\", \"きく\", \"くけ\", \"こ\" },\n        new int[] { 0, 1, 2, 3, 5, 7, 8,  9, 10, 11, 14 },\n        new int[] { 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15 },\n        new String[] { \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<ALPHANUM>\", \"<SINGLE>\", \"<ALPHANUM>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<DOUBLE>\", \"<SINGLE>\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1,  1,  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee"],"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680e7f726eaa1fd44ade8bc1f8a02f452ca7c4ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}