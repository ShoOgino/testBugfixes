{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(slowIndexDir, slowTaxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(slowIndexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(slowTaxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(slowIndexDir, slowTaxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(slowIndexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(slowTaxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new LuceneTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random, slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random);\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random, slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis,\n      int cacheSize) throws Exception, CorruptIndexException, IOException,\n      InterruptedException {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n    \n\n    // Index documents without the \"slowness\"\n    MultiCLIndexer.index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = IndexReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader,\n                    FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public ExampleResult getResults() {\n        ExampleResult exampleRes = new ExampleResult();\n        exampleRes.setFacetResults(results);\n        return exampleRes;\n      }\n\n      @Override\n      public void run() {\n        try {\n          results = MultiCLSearcher.searchWithFacets(indexReader, taxoReader, iParams);\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    // Instantiate threads, but do not start them\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads - 1; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, MultiCLIndexer.MULTI_IPARAMS);\n    }\n    // The last thread uses ONLY the DefaultFacetIndexingParams so that\n    // it references a different TFC cache. This will still result\n    // in valid results, but will only search one of the category lists\n    // instead of all of them.\n    multis[numThreads - 1] = new Multi(slowIndexReader, slowTaxoReader, new DefaultFacetIndexingParams());\n\n    // Gentleman, start your engines\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    ExampleResult[] multiResults = new ExampleResult[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i].join();\n      multiResults[i] = multis[i].getResults();\n    }\n\n    // Each of the (numThreads-1) should have the same predictable\n    // results, which we test for here.\n    for (int i = 0; i < numThreads - 1; i++) {\n      ExampleResult eResults = multiResults[i];\n      TestMultiCLExample.assertCorrectMultiResults(eResults);\n    }\n\n    // The last thread, which only searched over the\n    // DefaultFacetIndexingParams,\n    // has its own results\n    ExampleResult eResults = multiResults[numThreads - 1];\n    List<FacetResult> results = eResults.getFacetResults();\n    assertEquals(3, results.size());\n    String[] expLabels = new String[] { \"5\", \"5/5\", \"6/2\" };\n    double[] expValues = new double[] { 0.0, 0.0, 1.0 };\n    for (int i = 0; i < 3; i++) {\n      FacetResult result = results.get(i);\n      assertNotNull(\"Result should not be null\", result);\n      FacetResultNode resNode = result.getFacetResultNode();\n      assertEquals(\"Invalid label\", expLabels[i], resNode.getLabel().toString());\n      assertEquals(\"Invalid value\", expValues[i], resNode.getValue(), 0.0);\n      assertEquals(\"Invalid number of subresults\", 0, resNode.getNumSubResults());\n    }\n    // we're done, close the index reader and the taxonomy.\n    slowIndexReader.close();\n    slowTaxoReader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}