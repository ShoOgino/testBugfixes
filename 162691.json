{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(int,long,long).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(int,long,long).mjava","sourceNew":null,"sourceOld":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0936055c0eed56be3e4ae5c9db5b0e355390736a"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}