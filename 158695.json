{"path":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","commits":[{"id":"7b92ded2659c9795a606f40ec031e6d09c801275","date":1493043122,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","sourceNew":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1625baae9bafa0ac31ec0347627e5bd70768215d","date":1493202699,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","sourceNew":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times, and then fail softly if reload is not complete yet\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      if (metrics == null) {\n        if (softFail) {\n          return;\n        } else {\n          fail(\"missing 'metrics' element in handler's output: \" + values.asMap(5).toString());\n        }\n      }\n      metrics = (NamedList)metrics.get(registry);\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times, and then fail softly if reload is not complete yet\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      if (metrics == null) {\n        if (softFail) {\n          return;\n        } else {\n          fail(\"missing 'metrics' element in handler's output: \" + values.asMap(5).toString());\n        }\n      }\n      metrics = (NamedList)metrics.get(registry);\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","sourceNew":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList values = rsp.getValues();\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times, and then fail softly if reload is not complete yet\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      if (metrics == null) {\n        if (softFail) {\n          return;\n        } else {\n          fail(\"missing 'metrics' element in handler's output: \" + values.asMap(5).toString());\n        }\n      }\n      metrics = (NamedList)metrics.get(registry);\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times, and then fail softly if reload is not complete yet\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      if (metrics == null) {\n        if (softFail) {\n          return;\n        } else {\n          fail(\"missing 'metrics' element in handler's output: \" + values.asMap(5).toString());\n        }\n      }\n      metrics = (NamedList)metrics.get(registry);\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1625baae9bafa0ac31ec0347627e5bd70768215d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b92ded2659c9795a606f40ec031e6d09c801275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1625baae9bafa0ac31ec0347627e5bd70768215d":["7b92ded2659c9795a606f40ec031e6d09c801275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1625baae9bafa0ac31ec0347627e5bd70768215d"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","7b92ded2659c9795a606f40ec031e6d09c801275"],"7b92ded2659c9795a606f40ec031e6d09c801275":["1625baae9bafa0ac31ec0347627e5bd70768215d"],"1625baae9bafa0ac31ec0347627e5bd70768215d":["e9017cf144952056066919f1ebc7897ff9bd71b1","e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}