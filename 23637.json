{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","commits":[{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient        the zookeeper client\n   * @param path            the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient        the zookeeper client\n   * @param path            the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient        the zookeeper client\n   * @param path            the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient the zookeeper client\n   * @param path the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(SolrZkClient,String,boolean).mjava","sourceNew":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient        the zookeeper client\n   * @param path            the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","sourceOld":"  /**\n   * Assumes data in ZooKeeper is a JSON string, deserializes it and returns as a Map\n   *\n   * @param zkClient        the zookeeper client\n   * @param path            the path to the znode being read\n   * @param retryOnConnLoss whether to retry the operation automatically on connection loss, see {@link org.apache.solr.common.cloud.ZkCmdExecutor#retryOperation(ZkOperation)}\n   * @return a Map if the node exists and contains valid JSON or an empty map if znode does not exist or has a null data\n   */\n  public static Map<String, Object> getJson(SolrZkClient zkClient, String path, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    try {\n      byte[] bytes = zkClient.getData(path, null, null, retryOnConnLoss);\n      if (bytes != null && bytes.length > 0) {\n        return (Map<String, Object>) Utils.fromJSON(bytes);\n      }\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    return Collections.emptyMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["8476949555f799dff381770c01cfad051a264487"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["28288370235ed02234a64753cdbf0c6ec096304a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"8476949555f799dff381770c01cfad051a264487":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}