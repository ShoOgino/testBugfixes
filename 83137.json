{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","commits":[{"id":"6d36bc9cece6e1287852808de22ef7aa07c2e716","date":1550783148,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","pathOld":"/dev/null","sourceNew":"  protected void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    queue.reset();\n    SortDoc top = queue.top();\n    for (int i = 0; i < leaves.size(); i++) {\n      sortDoc.setNextReader(leaves.get(i));\n      DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n      int docId;\n      while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        sortDoc.setValues(docId);\n        if (top.lessThan(sortDoc)) {\n          top.setValues(sortDoc);\n          top = queue.updateTop();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","pathOld":"/dev/null","sourceNew":"  protected void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    queue.reset();\n    SortDoc top = queue.top();\n    for (int i = 0; i < leaves.size(); i++) {\n      sortDoc.setNextReader(leaves.get(i));\n      DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n      int docId;\n      while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        sortDoc.setValues(docId);\n        if (top.lessThan(sortDoc)) {\n          top.setValues(sortDoc);\n          top = queue.updateTop();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","sourceNew":"  protected void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    Timer.Context timerContext = identifyLowestSortingDocTimer.time();\n    try {\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","sourceOld":"  protected void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    queue.reset();\n    SortDoc top = queue.top();\n    for (int i = 0; i < leaves.size(); i++) {\n      sortDoc.setNextReader(leaves.get(i));\n      DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n      int docId;\n      while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        sortDoc.setValues(docId);\n        if (top.lessThan(sortDoc)) {\n          top.setValues(sortDoc);\n          top = queue.updateTop();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4447fbdfe6dd65e66f20836c5353483f46b7240f","date":1594133199,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#identifyLowestSortingUnexportedDocs(List[LeafReaderContext],SortDoc,SortQueue).mjava","sourceNew":"  private void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    Timer.Context timerContext = identifyLowestSortingDocTimer.time();\n    try {\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","sourceOld":"  protected void identifyLowestSortingUnexportedDocs(List<LeafReaderContext> leaves, SortDoc sortDoc, SortQueue queue) throws IOException {\n    Timer.Context timerContext = identifyLowestSortingDocTimer.time();\n    try {\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n    } finally {\n      timerContext.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4447fbdfe6dd65e66f20836c5353483f46b7240f":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d36bc9cece6e1287852808de22ef7aa07c2e716"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4447fbdfe6dd65e66f20836c5353483f46b7240f"]},"commit2Childs":{"4447fbdfe6dd65e66f20836c5353483f46b7240f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["4447fbdfe6dd65e66f20836c5353483f46b7240f"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d36bc9cece6e1287852808de22ef7aa07c2e716","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}