{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","commits":[{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8435160e9702b19398118ddf76b61c846612b6a4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","11a746437bc5c0a0b3df0337ed249c387c812871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"8435160e9702b19398118ddf76b61c846612b6a4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}