{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new MockRAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory(random);      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new MockRAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory(random);      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();      \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":null,"sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":null,"sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":null,"sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}