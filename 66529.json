{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term();\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term();\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":["5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a","050ba1ba249733cac50c2612418b7179591d2df9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term();\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (TEST) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term();\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}