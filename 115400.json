{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","commits":[{"id":"58b93c361b4f6fe193e84bfd27ea523366eada52","date":1490100167,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8908009aaa8e9318b455c1c22b83e0e87738228a","date":1490280013,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b4e21f270c812affb9d34da7e81113045b05e0","date":1497389490,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9","date":1520265828,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n\n    // fieldQuery currently relies on a string input of the value...\n    String bucketStr = bucketVal instanceof Date ? Instant.ofEpochMilli(((Date)bucketVal).getTime()).toString() : bucketVal.toString();\n    Query domainQ = ft.getFieldQuery(null, sf, bucketStr);\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n    // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...\n\n    Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":null,"bugIntro":["15b321aed72eecb043f237c490b9afd4e52c25be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15b321aed72eecb043f237c490b9afd4e52c25be","date":1525894978,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#refineBucket(Object,boolean,Map[String,Object]).mjava","sourceNew":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n\n    // fieldQuery currently relies on a string input of the value...\n    String bucketStr = bucketVal instanceof Date ? ((Date)bucketVal).toInstant().toString() : bucketVal.toString();\n    Query domainQ = ft.getFieldQuery(null, sf, bucketStr);\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> refineBucket(Object bucketVal, boolean skip, Map<String,Object> facetInfo) throws IOException {\n    SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();\n    FieldType ft = sf.getType();\n    bucketVal = ft.toNativeType(bucketVal);  // refinement info passed in as JSON will cause int->long and float->double\n    bucket.add(\"val\", bucketVal);\n\n    // fieldQuery currently relies on a string input of the value...\n    String bucketStr = bucketVal instanceof Date ? Instant.ofEpochMilli(((Date)bucketVal).getTime()).toString() : bucketVal.toString();\n    Query domainQ = ft.getFieldQuery(null, sf, bucketStr);\n\n    fillBucket(bucket, domainQ, null, skip, facetInfo);\n\n    return bucket;\n  }\n\n","bugFix":["f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58b93c361b4f6fe193e84bfd27ea523366eada52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6b4e21f270c812affb9d34da7e81113045b05e0":["58b93c361b4f6fe193e84bfd27ea523366eada52"],"f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9":["28288370235ed02234a64753cdbf0c6ec096304a"],"8908009aaa8e9318b455c1c22b83e0e87738228a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15b321aed72eecb043f237c490b9afd4e52c25be":["f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9"],"28288370235ed02234a64753cdbf0c6ec096304a":["58b93c361b4f6fe193e84bfd27ea523366eada52","a6b4e21f270c812affb9d34da7e81113045b05e0"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["8908009aaa8e9318b455c1c22b83e0e87738228a","a6b4e21f270c812affb9d34da7e81113045b05e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15b321aed72eecb043f237c490b9afd4e52c25be"]},"commit2Childs":{"58b93c361b4f6fe193e84bfd27ea523366eada52":["a6b4e21f270c812affb9d34da7e81113045b05e0","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b93c361b4f6fe193e84bfd27ea523366eada52","8908009aaa8e9318b455c1c22b83e0e87738228a"],"a6b4e21f270c812affb9d34da7e81113045b05e0":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9":["15b321aed72eecb043f237c490b9afd4e52c25be"],"8908009aaa8e9318b455c1c22b83e0e87738228a":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["f1d005dd5ef5744d35de478e9702fc8c8d3cf4a9"],"15b321aed72eecb043f237c490b9afd4e52c25be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}