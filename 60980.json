{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    BytesRef scratch = new BytesRef();\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0, scratch));\n      assertFalse(docsWithField.get(1));\n      bdv.get(1, scratch);\n      assertEquals(0, scratch.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      assertEquals(0, bdv.nextDoc());\n      assertEquals(5L, getValue(bdv));\n      assertEquals(NO_MORE_DOCS, bdv.nextDoc());\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      assertEquals(0, bdv.nextDoc());\n      assertEquals(5L, getValue(bdv));\n      assertEquals(NO_MORE_DOCS, bdv.nextDoc());\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      assertEquals(0, bdv.nextDoc());\n      assertEquals(5L, getValue(bdv));\n      assertEquals(NO_MORE_DOCS, bdv.nextDoc());\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with BDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new BinaryDocValuesField(\"bdv\", toBytes(3L)));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'bdv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no BDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without BDV field\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc0\"), \"bdv\", toBytes(5L));\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc1\"), \"bdv\", toBytes(5L));\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n      Bits docsWithField = r.getDocsWithField(\"bdv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, getValue(bdv, 0));\n      assertFalse(docsWithField.get(1));\n      BytesRef term = bdv.get(1);\n      assertEquals(0, term.length);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}