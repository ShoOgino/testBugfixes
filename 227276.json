{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["6aedf81f068e430dec27d94310415cc6ff52731c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}