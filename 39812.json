{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","commits":[{"id":"962b2790491d84618a387a768d018c54e9809f91","date":1166830997,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns the next token in the stream, or null at EOS. */\n    public final Token next() throws IOException {\n        if (!started) {\n            started = true;\n            gramSize = minGram;\n            char[] chars = new char[1024];\n            input.read(chars);\n            inStr = new String(chars).trim();  // remove any trailing empty strings \n            inLen = inStr.length();\n        }\n\n        if (pos+gramSize > inLen) {            // if we hit the end of the string\n            pos = 0;                           // reset to beginning of string\n            gramSize++;                        // increase n-gram size\n            if (gramSize > maxGram)            // we are done\n                return null;\n            if (pos+gramSize > inLen)\n                return null;\n        }\n        String gram = inStr.substring(pos, pos+gramSize);\n        int oldPos = pos;\n        pos++;\n        return new Token(gram, oldPos, oldPos+gramSize);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dc0aae18c8a2691ff696acb78f04d0b3587e575","date":1172858067,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n    String gram = inStr.substring(pos, pos+gramSize);\n    int oldPos = pos;\n    pos++;\n    return new Token(gram, oldPos, oldPos+gramSize);\n  }\n\n","sourceOld":"    /** Returns the next token in the stream, or null at EOS. */\n    public final Token next() throws IOException {\n        if (!started) {\n            started = true;\n            gramSize = minGram;\n            char[] chars = new char[1024];\n            input.read(chars);\n            inStr = new String(chars).trim();  // remove any trailing empty strings \n            inLen = inStr.length();\n        }\n\n        if (pos+gramSize > inLen) {            // if we hit the end of the string\n            pos = 0;                           // reset to beginning of string\n            gramSize++;                        // increase n-gram size\n            if (gramSize > maxGram)            // we are done\n                return null;\n            if (pos+gramSize > inLen)\n                return null;\n        }\n        String gram = inStr.substring(pos, pos+gramSize);\n        int oldPos = pos;\n        pos++;\n        return new Token(gram, oldPos, oldPos+gramSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, oldPos, oldPos+gramSize);\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n    String gram = inStr.substring(pos, pos+gramSize);\n    int oldPos = pos;\n    pos++;\n    return new Token(gram, oldPos, oldPos+gramSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2dc0aae18c8a2691ff696acb78f04d0b3587e575"],"2dc0aae18c8a2691ff696acb78f04d0b3587e575":["962b2790491d84618a387a768d018c54e9809f91"],"962b2790491d84618a387a768d018c54e9809f91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dc0aae18c8a2691ff696acb78f04d0b3587e575":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"962b2790491d84618a387a768d018c54e9809f91":["2dc0aae18c8a2691ff696acb78f04d0b3587e575"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["962b2790491d84618a387a768d018c54e9809f91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}