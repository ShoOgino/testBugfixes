{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","commits":[{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAttr.isKeyword()) {\n        char termBuffer[] = termAtt.termBuffer();\n        final int length = termAtt.termLength();\n        stemmer.setCurrent(termBuffer, length);\n        stemmer.stem();\n        final char finalTerm[] = stemmer.getCurrentBuffer();\n        final int newLength = stemmer.getCurrentBufferLength();\n        if (finalTerm != termBuffer)\n          termAtt.setTermBuffer(finalTerm, 0, newLength);\n        else\n          termAtt.setTermLength(newLength);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char termBuffer[] = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      stemmer.setCurrent(termBuffer, length);\n      stemmer.stem();\n      final char finalTerm[] = stemmer.getCurrentBuffer();\n      final int newLength = stemmer.getCurrentBufferLength();\n      if (finalTerm != termBuffer)\n        termAtt.setTermBuffer(finalTerm, 0, newLength);\n      else\n        termAtt.setTermLength(newLength); \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["8bc7429500777cb3888bd40a90e5da1a57aa1681","9b5756469957918cac40a831acec9cf01c8c2bb3","896db35433d86885314c8b90861ea2a76174c1b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#incrementToken().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAttr.isKeyword()) {\n        char termBuffer[] = termAtt.termBuffer();\n        final int length = termAtt.termLength();\n        stemmer.setCurrent(termBuffer, length);\n        stemmer.stem();\n        final char finalTerm[] = stemmer.getCurrentBuffer();\n        final int newLength = stemmer.getCurrentBufferLength();\n        if (finalTerm != termBuffer)\n          termAtt.setTermBuffer(finalTerm, 0, newLength);\n        else\n          termAtt.setTermLength(newLength);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (!keywordAttr.isKeyword()) {\n        char termBuffer[] = termAtt.termBuffer();\n        final int length = termAtt.termLength();\n        stemmer.setCurrent(termBuffer, length);\n        stemmer.stem();\n        final char finalTerm[] = stemmer.getCurrentBuffer();\n        final int newLength = stemmer.getCurrentBufferLength();\n        if (finalTerm != termBuffer)\n          termAtt.setTermBuffer(finalTerm, 0, newLength);\n        else\n          termAtt.setTermLength(newLength);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c2877c077c0dc229ee9871dc196b2a62442df599"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["c2877c077c0dc229ee9871dc196b2a62442df599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}