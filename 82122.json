{"path":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = ObjectBuilder.fromJSON(text);\n      } catch (IOException ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }        \n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b7196d371f022e3c5c078c58aee21f1c246ce23"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b7196d371f022e3c5c078c58aee21f1c246ce23","date":1455059321,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","sourceNew":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = ObjectBuilder.fromJSON(text);\n      } catch (IOException ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }\n\n","sourceOld":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = ObjectBuilder.fromJSON(text);\n      } catch (IOException ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }        \n\n","bugFix":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","sourceNew":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = fromJSONString(text);\n      } catch (Exception ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }\n\n","sourceOld":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = ObjectBuilder.fromJSON(text);\n      } catch (IOException ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager.ManagedEndpoint#parseJsonFromRequestBody(Representation).mjava","sourceNew":null,"sourceOld":"    /**\n     * Parses and validates the JSON passed from the to the ManagedResource. \n     */\n    protected Object parseJsonFromRequestBody(Representation entity) {\n      if (entity.getMediaType() == null) {\n        entity.setMediaType(MediaType.APPLICATION_JSON);\n      }\n      \n      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Invalid content type %s; only %s is supported.\",\n            entity.getMediaType(), MediaType.APPLICATION_JSON.toString());\n        log.error(errMsg);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg);\n      }\n      \n      String text = null;\n      try {\n        text = entity.getText();\n      } catch (IOException ioExc) {\n        String errMsg = \"Failed to read entity text due to: \"+ioExc;\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, errMsg, ioExc);\n      }\n      \n      if (text == null || text.trim().length() == 0) {\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Empty request body!\");      \n      }\n\n      Object parsedJson = null;\n      try {\n        parsedJson = fromJSONString(text);\n      } catch (Exception ioExc) {\n        String errMsg = String.format(Locale.ROOT,\n            \"Failed to parse request [%s] into JSON due to: %s\",\n            text, ioExc.toString());\n        log.error(errMsg, ioExc);\n        throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, errMsg, ioExc);\n      }\n      return parsedJson;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b7196d371f022e3c5c078c58aee21f1c246ce23":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["0b7196d371f022e3c5c078c58aee21f1c246ce23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["0b7196d371f022e3c5c078c58aee21f1c246ce23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"0b7196d371f022e3c5c078c58aee21f1c246ce23":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}