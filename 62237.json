{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","commits":[{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCountsForRepFactorAndNrtReplicas(CloudSolrClient client, String collectionName) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n    params.set(\"collection\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> rsp = client.request(request);\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n    assertNotNull(\"Collections should not be null in cluster state\", collections);\n    assertEquals(1, collections.size());\n    Map<String, Object> collection = (Map<String, Object>) collections.get(collectionName);\n    assertNotNull(collection);\n    assertEquals(collection.get(\"replicationFactor\"), collection.get(\"nrtReplicas\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCountsForRepFactorAndNrtReplicas(CloudSolrClient client, String collectionName) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n    params.set(\"collection\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> rsp = client.request(request);\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n    assertNotNull(\"Collections should not be null in cluster state\", collections);\n    assertEquals(1, collections.size());\n    Map<String, Object> collection = (Map<String, Object>) collections.get(collectionName);\n    assertNotNull(collection);\n    assertEquals(collection.get(\"replicationFactor\"), collection.get(\"nrtReplicas\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCountsForRepFactorAndNrtReplicas(CloudSolrClient client, String collectionName) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n    params.set(\"collection\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> rsp = client.request(request);\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n    assertNotNull(\"Collections should not be null in cluster state\", collections);\n    assertEquals(1, collections.size());\n    Map<String, Object> collection = (Map<String, Object>) collections.get(collectionName);\n    assertNotNull(collection);\n    assertEquals(collection.get(\"replicationFactor\"), collection.get(\"nrtReplicas\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#assertCountsForRepFactorAndNrtReplicas(CloudSolrClient,String).mjava","sourceNew":"  private void assertCountsForRepFactorAndNrtReplicas(CloudSolrClient client, String collectionName) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n    params.set(\"collection\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> rsp = client.request(request);\n    @SuppressWarnings({\"unchecked\"})\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    @SuppressWarnings({\"unchecked\"})\n    NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n    assertNotNull(\"Collections should not be null in cluster state\", collections);\n    assertEquals(1, collections.size());\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> collection = (Map<String, Object>) collections.get(collectionName);\n    assertNotNull(collection);\n    assertEquals(collection.get(\"replicationFactor\"), collection.get(\"nrtReplicas\"));\n  }\n\n","sourceOld":"  private void assertCountsForRepFactorAndNrtReplicas(CloudSolrClient client, String collectionName) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n    params.set(\"collection\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    NamedList<Object> rsp = client.request(request);\n    NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n    assertNotNull(\"Cluster state should not be null\", cluster);\n    NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n    assertNotNull(\"Collections should not be null in cluster state\", collections);\n    assertEquals(1, collections.size());\n    Map<String, Object> collection = (Map<String, Object>) collections.get(collectionName);\n    assertNotNull(collection);\n    assertEquals(collection.get(\"replicationFactor\"), collection.get(\"nrtReplicas\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","397b96a886ece05a1444aa3771e10825e1145c1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["397b96a886ece05a1444aa3771e10825e1145c1f"],"397b96a886ece05a1444aa3771e10825e1145c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","397b96a886ece05a1444aa3771e10825e1145c1f"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"397b96a886ece05a1444aa3771e10825e1145c1f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","aa2585c33d5d66a1c837c312221eb55ddb3c4300","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","397b96a886ece05a1444aa3771e10825e1145c1f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}