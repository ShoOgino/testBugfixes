{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getLoadedCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getLoadedCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fce6f9eb4992b8391c7bcbcc4d31c50ed86db57d","date":1508308139,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrShardReporterTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getLoadedCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = Utils.parseMetricsReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(\"control_collection\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    waitForRecoveriesToFinish(\"collection1\",\n        jettys.get(0).getCoreContainer().getZkController().getZkStateReader(), false);\n    printLayout();\n    // wait for at least two reports\n    Thread.sleep(10000);\n    ClusterState state = jettys.get(0).getCoreContainer().getZkController().getClusterState();\n    for (JettySolrRunner jetty : jettys) {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      for (final String coreName : cc.getLoadedCoreNames()) {\n        CoreDescriptor cd = cc.getCoreDescriptor(coreName);\n        if (cd.getCloudDescriptor() == null) { // not a cloud collection\n          continue;\n        }\n        CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n        DocCollection docCollection = state.getCollection(cloudDesc.getCollectionName());\n        String replicaName = SolrCoreMetricManager.parseReplicaName(cloudDesc.getCollectionName(), coreName);\n        if (replicaName == null) {\n          replicaName = cloudDesc.getCoreNodeName();\n        }\n        String registryName = SolrCoreMetricManager.createRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId(), replicaName, null);\n        String leaderRegistryName = SolrCoreMetricManager.createLeaderRegistryName(true,\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n        boolean leader = cloudDesc.isLeader();\n        Slice slice = docCollection.getSlice(cloudDesc.getShardId());\n        int numReplicas = slice.getReplicas().size();\n        if (leader) {\n          assertTrue(metricManager.registryNames() + \" doesn't contain \" + leaderRegistryName,\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), numReplicas, am.size());\n            }\n          });\n        } else {\n          assertFalse(metricManager.registryNames() + \" contains \" + leaderRegistryName +\n              \" but it's not a leader!\",\n              metricManager.registryNames().contains(leaderRegistryName));\n          Map<String, Metric> metrics = metricManager.registry(leaderRegistryName).getMetrics();\n          metrics.forEach((k, v) -> {\n            assertTrue(\"Unexpected type of \" + k + \": \" + v.getClass().getName() + \", \" + v,\n                v instanceof AggregateMetric);\n            AggregateMetric am = (AggregateMetric)v;\n            if (!k.startsWith(\"REPLICATION.peerSync\")) {\n              assertEquals(coreName + \"::\" + registryName + \"::\" + k + \": \" + am.toString(), 1, am.size());\n            }\n          });\n        }\n        assertTrue(metricManager.registryNames() + \" doesn't contain \" + registryName,\n            metricManager.registryNames().contains(registryName));\n      }\n    }\n    SolrMetricManager metricManager = controlJetty.getCoreContainer().getMetricManager();\n    assertTrue(metricManager.registryNames().contains(\"solr.cluster\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"fce6f9eb4992b8391c7bcbcc4d31c50ed86db57d":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fce6f9eb4992b8391c7bcbcc4d31c50ed86db57d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"fce6f9eb4992b8391c7bcbcc4d31c50ed86db57d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["fce6f9eb4992b8391c7bcbcc4d31c50ed86db57d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}