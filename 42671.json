{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","commits":[{"id":"e633e75d4ea3f5819388fd102b6c54f185e72ec2","date":1418639529,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","pathOld":"/dev/null","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"585c9a5b762b90e436f9d58fef23fd68f97d4a9f","date":1418639793,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, 1 + expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], 1 + actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\"))));\n      queries[i].setBoost(random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      actualCounts.put(queries[idx], 1 + actualCounts.getOrDefault(queries[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, 1 + expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], 1 + actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","sourceNew":null,"sourceOld":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, 1 + expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], 1 + actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["585c9a5b762b90e436f9d58fef23fd68f97d4a9f","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["585c9a5b762b90e436f9d58fef23fd68f97d4a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"585c9a5b762b90e436f9d58fef23fd68f97d4a9f":["e633e75d4ea3f5819388fd102b6c54f185e72ec2"],"e633e75d4ea3f5819388fd102b6c54f185e72ec2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e633e75d4ea3f5819388fd102b6c54f185e72ec2"],"585c9a5b762b90e436f9d58fef23fd68f97d4a9f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e633e75d4ea3f5819388fd102b6c54f185e72ec2":["585c9a5b762b90e436f9d58fef23fd68f97d4a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}