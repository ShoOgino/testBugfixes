{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"871f13bf1a6255d5315451355f9fd2ebdd84e740","date":1316056877,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.reusableTokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.reusableTokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.reusableTokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.reusableTokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd","c83d6c4335f31cae14f625a222bc842f20073dcd","c83d6c4335f31cae14f625a222bc842f20073dcd","c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf7efd82433f3f64684711c16edfd149db6af111":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["cf7efd82433f3f64684711c16edfd149db6af111"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}