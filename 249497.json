{"path":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","commits":[{"id":"f0c7cf7c5321e0d685b7ac1fce06922d12b16203","date":1094419649,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTimeInMillis(time);\n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c207f4dd27c1ea23adc2a2c92fe287c68c908c","date":1100644074,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n\n    // protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(time);\n    \n    cal.setTime(new Date(time));\n    \n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTimeInMillis(time);\n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0","date":1139163422,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    // protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(time);\n    \n    cal.setTime(new Date(time));\n    \n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n\n    // protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(time);\n    \n    cal.setTime(new Date(time));\n    \n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","bugFix":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea5e8d049564c69ae93ebb291c320fb586c02733","date":1243512095,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    // protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(time);\n    \n    cal.setTime(new Date(time));\n    \n    if (resolution == Resolution.YEAR) {\n      cal.set(Calendar.MONTH, 0);\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      cal.set(Calendar.DAY_OF_MONTH, 1);\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      cal.set(Calendar.MINUTE, 0);\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      cal.set(Calendar.SECOND, 0);\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      cal.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return cal.getTime().getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":null,"sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0c7cf7c5321e0d685b7ac1fce06922d12b16203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea5e8d049564c69ae93ebb291c320fb586c02733":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c207f4dd27c1ea23adc2a2c92fe287c68c908c":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ea5e8d049564c69ae93ebb291c320fb586c02733"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["11c207f4dd27c1ea23adc2a2c92fe287c68c908c"]},"commit2Childs":{"f0c7cf7c5321e0d685b7ac1fce06922d12b16203":["11c207f4dd27c1ea23adc2a2c92fe287c68c908c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"ea5e8d049564c69ae93ebb291c320fb586c02733":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"11c207f4dd27c1ea23adc2a2c92fe287c68c908c":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["ea5e8d049564c69ae93ebb291c320fb586c02733"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}