{"path":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\" + field + \"\\\"\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n\t\t} else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb0a33df60fa7347461fa05bb738d285e17ca2","2275c46fba03d235b53596f1b08c77ad11a24459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n\n        // an entry for documents that have no terms in this field\n        // should a document with no terms be at top or bottom?\n        // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n        // needs to change as well.\n        mterms[t++] = null;\n\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\" + field + \"\\\"\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n        } else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\" + field + \"\\\"\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n\t\t} else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","bugFix":null,"bugIntro":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15ad8b219e0d5694f099c5bae41d1248dfb93b56","date":1115059428,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n\n        // an entry for documents that have no terms in this field\n        // should a document with no terms be at top or bottom?\n        // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n        // needs to change as well.\n        mterms[t++] = null;\n\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n            \t\t\"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n            \t\t\"tokenized fields\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n        } else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n\n        // an entry for documents that have no terms in this field\n        // should a document with no terms be at top or bottom?\n        // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n        // needs to change as well.\n        mterms[t++] = null;\n\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\" + field + \"\\\"\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n        } else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","bugFix":null,"bugIntro":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb0a33df60fa7347461fa05bb738d285e17ca2","date":1139867173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      int t = 0;  // current term number\n\n      // an entry for documents that have no terms in this field\n      // should a document with no terms be at top or bottom?\n      // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n      // needs to change as well.\n      mterms[t++] = null;\n\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n\n          // store term text\n          // we expect that there is at most one term per document\n          if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n                  \"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n                  \"tokenized fields\");\n          mterms[t] = term.text();\n\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = t;\n          }\n\n          t++;\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n\n      if (t == 0) {\n        // if there are no terms, make the term array\n        // have a single null entry\n        mterms = new String[1];\n      } else if (t < mterms.length) {\n        // if there are less terms than documents,\n        // trim off the dead array space\n        String[] terms = new String[t];\n        System.arraycopy (mterms, 0, terms, 0, t);\n        mterms = terms;\n      }\n\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      if (retArray.length > 0) {\n        TermDocs termDocs = reader.termDocs();\n        TermEnum termEnum = reader.terms (new Term (field, \"\"));\n        int t = 0;  // current term number\n\n        // an entry for documents that have no terms in this field\n        // should a document with no terms be at top or bottom?\n        // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n        // needs to change as well.\n        mterms[t++] = null;\n\n        try {\n          if (termEnum.term() == null) {\n            throw new RuntimeException (\"no terms in field \" + field);\n          }\n          do {\n            Term term = termEnum.term();\n            if (term.field() != field) break;\n\n            // store term text\n            // we expect that there is at most one term per document\n            if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n            \t\t\"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n            \t\t\"tokenized fields\");\n            mterms[t] = term.text();\n\n            termDocs.seek (termEnum);\n            while (termDocs.next()) {\n              retArray[termDocs.doc()] = t;\n            }\n\n            t++;\n          } while (termEnum.next());\n        } finally {\n          termDocs.close();\n          termEnum.close();\n        }\n\n        if (t == 0) {\n          // if there are no terms, make the term array\n          // have a single null entry\n          mterms = new String[1];\n        } else if (t < mterms.length) {\n          // if there are less terms than documents,\n          // trim off the dead array space\n          String[] terms = new String[t];\n          System.arraycopy (mterms, 0, terms, 0, t);\n          mterms = terms;\n        }\n      }\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","bugFix":["ba534479820dee396d07f520ba2a55400a1b6e7d","99ee715b9c02dd47d9e69a18607a5192c1ebd82b","15ad8b219e0d5694f099c5bae41d1248dfb93b56"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2275c46fba03d235b53596f1b08c77ad11a24459","date":1144296129,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX, null);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      int t = 0;  // current term number\n\n      // an entry for documents that have no terms in this field\n      // should a document with no terms be at top or bottom?\n      // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n      // needs to change as well.\n      mterms[t++] = null;\n\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n\n          // store term text\n          // we expect that there is at most one term per document\n          if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n                  \"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n                  \"tokenized fields\");\n          mterms[t] = term.text();\n\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = t;\n          }\n\n          t++;\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n\n      if (t == 0) {\n        // if there are no terms, make the term array\n        // have a single null entry\n        mterms = new String[1];\n      } else if (t < mterms.length) {\n        // if there are less terms than documents,\n        // trim off the dead array space\n        String[] terms = new String[t];\n        System.arraycopy (mterms, 0, terms, 0, t);\n        mterms = terms;\n      }\n\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, null, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      int t = 0;  // current term number\n\n      // an entry for documents that have no terms in this field\n      // should a document with no terms be at top or bottom?\n      // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n      // needs to change as well.\n      mterms[t++] = null;\n\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n\n          // store term text\n          // we expect that there is at most one term per document\n          if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n                  \"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n                  \"tokenized fields\");\n          mterms[t] = term.text();\n\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = t;\n          }\n\n          t++;\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n\n      if (t == 0) {\n        // if there are no terms, make the term array\n        // have a single null entry\n        mterms = new String[1];\n      } else if (t < mterms.length) {\n        // if there are less terms than documents,\n        // trim off the dead array space\n        String[] terms = new String[t];\n        System.arraycopy (mterms, 0, terms, 0, t);\n        mterms = terms;\n      }\n\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4e7cc130365302adc717b9353553a80f892b73","date":1164006604,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) stringsIndexCache.get(reader, field);\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, STRING_INDEX, null);\n    if (ret == null) {\n      final int[] retArray = new int[reader.maxDoc()];\n      String[] mterms = new String[reader.maxDoc()+1];\n      TermDocs termDocs = reader.termDocs();\n      TermEnum termEnum = reader.terms (new Term (field, \"\"));\n      int t = 0;  // current term number\n\n      // an entry for documents that have no terms in this field\n      // should a document with no terms be at top or bottom?\n      // this puts them at the top - if it is changed, FieldDocSortedHitQueue\n      // needs to change as well.\n      mterms[t++] = null;\n\n      try {\n        do {\n          Term term = termEnum.term();\n          if (term==null || term.field() != field) break;\n\n          // store term text\n          // we expect that there is at most one term per document\n          if (t >= mterms.length) throw new RuntimeException (\"there are more terms than \" +\n                  \"documents in field \\\"\" + field + \"\\\", but it's impossible to sort on \" +\n                  \"tokenized fields\");\n          mterms[t] = term.text();\n\n          termDocs.seek (termEnum);\n          while (termDocs.next()) {\n            retArray[termDocs.doc()] = t;\n          }\n\n          t++;\n        } while (termEnum.next());\n      } finally {\n        termDocs.close();\n        termEnum.close();\n      }\n\n      if (t == 0) {\n        // if there are no terms, make the term array\n        // have a single null entry\n        mterms = new String[1];\n      } else if (t < mterms.length) {\n        // if there are less terms than documents,\n        // trim off the dead array space\n        String[] terms = new String[t];\n        System.arraycopy (mterms, 0, terms, 0, t);\n        mterms = terms;\n      }\n\n      StringIndex value = new StringIndex (retArray, mterms);\n      store (reader, field, STRING_INDEX, null, value);\n      return value;\n    }\n    return (StringIndex) ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) ((Cache)caches.get(StringIndex.class)).get(reader, new Entry(field, (Parser)null));\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) stringsIndexCache.get(reader, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce","date":1255993146,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) caches.get(StringIndex.class).get(reader, new Entry(field, (Parser)null));\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) ((Cache)caches.get(StringIndex.class)).get(reader, new Entry(field, (Parser)null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getStringIndex(IndexReader,String).mjava","sourceNew":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) caches.get(StringIndex.class).get(reader, new Entry(field, (Parser)null));\n  }\n\n","sourceOld":"  // inherit javadocs\n  public StringIndex getStringIndex(IndexReader reader, String field)\n      throws IOException {\n    return (StringIndex) caches.get(StringIndex.class).get(reader, new Entry(field, (Parser)null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb0a33df60fa7347461fa05bb738d285e17ca2":["15ad8b219e0d5694f099c5bae41d1248dfb93b56"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69f59b863731d864bf3047235e718f0f88f8841":["4e4e7cc130365302adc717b9353553a80f892b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15ad8b219e0d5694f099c5bae41d1248dfb93b56":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"4e4e7cc130365302adc717b9353553a80f892b73":["2275c46fba03d235b53596f1b08c77ad11a24459"],"2275c46fba03d235b53596f1b08c77ad11a24459":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"0bdb0a33df60fa7347461fa05bb738d285e17ca2":["2275c46fba03d235b53596f1b08c77ad11a24459"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"e69f59b863731d864bf3047235e718f0f88f8841":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"15ad8b219e0d5694f099c5bae41d1248dfb93b56":["0bdb0a33df60fa7347461fa05bb738d285e17ca2"],"4e4e7cc130365302adc717b9353553a80f892b73":["e69f59b863731d864bf3047235e718f0f88f8841"],"2275c46fba03d235b53596f1b08c77ad11a24459":["4e4e7cc130365302adc717b9353553a80f892b73"],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["15ad8b219e0d5694f099c5bae41d1248dfb93b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}