{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae0bbf5dfabb3daa76f77f636f38310a28de18a","date":1456970732,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e697e346b573b1b58353f45be00090a4f2de91e7","date":1457002125,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  @SuppressWarnings(\"deprecation\")\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  @SuppressWarnings(\"deprecation\")\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code zScaling/(d + zScaling)} where 'd' is the distance and 'zScaling' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code zScaling/(d + zScaling)} where 'd' is the distance and 'zScaling' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.getShapeFactory().pointXY(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double)}.\n   * The formula is {@code zScaling/(d + zScaling)} where 'd' is the distance and 'zScaling' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);\n    return new ReciprocalDoubleValuesSource(c, distance);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["112d77ac8d3e10a362516ad834c9a11d35c94234"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["28288370235ed02234a64753cdbf0c6ec096304a"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"28288370235ed02234a64753cdbf0c6ec096304a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e697e346b573b1b58353f45be00090a4f2de91e7":["112d77ac8d3e10a362516ad834c9a11d35c94234","bae0bbf5dfabb3daa76f77f636f38310a28de18a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","e697e346b573b1b58353f45be00090a4f2de91e7"],"98f11c416d30e556e0004a9a84960702d12d35b1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["e697e346b573b1b58353f45be00090a4f2de91e7"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653","bae0bbf5dfabb3daa76f77f636f38310a28de18a","e697e346b573b1b58353f45be00090a4f2de91e7"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e697e346b573b1b58353f45be00090a4f2de91e7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["28288370235ed02234a64753cdbf0c6ec096304a","32b9119890a8e82252b6cc341ac491d18fa1e49b","98f11c416d30e556e0004a9a84960702d12d35b1"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}