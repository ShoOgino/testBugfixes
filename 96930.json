{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a8e025574cd499fd0cc9e303c80c10c4229ca07","date":1457728551,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n      del(\"*:*\");\n      commit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  private void testTopicStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      commit();\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      indexr(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n      indexr(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n      commit();\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        commit();\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        commit();\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        indexr(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        commit(); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        indexr(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\");\n        indexr(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\");\n        commit();\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      del(\"*:*\");\n      commit();\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTopicStream().mjava","sourceNew":"  @Test\n  public void testTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTopicStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    SolrClientCache cache = new SolrClientCache();\n\n    try {\n      //Store checkpoints in the same index as the main documents. This perfectly valid\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, q=\\\"a_s:hello\\\", fl=\\\"id\\\", id=\\\"1000000\\\", checkpointEvery=3)\");\n\n      stream = factory.constructStream(expression);\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      //Should be zero because the checkpoints will be set to the highest vesion on the shards.\n      assertEquals(tuples.size(), 0);\n\n      cluster.getSolrClient().commit(\"collection1\");\n      //Now check to see if the checkpoints are present\n\n              expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n              stream = factory.constructStream(expression);\n              context = new StreamContext();\n              context.setSolrClientCache(cache);\n              stream.setStreamContext(context);\n              tuples = getTuples(stream);\n              assertEquals(tuples.size(), 1);\n              List<String> checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n              assertEquals(checkpoints.size(), 2);\n              Long version1 = tuples.get(0).getLong(\"_version_\");\n\n      //Index a few more documents\n      new UpdateRequest()\n          .add(id, \"10\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n          .add(id, \"11\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n          .commit(cluster.getSolrClient(), COLLECTION);\n\n      expression = StreamExpressionParser.parse(\"topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2)\");\n\n      stream = factory.constructStream(expression);\n      context = new StreamContext();\n      context.setSolrClientCache(cache);\n      stream.setStreamContext(context);\n\n      try {\n        stream.open();\n        Tuple tuple1 = stream.read();\n        assertEquals((long) tuple1.getLong(\"id\"), 10l);\n        cluster.getSolrClient().commit(\"collection1\");\n\n                // Checkpoint should not have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                TupleStream cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version2 = tuples.get(0).getLong(\"_version_\");\n                assertEquals(version1, version2);\n\n        Tuple tuple2 = stream.read();\n        cluster.getSolrClient().commit(\"collection1\");\n        assertEquals((long) tuple2.getLong(\"id\"), 11l);\n\n                //Checkpoint should have changed.\n                expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:1000000\\\", fl=\\\"id, checkpoint_ss, _version_\\\", sort=\\\"id asc\\\")\");\n                cstream = factory.constructStream(expression);\n                context = new StreamContext();\n                context.setSolrClientCache(cache);\n                cstream.setStreamContext(context);\n                tuples = getTuples(cstream);\n\n                assertEquals(tuples.size(), 1);\n                checkpoints = tuples.get(0).getStrings(\"checkpoint_ss\");\n                assertEquals(checkpoints.size(), 2);\n                Long version3 = tuples.get(0).getLong(\"_version_\");\n                assertTrue(version3 > version2);\n\n        Tuple tuple3 = stream.read();\n        assertTrue(tuple3.EOF);\n      } finally {\n        stream.close();\n      }\n\n      //Test with the DaemonStream\n\n      DaemonStream dstream = null;\n      try {\n        expression = StreamExpressionParser.parse(\"daemon(topic(collection1, collection1, fl=\\\"id\\\", q=\\\"a_s:hello\\\", id=\\\"1000000\\\", checkpointEvery=2), id=\\\"test\\\", runInterval=\\\"1000\\\", queueSize=\\\"9\\\")\");\n        dstream = (DaemonStream) factory.constructStream(expression);\n        context = new StreamContext();\n        context.setSolrClientCache(cache);\n        dstream.setStreamContext(context);\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"12\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"13\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Start reading from the DaemonStream\n        Tuple tuple = null;\n\n        dstream.open();\n        tuple = dstream.read();\n        assertEquals(12, (long) tuple.getLong(id));\n        tuple = dstream.read();\n        assertEquals(13, (long) tuple.getLong(id));\n        cluster.getSolrClient().commit(\"collection1\"); // We want to see if the version has been updated after reading two tuples\n\n        //Index a few more documents\n        new UpdateRequest()\n            .add(id, \"14\", \"a_s\", \"hello\", \"a_i\", \"13\", \"a_f\", \"9\")\n            .add(id, \"15\", \"a_s\", \"hello\", \"a_i\", \"14\", \"a_f\", \"10\")\n            .commit(cluster.getSolrClient(), COLLECTION);\n\n        //Read from the same DaemonStream stream\n\n        tuple = dstream.read();\n        assertEquals(14, (long) tuple.getLong(id));\n        tuple = dstream.read(); // This should trigger a checkpoint as it's the 4th read from the stream.\n        assertEquals(15, (long) tuple.getLong(id));\n\n        dstream.shutdown();\n        tuple = dstream.read();\n        assertTrue(tuple.EOF);\n      } finally {\n        dstream.close();\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["575856a9f007b9c35d0113c9e18151b554709ef2","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["575856a9f007b9c35d0113c9e18151b554709ef2","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["575856a9f007b9c35d0113c9e18151b554709ef2","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"575856a9f007b9c35d0113c9e18151b554709ef2":["10b9c6c42133576daaccbd79bd04c88511b9caca","9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"9a8e025574cd499fd0cc9e303c80c10c4229ca07":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"b940572a59da1b42b6c20ab5278155b12816807a":["575856a9f007b9c35d0113c9e18151b554709ef2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["575856a9f007b9c35d0113c9e18151b554709ef2","9a8e025574cd499fd0cc9e303c80c10c4229ca07"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"575856a9f007b9c35d0113c9e18151b554709ef2":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"9a8e025574cd499fd0cc9e303c80c10c4229ca07":["575856a9f007b9c35d0113c9e18151b554709ef2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}