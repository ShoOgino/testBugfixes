{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/Geo3DUtil#fromPolygon(Polygon).mjava","commits":[{"id":"2cf5416daa86f8b76735f3f885d396a70943f9be","date":1501795780,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/Geo3DUtil#fromPolygon(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      final int index = polyLats.length - 2 - i;\n      points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/Geo3DUtil#fromPolygon(Polygon).mjava","pathOld":"/dev/null","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      final int index = polyLats.length - 2 - i;\n      points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/Geo3DUtil#fromPolygon(Polygon).mjava","sourceNew":null,"sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      final int index = polyLats.length - 2 - i;\n      points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2cf5416daa86f8b76735f3f885d396a70943f9be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2cf5416daa86f8b76735f3f885d396a70943f9be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["2cf5416daa86f8b76735f3f885d396a70943f9be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"2cf5416daa86f8b76735f3f885d396a70943f9be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2cf5416daa86f8b76735f3f885d396a70943f9be","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}