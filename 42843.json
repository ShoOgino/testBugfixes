{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26f751079329fb2139e415fb8971781aabcc8866","date":1415114472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      Set<ObjectName> objectNames = server.queryNames(null, exp);\n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.error(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      for (Map.Entry<String, SolrInfoMBean> entry : entrySet()) {\n        unregister(entry.getKey(), entry.getValue());\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"bugIntro":["8832ed8066a0349768bcf090ad91b2c3f2e8f484"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8832ed8066a0349768bcf090ad91b2c3f2e8f484","date":1423703601,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      Set<ObjectName> objectNames = server.queryNames(null, exp);\n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.error(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":["26f751079329fb2139e415fb8971781aabcc8866"],"bugIntro":["49da5637e78fa876c3db72e3d0fda7291d9830f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49da5637e78fa876c3db72e3d0fda7291d9830f7","date":1445157173,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":["8832ed8066a0349768bcf090ad91b2c3f2e8f484"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        LOG.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            LOG.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        ObjectName instance = new ObjectName(jmxRootName + \":*\");\n        objectNames = server.queryNames(instance, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (InstanceNotFoundException ie) {\n            // ignore - someone else already deleted this one\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (InstanceNotFoundException ie) {\n            // ignore - someone else already deleted this one\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#clear().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clears the map and unregisters all SolrInfoMBeans in the map from\n   * MBeanServer\n   */\n  @Override\n  public void clear() {\n    if (server != null) {\n      QueryExp exp = Query.or(Query.eq(Query.attr(\"coreHashCode\"), Query.value(coreHashCode)),\n                            Query.eq(Query.attr(\"reporter\"), Query.value(REPORTER_NAME + coreHashCode)));\n      \n      Set<ObjectName> objectNames = null;\n      try {\n        objectNames = server.queryNames(null, exp);\n      } catch (Exception e) {\n        log.warn(\"Exception querying for mbeans\", e);\n      }\n      \n      if (objectNames != null)  {\n        for (ObjectName name : objectNames) {\n          try {\n            server.unregisterMBean(name);\n          } catch (InstanceNotFoundException ie) {\n            // ignore - someone else already deleted this one\n          } catch (Exception e) {\n            log.warn(\"Exception un-registering mbean {}\", name, e);\n          }\n        }\n      }\n    }\n\n    super.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8832ed8066a0349768bcf090ad91b2c3f2e8f484":["26f751079329fb2139e415fb8971781aabcc8866"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"26f751079329fb2139e415fb8971781aabcc8866":["c26f00b574427b55127e869b935845554afde1fa"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["49da5637e78fa876c3db72e3d0fda7291d9830f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["49da5637e78fa876c3db72e3d0fda7291d9830f7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["49da5637e78fa876c3db72e3d0fda7291d9830f7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["49da5637e78fa876c3db72e3d0fda7291d9830f7","126d6ad24eed13163ba0959435d5a80e5672837c"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49da5637e78fa876c3db72e3d0fda7291d9830f7":["8832ed8066a0349768bcf090ad91b2c3f2e8f484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"8832ed8066a0349768bcf090ad91b2c3f2e8f484":["49da5637e78fa876c3db72e3d0fda7291d9830f7"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"c26f00b574427b55127e869b935845554afde1fa":["26f751079329fb2139e415fb8971781aabcc8866"],"26f751079329fb2139e415fb8971781aabcc8866":["8832ed8066a0349768bcf090ad91b2c3f2e8f484"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"49da5637e78fa876c3db72e3d0fda7291d9830f7":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}