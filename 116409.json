{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":null,"sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":null,"sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}