{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    @SuppressWarnings({\"rawtypes\"})\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    @SuppressWarnings({\"rawtypes\"})\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = getContext(null,\n        new VariableResolver(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["024e13388acbf5562fcbb77a129620982a5e2d79"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}