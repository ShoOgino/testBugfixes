{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ff0aa05c1ae214397beec2eae8ce7b214dd4c4","date":1496825484,"type":3,"author":"jpgilaberte","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(WIKIPEDIA, \"bogusArg\", \"bogusValue\").create(newAttributeFactory());\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(WIKIPEDIA, \"bogusArg\", \"bogusValue\").create(newAttributeFactory());\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(WIKIPEDIA, \"bogusArg\", \"bogusValue\").create(newAttributeFactory());\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/TestWikipediaTokenizerFactory#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(WIKIPEDIA, \"bogusArg\", \"bogusValue\").create(newAttributeFactory());\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"Wikipedia\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9ff0aa05c1ae214397beec2eae8ce7b214dd4c4":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["05fe562aa248790944d43cdd478f512572835ba0","a9ff0aa05c1ae214397beec2eae8ce7b214dd4c4"],"28288370235ed02234a64753cdbf0c6ec096304a":["05fe562aa248790944d43cdd478f512572835ba0","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["05fe562aa248790944d43cdd478f512572835ba0","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a9ff0aa05c1ae214397beec2eae8ce7b214dd4c4":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"05fe562aa248790944d43cdd478f512572835ba0":["a9ff0aa05c1ae214397beec2eae8ce7b214dd4c4","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["05fe562aa248790944d43cdd478f512572835ba0"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}