{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructSortCriteria(List[AnalyticsSortCriteriaRequest],Map[String,AnalyticsExpression]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructSortCriteria(List[AnalyticsSortCriteriaRequest],Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  private static FacetResultsComparator constructSortCriteria(List<AnalyticsSortCriteriaRequest> criteria, Map<String, AnalyticsExpression> expressions) {\n    ArrayList<FacetResultsComparator> comparators = new ArrayList<>();\n    for (AnalyticsSortCriteriaRequest criterion : criteria) {\n      FacetResultsComparator comparator;\n      if (criterion instanceof AnalyticsExpressionSortRequest) {\n        comparator = constructExpressionSortCriteria((AnalyticsExpressionSortRequest) criterion, expressions);\n      } else if (criterion instanceof AnalyticsFacetValueSortRequest) {\n        comparator = constructFacetValueSortCriteria((AnalyticsFacetValueSortRequest) criterion);\n      } else {\n        // Shouldn't happen\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort Criteria must either be expressions or facetValues, '\" + criterion.getClass().getName() + \"' given.\");\n      }\n      if (criterion.direction != null && criterion.direction.length() > 0) {\n        if (sortAscending.test(criterion.direction)) {\n          comparator.setDirection(true);\n        } else if (sortDescending.test(criterion.direction)) {\n          comparator.setDirection(false);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort direction '\" + criterion.direction + \" is not a recognized direction.\");\n        }\n      }\n      comparators.add(comparator);\n    }\n    return DelegatingComparator.joinComparators(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructSortCriteria(List[AnalyticsSortCriteriaRequest],Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  private static FacetResultsComparator constructSortCriteria(List<AnalyticsSortCriteriaRequest> criteria, Map<String, AnalyticsExpression> expressions) {\n    ArrayList<FacetResultsComparator> comparators = new ArrayList<>();\n    for (AnalyticsSortCriteriaRequest criterion : criteria) {\n      FacetResultsComparator comparator;\n      if (criterion instanceof AnalyticsExpressionSortRequest) {\n        comparator = constructExpressionSortCriteria((AnalyticsExpressionSortRequest) criterion, expressions);\n      } else if (criterion instanceof AnalyticsFacetValueSortRequest) {\n        comparator = constructFacetValueSortCriteria((AnalyticsFacetValueSortRequest) criterion);\n      } else {\n        // Shouldn't happen\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort Criteria must either be expressions or facetValues, '\" + criterion.getClass().getName() + \"' given.\");\n      }\n      if (criterion.direction != null && criterion.direction.length() > 0) {\n        if (sortAscending.test(criterion.direction)) {\n          comparator.setDirection(true);\n        } else if (sortDescending.test(criterion.direction)) {\n          comparator.setDirection(false);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort direction '\" + criterion.direction + \" is not a recognized direction.\");\n        }\n      }\n      comparators.add(comparator);\n    }\n    return DelegatingComparator.joinComparators(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructSortCriteria(List[AnalyticsSortCriteriaRequest],Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  private static FacetResultsComparator constructSortCriteria(List<AnalyticsSortCriteriaRequest> criteria, Map<String, AnalyticsExpression> expressions) {\n    ArrayList<FacetResultsComparator> comparators = new ArrayList<>();\n    for (AnalyticsSortCriteriaRequest criterion : criteria) {\n      FacetResultsComparator comparator;\n      if (criterion instanceof AnalyticsExpressionSortRequest) {\n        comparator = constructExpressionSortCriteria((AnalyticsExpressionSortRequest) criterion, expressions);\n      } else if (criterion instanceof AnalyticsFacetValueSortRequest) {\n        comparator = constructFacetValueSortCriteria((AnalyticsFacetValueSortRequest) criterion);\n      } else {\n        // Shouldn't happen\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort Criteria must either be expressions or facetValues, '\" + criterion.getClass().getName() + \"' given.\");\n      }\n      if (criterion.direction != null && criterion.direction.length() > 0) {\n        if (sortAscending.test(criterion.direction)) {\n          comparator.setDirection(true);\n        } else if (sortDescending.test(criterion.direction)) {\n          comparator.setDirection(false);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Sort direction '\" + criterion.direction + \" is not a recognized direction.\");\n        }\n      }\n      comparators.add(comparator);\n    }\n    return DelegatingComparator.joinComparators(comparators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}