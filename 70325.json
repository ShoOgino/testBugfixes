{"path":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","commits":[{"id":"05f4c28bc6a6df30868753f35eb802cbff28ce5c","date":1469068146,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"    Box(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        this.min[d] = Math.min(min[d], max[d]);\n        this.max[d] = Math.max(min[d], max[d]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c738d774d160362ecfdc9887a5fa4beb421872b","date":1469112991,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"    Box(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        this.min[d] = Math.min(min[d], max[d]);\n        this.max[d] = Math.max(min[d], max[d]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7825da0fed0bd08a466fec72f7c6a18a2abb303d","date":1471466888,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries.DoubleRange#DoubleRange(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","sourceNew":"    DoubleRange(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        if (min[d] > max[d]) {\n          // swap if max < min:\n          double temp = min[d];\n          min[d] = max[d];\n          max[d] = temp;\n        }\n      }\n    }\n\n","sourceOld":"    Box(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        this.min[d] = Math.min(min[d], max[d]);\n        this.max[d] = Math.max(min[d], max[d]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries.DoubleRange#DoubleRange(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","sourceNew":"    DoubleRange(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        if (min[d] > max[d]) {\n          // swap if max < min:\n          double temp = min[d];\n          min[d] = max[d];\n          max[d] = temp;\n        }\n      }\n    }\n\n","sourceOld":"    Box(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        this.min[d] = Math.min(min[d], max[d]);\n        this.max[d] = Math.max(min[d], max[d]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries.DoubleRange#DoubleRange(double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase.Box#Box(double[],double[]).mjava","sourceNew":"    DoubleRange(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        if (min[d] > max[d]) {\n          // swap if max < min:\n          double temp = min[d];\n          min[d] = max[d];\n          max[d] = temp;\n        }\n      }\n    }\n\n","sourceOld":"    Box(double[] min, double[] max) {\n      assert min != null && max != null && min.length > 0 && max.length > 0\n          : \"test box: min/max cannot be null or empty\";\n      assert min.length == max.length : \"test box: min/max length do not agree\";\n      this.min = new double[min.length];\n      this.max = new double[max.length];\n      for (int d=0; d<min.length; ++d) {\n        this.min[d] = Math.min(min[d], max[d]);\n        this.max[d] = Math.max(min[d], max[d]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c738d774d160362ecfdc9887a5fa4beb421872b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","05f4c28bc6a6df30868753f35eb802cbff28ce5c"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["3c738d774d160362ecfdc9887a5fa4beb421872b","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["3c738d774d160362ecfdc9887a5fa4beb421872b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05f4c28bc6a6df30868753f35eb802cbff28ce5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["3c738d774d160362ecfdc9887a5fa4beb421872b","7825da0fed0bd08a466fec72f7c6a18a2abb303d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"3c738d774d160362ecfdc9887a5fa4beb421872b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","7825da0fed0bd08a466fec72f7c6a18a2abb303d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c738d774d160362ecfdc9887a5fa4beb421872b","05f4c28bc6a6df30868753f35eb802cbff28ce5c"],"05f4c28bc6a6df30868753f35eb802cbff28ce5c":["3c738d774d160362ecfdc9887a5fa4beb421872b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}