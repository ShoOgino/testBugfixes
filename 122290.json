{"path":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","commits":[{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // We are already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    f = new RandomAccessFile(path, \"rw\");\n    try {\n      channel = f.getChannel();\n      try {\n        try {\n          lock = channel.tryLock();\n        } catch (IOException e) {\n          // At least on OS X, we will sometimes get an\n          // intermittant \"Permission Denied\" IOException,\n          // which seems to simply mean \"you failed to get\n          // the lock\".  But other IOExceptions could be\n          // \"permanent\" (eg, locking is not supported via\n          // the filesystem).  So, we record the failure\n          // reason here; the timeout obtain (usually the\n          // one calling us) will use this as \"root cause\"\n          // if it fails to get the lock.\n          failureReason = e;\n        }\n      } finally {\n        if (lock == null) {\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n          }\n        }\n      }\n    } finally {\n      if (channel == null) {\n        try {\n          f.close();\n        } finally {\n          f = null;\n        }\n      }\n    }\n    return lock != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8fa71d5bc6be53f5f21420ccbcaecad4dd879728","245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittant \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittant \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !isLocked()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return isLocked();\n  }\n\n","sourceOld":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // We are already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    f = new RandomAccessFile(path, \"rw\");\n    try {\n      channel = f.getChannel();\n      try {\n        try {\n          lock = channel.tryLock();\n        } catch (IOException e) {\n          // At least on OS X, we will sometimes get an\n          // intermittant \"Permission Denied\" IOException,\n          // which seems to simply mean \"you failed to get\n          // the lock\".  But other IOExceptions could be\n          // \"permanent\" (eg, locking is not supported via\n          // the filesystem).  So, we record the failure\n          // reason here; the timeout obtain (usually the\n          // one calling us) will use this as \"root cause\"\n          // if it fails to get the lock.\n          failureReason = e;\n        }\n      } finally {\n        if (lock == null) {\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n          }\n        }\n      }\n    } finally {\n      if (channel == null) {\n        try {\n          f.close();\n        } finally {\n          f = null;\n        }\n      }\n    }\n    return lock != null;\n  }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !isLocked()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return isLocked();\n  }\n\n","sourceOld":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittant \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittant \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !isLocked()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","sourceOld":"  public synchronized boolean obtain() throws IOException {\n\n    if (isLocked()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !isLocked()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return isLocked();\n  }\n\n","bugFix":["282779d3160a8f7f09d2a07b06add736f93ac50b","f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","sourceOld":"  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"]},"commit2Childs":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["8a9e385641d717e641408d8fbbc62be8fc766357"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}