{"path":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","sourceNew":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<byte[]>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random.nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random.nextInt(array.length);\n      int end = begin + random.nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random.nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<byte[]>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random.nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random.nextInt(array.length);\n      int end = begin + random.nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random.nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","sourceNew":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<byte[]>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<byte[]>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random.nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random.nextInt(array.length);\n      int end = begin + random.nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random.nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingByteBlockAllocator#testAllocateAndFree().mjava","sourceNew":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingByteBlockAllocator allocator = newAllocator();\n    HashSet<byte[]> allocated = new HashSet<byte[]>();\n    int freeButAllocated = 0;\n    byte[] block = allocator.getByteBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getByteBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      byte[][] array = allocated.toArray(new byte[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        byte[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleByteBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}