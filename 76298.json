{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","commits":[{"id":"fab88842367a77ce26aedb47e9ea666beea01cf9","date":1391433372,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"/dev/null","sourceNew":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true)){\n        result = (Map) ZkStateReader.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6502a4045d17684af5347826b9c6cf24b8beac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)){\n        result = (Map) ZkStateReader.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","sourceOld":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true)){\n        result = (Map) ZkStateReader.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)){\n        result = (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","sourceOld":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)){\n        result = (Map) ZkStateReader.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":"  public Map getClusterProps(){\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","sourceOld":"  public Map getClusterProps(){\n    Map result = null;\n    try {\n      if(getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)){\n        result = (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        result= new LinkedHashMap();\n      }\n      return result;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading cluster properties\",e) ;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6502a4045d17684af5347826b9c6cf24b8beac","date":1457102520,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","sourceOld":"  public Map getClusterProps(){\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","sourceOld":"  public Map getClusterProps(){\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":null,"sourceOld":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":null,"sourceOld":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":null,"sourceOld":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getClusterProps().mjava","sourceNew":null,"sourceOld":"  public Map getClusterProps() {\n    try {\n      if (getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true)) {\n        return (Map) Utils.fromJSON(getZkClient().getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true)) ;\n      } else {\n        return new LinkedHashMap();\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Thread interrupted. Error reading cluster properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading cluster properties\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fab88842367a77ce26aedb47e9ea666beea01cf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"922ddd897402a6df25c766ea8300443be5e82b3d":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5f6502a4045d17684af5347826b9c6cf24b8beac"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["922ddd897402a6df25c766ea8300443be5e82b3d"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"0ad30c6a479e764150a3316e57263319775f1df2":["922ddd897402a6df25c766ea8300443be5e82b3d","115923bc88e5b1dc4bef049b1ded8486723052ed"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["922ddd897402a6df25c766ea8300443be5e82b3d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["922ddd897402a6df25c766ea8300443be5e82b3d","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"fab88842367a77ce26aedb47e9ea666beea01cf9":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"922ddd897402a6df25c766ea8300443be5e82b3d":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["922ddd897402a6df25c766ea8300443be5e82b3d"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["922ddd897402a6df25c766ea8300443be5e82b3d","5f6502a4045d17684af5347826b9c6cf24b8beac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}