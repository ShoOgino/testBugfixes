{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","commits":[{"id":"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef","date":1393760562,"type":2,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#search().mjava","sourceNew":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), null /*Filter */, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets. */\n  private List<FacetResult> search() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","sourceNew":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), null /*Filter */, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), null /*Filter */, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/SimpleFacetsExample#facetsOnly().mjava","sourceNew":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and counts facets only without collecting the matching documents.*/\n  private List<FacetResult> facetsOnly() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    FacetsCollector fc = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    searcher.search(new MatchAllDocsQuery(), null /*Filter */, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<>();\n\n    // Count both \"Publish Date\" and \"Author\" dimensions\n    Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n   \n    results.add(facets.getTopChildren(10, \"Author\"));\n    results.add(facets.getTopChildren(10, \"Publish Date\"));\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["78d1c57f76cd5ff6b4c057e9f13ee970df7498ef"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d1c57f76cd5ff6b4c057e9f13ee970df7498ef"],"78d1c57f76cd5ff6b4c057e9f13ee970df7498ef":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}