{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = randomRect(false);\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = randomLat(false);\n    double lon = randomLon(false);\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    if (supportsPolygons()) {\n      q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n      q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n    }\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    if (supportsPolygons()) {\n      q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n      q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n      assertEquals(q1, q2);\n      assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n    }\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {   \n    Query q1, q2;\n\n    Rectangle rect = nextBox();\n\n    q1 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    q2 = newRectQuery(\"field\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n    assertEquals(q1, q2);\n    // for \"impossible\" ranges LatLonPoint.newBoxQuery will return MatchNoDocsQuery\n    // changing the field is unrelated to that.\n    if (q1 instanceof MatchNoDocsQuery == false) {\n      assertFalse(q1.equals(newRectQuery(\"field2\", rect.minLat, rect.maxLat, rect.minLon, rect.maxLon)));\n    }\n\n    double lat = nextLatitude();\n    double lon = nextLongitude();\n    q1 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    q2 = newDistanceQuery(\"field\", lat, lon, 10000.0);\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newDistanceQuery(\"field2\", lat, lon, 10000.0)));\n\n    double[] lats = new double[5];\n    double[] lons = new double[5];\n    lats[0] = rect.minLat;\n    lons[0] = rect.minLon;\n    lats[1] = rect.maxLat;\n    lons[1] = rect.minLon;\n    lats[2] = rect.maxLat;\n    lons[2] = rect.maxLon;\n    lats[3] = rect.minLat;\n    lons[3] = rect.maxLon;\n    lats[4] = rect.minLat;\n    lons[4] = rect.minLon;\n    q1 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    q2 = newPolygonQuery(\"field\", new Polygon(lats, lons));\n    assertEquals(q1, q2);\n    assertFalse(q1.equals(newPolygonQuery(\"field2\", new Polygon(lats, lons))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["713122036535651642e6d4fe57ce12b449e18473","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"713122036535651642e6d4fe57ce12b449e18473":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}