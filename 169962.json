{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, stopWords);\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, stopWords);\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, new StringReader(stopWords));\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try {\n          TokenStream ts = analyzer.tokenStream(field, stopWords);\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<String>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd15afeb65a92902a1b19737cd98f86c084ea16","date":1420045831,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n          ts.close();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder#getQuery(Element).mjava","sourceNew":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    Query q = mlt;\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(mlt, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n    * @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldsList = e.getAttribute(\"fieldNames\"); //a comma-delimited list of fields\n    String fields[] = defaultFieldNames;\n    if ((fieldsList != null) && (fieldsList.trim().length() > 0)) {\n      fields = fieldsList.trim().split(\",\");\n      //trim the fieldnames\n      for (int i = 0; i < fields.length; i++) {\n        fields[i] = fields[i].trim();\n      }\n    }\n\n    //Parse any \"stopWords\" attribute\n    //TODO MoreLikeThis needs to ideally have per-field stopWords lists - until then\n    //I use all analyzers/fields to generate multi-field compatible stop list\n    String stopWords = e.getAttribute(\"stopWords\");\n    Set<String> stopWordsSet = null;\n    if ((stopWords != null) && (fields != null)) {\n      stopWordsSet = new HashSet<>();\n      for (String field : fields) {\n        try (TokenStream ts = analyzer.tokenStream(field, stopWords)) {\n          CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n          ts.reset();\n          while (ts.incrementToken()) {\n            stopWordsSet.add(termAtt.toString());\n          }\n          ts.end();\n        } catch (IOException ioe) {\n          throw new ParserException(\"IoException parsing stop words list in \"\n              + getClass().getName() + \":\" + ioe.getLocalizedMessage());\n        }\n      }\n    }\n\n\n    MoreLikeThisQuery mlt = new MoreLikeThisQuery(DOMUtils.getText(e), fields, analyzer, fields[0]);\n    mlt.setMaxQueryTerms(DOMUtils.getAttribute(e, \"maxQueryTerms\", DEFAULT_MAX_QUERY_TERMS));\n    mlt.setMinTermFrequency(DOMUtils.getAttribute(e, \"minTermFrequency\", DEFAULT_MIN_TERM_FREQUENCY));\n    mlt.setPercentTermsToMatch(DOMUtils.getAttribute(e, \"percentTermsToMatch\", DEFAULT_PERCENT_TERMS_TO_MATCH) / 100);\n    mlt.setStopWords(stopWordsSet);\n    int minDocFreq = DOMUtils.getAttribute(e, \"minDocFreq\", -1);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n\n    mlt.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    return mlt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7530de27b87b961b51f01bd1299b7004d46e8823","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ecd15afeb65a92902a1b19737cd98f86c084ea16"],"ecd15afeb65a92902a1b19737cd98f86c084ea16":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ecd15afeb65a92902a1b19737cd98f86c084ea16"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecd15afeb65a92902a1b19737cd98f86c084ea16":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}