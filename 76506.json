{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(XYPolygon,Node).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(XYPolygon,Node).mjava","pathOld":"/dev/null","sourceNew":"  private static final Node eliminateHoles(final XYPolygon polygon, Node outerNode) {\n    // Define a list to hole a reference to each filtered hole list.\n    final List<Node> holeList = new ArrayList<>();\n    // keep a reference to the hole\n    final Map<Node, XYPolygon> holeListPolygons = new HashMap<>();\n    // Iterate through each array of hole vertices.\n    XYPolygon[] holes = polygon.getHoles();\n    int nodeIndex = polygon.numPoints() ;\n    for(int i = 0; i < polygon.numHoles(); ++i) {\n      // create the doubly-linked hole list\n      Node list = createDoublyLinkedList(holes[i].getPolyX(), holes[i].getPolyY(), holes[i].getWindingOrder(), false, nodeIndex, WindingOrder.CCW);\n      // Determine if the resulting hole polygon was successful.\n      if(list != null) {\n        // Add the leftmost vertex of the hole.\n        Node leftMost = fetchLeftmost(list);\n        holeList.add(leftMost);\n        holeListPolygons.put(leftMost, holes[i]);\n      }\n      nodeIndex += holes[i].numPoints();\n    }\n    return eliminateHoles(holeList, holeListPolygons, outerNode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(XYPolygon,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(XYPolygon,Node).mjava","sourceNew":"  private static final Node eliminateHoles(final XYPolygon polygon, Node outerNode) {\n    // Define a list to hole a reference to each filtered hole list.\n    final List<Node> holeList = new ArrayList<>();\n    // keep a reference to the hole\n    final Map<Node, XYPolygon> holeListPolygons = new HashMap<>();\n    // Iterate through each array of hole vertices.\n    XYPolygon[] holes = polygon.getHoles();\n    int nodeIndex = polygon.numPoints() ;\n    for(int i = 0; i < polygon.numHoles(); ++i) {\n      // create the doubly-linked hole list\n      Node list = createDoublyLinkedList(holes[i].getPolyX(), holes[i].getPolyY(), holes[i].getWindingOrder(), false, nodeIndex, WindingOrder.CCW);\n      // Determine if the resulting hole polygon was successful.\n      if(list != null) {\n        // Add the leftmost vertex of the hole.\n        Node leftMost = fetchLeftmost(list);\n        holeList.add(leftMost);\n        holeListPolygons.put(leftMost, holes[i]);\n      }\n      nodeIndex += holes[i].numPoints();\n    }\n    return eliminateHoles(holeList, holeListPolygons, outerNode);\n  }\n\n","sourceOld":"  private static final Node eliminateHoles(final XYPolygon polygon, Node outerNode) {\n    // Define a list to hole a reference to each filtered hole list.\n    final List<Node> holeList = new ArrayList<>();\n    // keep a reference to the hole\n    final Map<Node, XYPolygon> holeListPolygons = new HashMap<>();\n    // Iterate through each array of hole vertices.\n    XYPolygon[] holes = polygon.getHoles();\n    int nodeIndex = polygon.numPoints() ;\n    for(int i = 0; i < polygon.numHoles(); ++i) {\n      // create the doubly-linked hole list\n      Node list = createDoublyLinkedList(holes[i].getPolyX(), holes[i].getPolyY(), holes[i].getWindingOrder(), false, nodeIndex, WindingOrder.CCW);\n      // Determine if the resulting hole polygon was successful.\n      if(list != null) {\n        // Add the leftmost vertex of the hole.\n        Node leftMost = fetchLeftmost(list);\n        holeList.add(leftMost);\n        holeListPolygons.put(leftMost, holes[i]);\n      }\n      nodeIndex += holes[i].numPoints();\n    }\n    return eliminateHoles(holeList, holeListPolygons, outerNode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}