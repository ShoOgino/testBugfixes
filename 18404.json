{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForImplicitRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForImplicitRouter() throws Exception {\n\n    int numShards = 4;\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    final String collection = \"withShardField\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c,d\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}