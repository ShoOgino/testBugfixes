{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"268f09ed3a9a9b77003b15a5ae30386dc4e3721f","date":1483992000,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> {\n      if (state == State.REPLAYING) {\n        return getTotalLogsSize();\n      } else {\n        return 0L;\n      }\n    };\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applying_buffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.ordinal();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> getTotalLogsSize();\n\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.getValue();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> {\n      if (state == State.REPLAYING) {\n        return getTotalLogsSize();\n      } else {\n        return 0L;\n      }\n    };\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applying_buffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.ordinal();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> getTotalLogsSize();\n\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.getValue();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> getTotalLogsSize();\n\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.getValue();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> getTotalLogsSize();\n\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.getValue();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n    replayLogsCountGauge = () -> logs.size();\n    replayBytesGauge = () -> getTotalLogsSize();\n\n    manager.register(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.register(registry, replayLogsCountGauge, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.register(registry, replayBytesGauge, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    stateGauge = () -> state.getValue();\n    manager.register(registry, stateGauge, true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecf884544ff74add5faa452748f160c4af904b","date":1506527215,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, tag, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), tag, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), tag, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), tag, true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, tag, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), tag, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), tag, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), tag, true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    bufferedOpsGauge = () -> {\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else if (state == State.BUFFERING) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04ecf884544ff74add5faa452748f160c4af904b":["816521ebaad5add9cb96bb88c577394e2938c40b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["268f09ed3a9a9b77003b15a5ae30386dc4e3721f"],"43564cbb30b064675027cfb569564e8531096e97":["04ecf884544ff74add5faa452748f160c4af904b","bfc52860e6d13d034226a760813c59d984c6817a"],"268f09ed3a9a9b77003b15a5ae30386dc4e3721f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"bfc52860e6d13d034226a760813c59d984c6817a":["04ecf884544ff74add5faa452748f160c4af904b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","04ecf884544ff74add5faa452748f160c4af904b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"ab68488225b6a6c357dda72ed11dedca9914a192":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"]},"commit2Childs":{"04ecf884544ff74add5faa452748f160c4af904b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a","6240b74b884c5587f2a4062dd27d6c32bf228889"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"268f09ed3a9a9b77003b15a5ae30386dc4e3721f":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["04ecf884544ff74add5faa452748f160c4af904b"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["268f09ed3a9a9b77003b15a5ae30386dc4e3721f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}