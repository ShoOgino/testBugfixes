{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#wrapUninvertingReaderPerSegment(SolrCore,DirectoryReader).mjava","commits":[{"id":"83c8471489eeb663dabdc354a41bea707f560bc9","date":1492417766,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#wrapUninvertingReaderPerSegment(SolrCore,DirectoryReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If docvalues are enabled or disabled after data has already been indexed for a field, such that\n   * only some segments have docvalues, uninverting on the top level reader will cause \n   * IllegalStateException to be thrown when trying to use a field with such mixed data. This is because\n   * the {@link IndexSchema#getUninversionMap(IndexReader)} method decides to put a field \n   * into the uninverteding map only if *NO* segment in the index contains docvalues for that field.\n   * \n   * Therefore, this class provides a uninverting map per segment such that for any field, \n   * DocValues are used from segments if they exist and uninversion of the field is performed on the rest\n   * of the segments.\n   */\n   private static DirectoryReader wrapUninvertingReaderPerSegment(SolrCore core, DirectoryReader reader) throws IOException {\n     return UninvertingReader.wrap(reader, r -> core.getLatestSchema().getUninversionMap(r));\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#wrapUninvertingReaderPerSegment(SolrCore,DirectoryReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If docvalues are enabled or disabled after data has already been indexed for a field, such that\n   * only some segments have docvalues, uninverting on the top level reader will cause \n   * IllegalStateException to be thrown when trying to use a field with such mixed data. This is because\n   * the {@link IndexSchema#getUninversionMap(IndexReader)} method decides to put a field \n   * into the uninverteding map only if *NO* segment in the index contains docvalues for that field.\n   * \n   * Therefore, this class provides a uninverting map per segment such that for any field, \n   * DocValues are used from segments if they exist and uninversion of the field is performed on the rest\n   * of the segments.\n   */\n   private static DirectoryReader wrapUninvertingReaderPerSegment(SolrCore core, DirectoryReader reader) throws IOException {\n     return UninvertingReader.wrap(reader, r -> core.getLatestSchema().getUninversionMap(r));\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07eeba66d4090af0095b50cbd1795a3d6182c1d","date":1538797239,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#wrapUninvertingReaderPerSegment(SolrCore,DirectoryReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * If docvalues are enabled or disabled after data has already been indexed for a field, such that\n   * only some segments have docvalues, uninverting on the top level reader will cause \n   * IllegalStateException to be thrown when trying to use a field with such mixed data. This is because\n   * the {@link IndexSchema#getUninversionMap(IndexReader)} method decides to put a field \n   * into the uninverteding map only if *NO* segment in the index contains docvalues for that field.\n   * \n   * Therefore, this class provides a uninverting map per segment such that for any field, \n   * DocValues are used from segments if they exist and uninversion of the field is performed on the rest\n   * of the segments.\n   */\n   private static DirectoryReader wrapUninvertingReaderPerSegment(SolrCore core, DirectoryReader reader) throws IOException {\n     return UninvertingReader.wrap(reader, r -> core.getLatestSchema().getUninversionMap(r));\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83c8471489eeb663dabdc354a41bea707f560bc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["83c8471489eeb663dabdc354a41bea707f560bc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"83c8471489eeb663dabdc354a41bea707f560bc9":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","83c8471489eeb663dabdc354a41bea707f560bc9"],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}