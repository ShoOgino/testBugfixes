{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":null,"sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getConfFileInfoFromCache(NamedList[String],Map[String,FileInfo]).mjava","sourceNew":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","sourceOld":"  /**\n   * For configuration files, checksum of the file is included because, unlike index files, they may have same content\n   * but different timestamps.\n   * <p/>\n   * The local conf files information is cached so that everytime it does not have to compute the checksum. The cache is\n   * refreshed only if the lastModified of the file changes\n   */\n  List<Map<String, Object>> getConfFileInfoFromCache(NamedList<String> nameAndAlias,\n                                                     final Map<String, FileInfo> confFileInfoCache) {\n    List<Map<String, Object>> confFiles = new ArrayList<Map<String, Object>>();\n    synchronized (confFileInfoCache) {\n      File confDir = new File(core.getResourceLoader().getConfigDir());\n      Checksum checksum = null;\n      for (int i = 0; i < nameAndAlias.size(); i++) {\n        String cf = nameAndAlias.getName(i);\n        File f = new File(confDir, cf);\n        if (!f.exists() || f.isDirectory()) continue; //must not happen\n        FileInfo info = confFileInfoCache.get(cf);\n        if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n          if (checksum == null) checksum = new Adler32();\n          info = new FileInfo(f.lastModified(), cf, f.length(), getCheckSum(checksum, f));\n          confFileInfoCache.put(cf, info);\n        }\n        Map<String, Object> m = info.getAsMap();\n        if (nameAndAlias.getVal(i) != null) m.put(ALIAS, nameAndAlias.getVal(i));\n        confFiles.add(m);\n      }\n    }\n    return confFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}