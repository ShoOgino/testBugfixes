{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n    SuggestScoreDoc[] suggestScoreDocs = priorityQueue.getResults();\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n    SuggestScoreDoc[] suggestScoreDocs = priorityQueue.getResults();\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n    SuggestScoreDoc[] suggestScoreDocs = priorityQueue.getResults();\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs, suggestScoreDocs[0].score);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(new TotalHits(suggestScoreDocs.length, TotalHits.Relation.EQUAL_TO), suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(suggestScoreDocs.length, suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1db4d0b783c960c8176aef0d38ffccb14ec50a","date":1543422733,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#get().mjava","sourceNew":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n          (a, b) -> {\n            // sort by higher score\n            int cmp = Float.compare(b.score, a.score);\n            if (cmp == 0) {\n              // tie break by completion key\n              cmp = Lookup.CHARSEQUENCE_COMPARATOR.compare(a.key, b.key);\n              if (cmp == 0) {\n                // prefer smaller doc id, in case of a tie\n                cmp = Integer.compare(a.doc, b.doc);\n              }\n            }\n            return cmp;\n          });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(new TotalHits(suggestScoreDocs.length, TotalHits.Relation.EQUAL_TO), suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns at most <code>num</code> Top scoring {@link org.apache.lucene.search.suggest.document.TopSuggestDocs}s\n   */\n  public TopSuggestDocs get() throws IOException {\n\n    SuggestScoreDoc[] suggestScoreDocs;\n    \n    if (seenSurfaceForms != null) {\n      // NOTE: this also clears the priorityQueue:\n      for (SuggestScoreDoc hit : priorityQueue.getResults()) {\n        pendingResults.add(hit);\n      }\n\n      // Deduplicate all hits: we already dedup'd efficiently within each segment by\n      // truncating the FST top paths search, but across segments there may still be dups:\n      seenSurfaceForms.clear();\n\n      // TODO: we could use a priority queue here to make cost O(N * log(num)) instead of O(N * log(N)), where N = O(num *\n      // numSegments), but typically numSegments is smallish and num is smallish so this won't matter much in practice:\n\n      Collections.sort(pendingResults,\n                       new Comparator<SuggestScoreDoc>() {\n                         @Override\n                         public int compare(SuggestScoreDoc a, SuggestScoreDoc b) {\n                           // sort by higher score\n                           int cmp = Float.compare(b.score, a.score);\n                           if (cmp == 0) {\n                             // tie break by lower docID:\n                             cmp = Integer.compare(a.doc, b.doc);\n                           }\n                           return cmp;\n                         }\n                       });\n\n      List<SuggestScoreDoc> hits = new ArrayList<>();\n      \n      for (SuggestScoreDoc hit : pendingResults) {\n        if (seenSurfaceForms.contains(hit.key) == false) {\n          seenSurfaceForms.add(hit.key);\n          hits.add(hit);\n          if (hits.size() == num) {\n            break;\n          }\n        }\n      }\n      suggestScoreDocs = hits.toArray(new SuggestScoreDoc[0]);\n    } else {\n      suggestScoreDocs = priorityQueue.getResults();\n    }\n\n    if (suggestScoreDocs.length > 0) {\n      return new TopSuggestDocs(new TotalHits(suggestScoreDocs.length, TotalHits.Relation.EQUAL_TO), suggestScoreDocs);\n    } else {\n      return TopSuggestDocs.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"ba1db4d0b783c960c8176aef0d38ffccb14ec50a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1db4d0b783c960c8176aef0d38ffccb14ec50a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ba1db4d0b783c960c8176aef0d38ffccb14ec50a"],"ba1db4d0b783c960c8176aef0d38ffccb14ec50a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}