{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404c73eb4b69219f283c2f08a34a08bfdb6327f","date":1327615748,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (debug) {\n          log.debug(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogReader#next().mjava","sourceNew":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos={} currentSize={}\", pos, fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","sourceOld":"    /** Returns the next object from the log, or null if none available.\n     *\n     * @return The log record, or null if EOF\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public Object next() throws IOException, InterruptedException {\n      long pos = fis.position();\n\n      synchronized (TransactionLog.this) {\n        if (trace) {\n          log.trace(\"Reading log record.  pos=\"+pos+\" currentSize=\"+fos.size());\n        }\n\n        if (pos >= fos.size()) {\n          return null;\n        }\n\n        fos.flushBuffer();\n      }\n\n      if (pos == 0) {\n        readHeader(fis);\n\n        // shouldn't currently happen - header and first record are currently written at the same time\n        synchronized (TransactionLog.this) {\n          if (fis.position() >= fos.size()) {\n            return null;\n          }\n          pos = fis.position();\n        }\n      }\n\n      Object o = codec.readVal(fis);\n\n      // skip over record size\n      int size = fis.readInt();\n      assert size == fis.position() - pos - 4;\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["740d649f013f07efbeb73ca854f106c60166e7c0"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}