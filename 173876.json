{"path":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"/dev/null","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    final Iterator it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31","date":1249940086,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    final Iterator it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}