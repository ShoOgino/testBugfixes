{"path":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), index,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), index,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), index,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), index,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), index,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    Random random = newRandom();\n    index = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new MockRAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    Random random = newRandom();\n    index = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(SlowMultiReaderWrapper.wrap(r));\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    \n    index = new RAMDirectory();\n    Random random = newRandom();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(new Field(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(new Field(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = writer.getReader();\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarityProvider(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarityProvider(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarityProvider(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarity(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setSimilarityProvider(sim));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n                                                     .setSimilarityProvider(sim).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", Field.Store.YES,\n              Field.Index.ANALYZED));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarityProvider(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarityProvider(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","51c34a3639838887e7997850b6be80f838a4d6f7"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["51c34a3639838887e7997850b6be80f838a4d6f7"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"51c34a3639838887e7997850b6be80f838a4d6f7":["43b04c27924fe393e38e9f0986e32c634f261859"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1509f151d7692d84fae414b2b799ac06ba60fcb4","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["43b04c27924fe393e38e9f0986e32c634f261859","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"43b04c27924fe393e38e9f0986e32c634f261859":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["5cab9a86bd67202d20b6adc463008c8e982b070a","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab","3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}