{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimResult(FacetResult).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}