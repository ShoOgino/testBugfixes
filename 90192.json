{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#accepts(Automaton,IntsRef).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#accepts(Automaton,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Like {@link Operations#run} except the incoming automaton is allowed to be non-deterministic. */\n  private static boolean accepts(Automaton a, IntsRef path) {\n    Set<Integer> states = new HashSet<>();\n    states.add(0);\n    Transition t = new Transition();\n    for(int i=0;i<path.length;i++) {\n      int digit = path.ints[path.offset+i];\n      Set<Integer> nextStates = new HashSet<>();\n      for(int state : states) {\n        int count = a.initTransition(state, t);\n        for(int j=0;j<count;j++) {\n          a.getNextTransition(t);\n          if (digit >= t.min && digit <= t.max) {\n            nextStates.add(t.dest);\n          }\n        }\n      }\n      states = nextStates;\n      if (states.isEmpty()) {\n        return false;\n      }\n    }\n\n    for(int state : states) {\n      if (a.isAccept(state)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#accepts(Automaton,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Like {@link Operations#run} except the incoming automaton is allowed to be non-deterministic. */\n  private static boolean accepts(Automaton a, IntsRef path) {\n    Set<Integer> states = new HashSet<>();\n    states.add(0);\n    Transition t = new Transition();\n    for(int i=0;i<path.length;i++) {\n      int digit = path.ints[path.offset+i];\n      Set<Integer> nextStates = new HashSet<>();\n      for(int state : states) {\n        int count = a.initTransition(state, t);\n        for(int j=0;j<count;j++) {\n          a.getNextTransition(t);\n          if (digit >= t.min && digit <= t.max) {\n            nextStates.add(t.dest);\n          }\n        }\n      }\n      states = nextStates;\n      if (states.isEmpty()) {\n        return false;\n      }\n    }\n\n    for(int state : states) {\n      if (a.isAccept(state)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}