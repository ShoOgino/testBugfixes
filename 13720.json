{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","commits":[{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(29L, numericDocValues.get(0));\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    sortedNumericDocValues.setDocument(0);\n    assertEquals(5, sortedNumericDocValues.count());\n    assertEquals(30L, sortedNumericDocValues.valueAt(0));\n    assertEquals(31L, sortedNumericDocValues.valueAt(1));\n    assertEquals(32L, sortedNumericDocValues.valueAt(2));\n    assertEquals(32L, sortedNumericDocValues.valueAt(3));\n    assertEquals(33L, sortedNumericDocValues.valueAt(4));\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(\"a\", binaryDocValues.get(0).utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(\"b\", sortedDocValues.get(0).utf8ToString());\n    assertEquals(0, sortedDocValues.getOrd(0));\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    sortedSetDocValues.setDocument(0);\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(29L, numericDocValues.get(0));\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    sortedNumericDocValues.setDocument(0);\n    assertEquals(5, sortedNumericDocValues.count());\n    assertEquals(30L, sortedNumericDocValues.valueAt(0));\n    assertEquals(31L, sortedNumericDocValues.valueAt(1));\n    assertEquals(32L, sortedNumericDocValues.valueAt(2));\n    assertEquals(32L, sortedNumericDocValues.valueAt(3));\n    assertEquals(33L, sortedNumericDocValues.valueAt(4));\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(\"a\", binaryDocValues.get(0).utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(\"b\", sortedDocValues.get(0).utf8ToString());\n    assertEquals(0, sortedDocValues.getOrd(0));\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    sortedSetDocValues.setDocument(0);\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(29L, numericDocValues.get(0));\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    sortedNumericDocValues.setDocument(0);\n    assertEquals(5, sortedNumericDocValues.count());\n    assertEquals(30L, sortedNumericDocValues.valueAt(0));\n    assertEquals(31L, sortedNumericDocValues.valueAt(1));\n    assertEquals(32L, sortedNumericDocValues.valueAt(2));\n    assertEquals(32L, sortedNumericDocValues.valueAt(3));\n    assertEquals(33L, sortedNumericDocValues.valueAt(4));\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(\"a\", binaryDocValues.get(0).utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(\"b\", sortedDocValues.get(0).utf8ToString());\n    assertEquals(0, sortedDocValues.getOrd(0));\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    sortedSetDocValues.setDocument(0);\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(29L, numericDocValues.get(0));\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    sortedNumericDocValues.setDocument(0);\n    assertEquals(5, sortedNumericDocValues.count());\n    assertEquals(30L, sortedNumericDocValues.valueAt(0));\n    assertEquals(31L, sortedNumericDocValues.valueAt(1));\n    assertEquals(32L, sortedNumericDocValues.valueAt(2));\n    assertEquals(32L, sortedNumericDocValues.valueAt(3));\n    assertEquals(33L, sortedNumericDocValues.valueAt(4));\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(\"a\", binaryDocValues.get(0).utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(\"b\", sortedDocValues.get(0).utf8ToString());\n    assertEquals(0, sortedDocValues.getOrd(0));\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    sortedSetDocValues.setDocument(0);\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"012813596fe857643fb56feae3da5aa0be9a36ea","date":1511271157,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, numericDocValues.nextDoc());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedNumericDocValues.nextDoc());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, binaryDocValues.nextDoc());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedDocValues.nextDoc());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedDocValues.nextDoc());\n  }\n\n","sourceOld":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39c830d7063b84a924dd9f3285b6660e34bb8b26","date":1511305529,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValues().mjava","sourceNew":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, numericDocValues.nextDoc());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedNumericDocValues.nextDoc());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, binaryDocValues.nextDoc());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedDocValues.nextDoc());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, sortedDocValues.nextDoc());\n  }\n\n","sourceOld":"  public void testDocValues() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"numeric\", 29L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 33L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 32L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 31L));\n    doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", 30L));\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"b\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"f\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"d\")));\n    doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(\"c\")));\n\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    NumericDocValues numericDocValues = leafReader.getNumericDocValues(\"numeric\");\n    assertEquals(0, numericDocValues.nextDoc());\n    assertEquals(29L, numericDocValues.longValue());\n    SortedNumericDocValues sortedNumericDocValues = leafReader.getSortedNumericDocValues(\"sorted_numeric\");\n    assertEquals(0, sortedNumericDocValues.nextDoc());\n    assertEquals(5, sortedNumericDocValues.docValueCount());\n    assertEquals(30L, sortedNumericDocValues.nextValue());\n    assertEquals(31L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(32L, sortedNumericDocValues.nextValue());\n    assertEquals(33L, sortedNumericDocValues.nextValue());\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"binary\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"a\", binaryDocValues.binaryValue().utf8ToString());\n    SortedDocValues sortedDocValues = leafReader.getSortedDocValues(\"sorted\");\n    assertEquals(0, sortedDocValues.nextDoc());\n    assertEquals(\"b\", sortedDocValues.binaryValue().utf8ToString());\n    assertEquals(0, sortedDocValues.ordValue());\n    assertEquals(\"b\", sortedDocValues.lookupOrd(0).utf8ToString());\n    SortedSetDocValues sortedSetDocValues = leafReader.getSortedSetDocValues(\"sorted_set\");\n    assertEquals(3, sortedSetDocValues.getValueCount());\n    assertEquals(0, sortedSetDocValues.nextDoc());\n    assertEquals(0L, sortedSetDocValues.nextOrd());\n    assertEquals(1L, sortedSetDocValues.nextOrd());\n    assertEquals(2L, sortedSetDocValues.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSetDocValues.nextOrd());\n    assertEquals(\"c\", sortedSetDocValues.lookupOrd(0L).utf8ToString());\n    assertEquals(\"d\", sortedSetDocValues.lookupOrd(1L).utf8ToString());\n    assertEquals(\"f\", sortedSetDocValues.lookupOrd(2L).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"012813596fe857643fb56feae3da5aa0be9a36ea":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"253a79e1af11467dd01315b1919025d288aa0ccb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["253a79e1af11467dd01315b1919025d288aa0ccb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["253a79e1af11467dd01315b1919025d288aa0ccb"],"39c830d7063b84a924dd9f3285b6660e34bb8b26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","012813596fe857643fb56feae3da5aa0be9a36ea"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39c830d7063b84a924dd9f3285b6660e34bb8b26"]},"commit2Childs":{"012813596fe857643fb56feae3da5aa0be9a36ea":["39c830d7063b84a924dd9f3285b6660e34bb8b26"],"253a79e1af11467dd01315b1919025d288aa0ccb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["012813596fe857643fb56feae3da5aa0be9a36ea","39c830d7063b84a924dd9f3285b6660e34bb8b26","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["253a79e1af11467dd01315b1919025d288aa0ccb"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"39c830d7063b84a924dd9f3285b6660e34bb8b26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}