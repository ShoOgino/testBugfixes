{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new DirectPackedReader(bitsPerValue, valueCount, in);\n      case PACKED_SINGLE_BLOCK:\n        return new DirectPacked64SingleBlockReader(bitsPerValue, valueCount, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    return new DirectReader(bitsPerValue, valueCount, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new DirectPackedReader(bitsPerValue, valueCount, in);\n      case PACKED_SINGLE_BLOCK:\n        return new DirectPacked64SingleBlockReader(bitsPerValue, valueCount, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb279fba5b1f023bb26dee9f9b17926b86fb10b5","date":1341949966,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInts.Reader that does not load values\n   * into RAM but rather accesses all values via the\n   * provided IndexInput.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return an Reader to access the values\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n    switch (format) {\n      case PACKED:\n        return new DirectPackedReader(bitsPerValue, valueCount, in);\n      case PACKED_SINGLE_BLOCK:\n        return new DirectPacked64SingleBlockReader(bitsPerValue, valueCount, in);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getDirectReader(IndexInput).mjava","sourceNew":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * <p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Construct a direct {@link Reader} from an {@link IndexInput}. This method\n   * is useful to restore data from streams which have been created using\n   * {@link PackedInts#getWriter(DataOutput, int, int, float)}.\n   * </p><p>\n   * The returned reader will have very little memory overhead, but every call\n   * to {@link Reader#get(int)} is likely to perform a disk seek.\n   *\n   * @param in           the stream to read data from\n   * @return a direct Reader\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Reader getDirectReader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return getDirectReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"aba371508186796cc6151d8223a5b4e16d02e26e":["55110eb60c5105294fc2ae7912d82b750865aa58","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"55110eb60c5105294fc2ae7912d82b750865aa58":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"cb279fba5b1f023bb26dee9f9b17926b86fb10b5":["55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["aba371508186796cc6151d8223a5b4e16d02e26e","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"cb279fba5b1f023bb26dee9f9b17926b86fb10b5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}