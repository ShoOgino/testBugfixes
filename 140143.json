{"path":"src/java/org/apache/solr/util/OpenBitSet#fastClear(int).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#fastClear(int).mjava","pathOld":"/dev/null","sourceNew":"  /** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(int index) {\n    int wordNum = index >> 6;\n    int bit = index & 0x03f;\n    long bitmask = 1L << bit;\n    bits[wordNum] &= ~bitmask;\n    // hmmm, it takes one more instruction to clear than it does to set... any\n    // way to work around this?  If there were only 63 bits per word, we could\n    // use a right shift of 10111111...111 in binary to position the 0 in the\n    // correct place (using sign extension).\n    // Could also use Long.rotateRight() or rotateLeft() *if* they were converted\n    // by the JVM into a native instruction.\n    // bits[word] &= Long.rotateLeft(0xfffffffe,bit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/OpenBitSet#fastClear(int).mjava","sourceNew":null,"sourceOld":"  /** clears a bit.\n   * The index should be less than the OpenBitSet size.\n   */\n  public void fastClear(int index) {\n    int wordNum = index >> 6;\n    int bit = index & 0x03f;\n    long bitmask = 1L << bit;\n    bits[wordNum] &= ~bitmask;\n    // hmmm, it takes one more instruction to clear than it does to set... any\n    // way to work around this?  If there were only 63 bits per word, we could\n    // use a right shift of 10111111...111 in binary to position the 0 in the\n    // correct place (using sign extension).\n    // Could also use Long.rotateRight() or rotateLeft() *if* they were converted\n    // by the JVM into a native instruction.\n    // bits[word] &= Long.rotateLeft(0xfffffffe,bit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["21400778a0bf704d187a4848279049f5d90276c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["5108097d840f85a1779a41d0e412efb8130546e6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}