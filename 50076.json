{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","commits":[{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"/dev/null","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b93c361b4f6fe193e84bfd27ea523366eada52","date":1490100167,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8908009aaa8e9318b455c1c22b83e0e87738228a","date":1490280013,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0, slot -> { return new SlotContext(filter); });\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final int count = countAcc.getCount(slot.slot);\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slot.slot >= 0) {\n      collectAcc.setValues(target, slot.slot);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0, slot -> { return new SlotContext(filter); });\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58b93c361b4f6fe193e84bfd27ea523366eada52":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79759974460bc59933cd169acc94f5c6b16368d5"],"bc8f206328a706450934717bec7ccc22ad166fc0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8908009aaa8e9318b455c1c22b83e0e87738228a":["11ab475c994c79138885cc8a30b2641d929cdc43"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["58b93c361b4f6fe193e84bfd27ea523366eada52"],"11ab475c994c79138885cc8a30b2641d929cdc43":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"]},"commit2Childs":{"58b93c361b4f6fe193e84bfd27ea523366eada52":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["58b93c361b4f6fe193e84bfd27ea523366eada52"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8908009aaa8e9318b455c1c22b83e0e87738228a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2c705a0d590cf911e7c942df49563ca2ea176e22":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"11ab475c994c79138885cc8a30b2641d929cdc43":["8908009aaa8e9318b455c1c22b83e0e87738228a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","79759974460bc59933cd169acc94f5c6b16368d5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11ab475c994c79138885cc8a30b2641d929cdc43"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","8908009aaa8e9318b455c1c22b83e0e87738228a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}