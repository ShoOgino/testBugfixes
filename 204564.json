{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b82df4a4c9c4b1b2c56093594813be04d23caf56","date":1338206424,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04abe89b744825e182fbffd81659a81c15ecf80a","date":1338934373,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","bugFix":["47777586dd4c026834be0b2cc454d527cf8884b3","aeeb58ba4b71c097f081c7005b5ce0213e609984","9ef906aa4fc142bf547403c048d0957e11462df7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56584ae6fa4912e4dd6e818a7da3799cf807234f","date":1339586560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":["47777586dd4c026834be0b2cc454d527cf8884b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = _TestUtil.randomPattern(random());\n\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 5;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 50 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = 10 + random().nextInt(20);\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = TestUtil.randomPattern(random());\n\n      final String replacement = TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(String fieldName, Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, reader);\n        }\n      };\n\n      /* max input length. don't make it longer -- exponential processing\n       * time for certain patterns. */ \n      final int maxInputLength = 30;\n      /* ASCII only input?: */\n      final boolean asciiOnly = true;\n      checkRandomData(random, a, 250 * RANDOM_MULTIPLIER, maxInputLength, asciiOnly);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"04abe89b744825e182fbffd81659a81c15ecf80a":["b82df4a4c9c4b1b2c56093594813be04d23caf56"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["04abe89b744825e182fbffd81659a81c15ecf80a"],"b82df4a4c9c4b1b2c56093594813be04d23caf56":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6613659748fe4411a7dcf85266e55db1f95f7315","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56584ae6fa4912e4dd6e818a7da3799cf807234f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04abe89b744825e182fbffd81659a81c15ecf80a":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["fc706b1e03a539d44d99998108feb684bb44cbb2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b82df4a4c9c4b1b2c56093594813be04d23caf56":["04abe89b744825e182fbffd81659a81c15ecf80a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b82df4a4c9c4b1b2c56093594813be04d23caf56"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}