{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,Bits,SortedSetDocValues,SortedSetDocValues).mjava","commits":[{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,Bits,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, Bits liveDocs, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(DocValues.EMPTY_SORTED_SET, expected);\n      return;\n    }\n\n    FixedBitSet liveOrdsExpected = new FixedBitSet((int) expected.getValueCount());\n    FixedBitSet liveOrdsActual = new FixedBitSet((int) actual.getValueCount());\n\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n\n    // compare values for all live docs:\n    for (int i = 0; i < maxDoc; i++) {\n      if (liveDocs != null && liveDocs.get(i) == false) {\n        // Don't check deleted docs\n        continue;\n      }\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        expected.lookupOrd(expectedOrd, expectedBytes);\n        long actualOrd = actual.nextOrd();\n        assertTrue(actualOrd != NO_MORE_ORDS);\n        actual.lookupOrd(actualOrd, actualBytes);\n        assertEquals(expectedBytes, actualBytes);\n        liveOrdsExpected.set((int) expectedOrd);\n        liveOrdsActual.set((int) actualOrd);\n      }\n\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n\n    // Make sure both have same number of non-deleted values:\n    assertEquals(liveOrdsExpected.cardinality(), liveOrdsActual.cardinality());\n    \n    // compare ord dictionary\n    int expectedOrd = 0;\n    int actualOrd = 0;\n    while (expectedOrd < expected.getValueCount()) {\n      expectedOrd = liveOrdsExpected.nextSetBit(expectedOrd);\n      if (expectedOrd == -1) {\n        break;\n      }\n      actualOrd = liveOrdsActual.nextSetBit(actualOrd);\n      expected.lookupOrd(expectedOrd, expectedBytes);\n      actual.lookupOrd(actualOrd, actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n      expectedOrd++;\n      actualOrd++;\n    }\n    assertTrue(actualOrd == actual.getValueCount() || liveOrdsActual.nextSetBit(actualOrd) == -1);\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), liveOrdsExpected, actual.termsEnum(), liveOrdsActual);\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(DocValues.EMPTY_SORTED_SET, expected);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n    // compare ord lists\n    for (int i = 0; i < maxDoc; i++) {\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        assertEquals(expectedOrd, actual.nextOrd());\n      }\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n    \n    // compare ord dictionary\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      expected.lookupTerm(expectedBytes);\n      actual.lookupTerm(actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n    }\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), actual.termsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a621dd071a902e1fd30367200d7bbbea037706","date":1400686915,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,Bits,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(DocValues.EMPTY_SORTED_SET, expected);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n    // compare ord lists\n    for (int i = 0; i < maxDoc; i++) {\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        assertEquals(expectedOrd, actual.nextOrd());\n      }\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n    \n    // compare ord dictionary\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      expected.lookupTerm(expectedBytes);\n      actual.lookupTerm(actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n    }\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), actual.termsEnum());\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, Bits liveDocs, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(DocValues.EMPTY_SORTED_SET, expected);\n      return;\n    }\n\n    FixedBitSet liveOrdsExpected = new FixedBitSet((int) expected.getValueCount());\n    FixedBitSet liveOrdsActual = new FixedBitSet((int) actual.getValueCount());\n\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n\n    // compare values for all live docs:\n    for (int i = 0; i < maxDoc; i++) {\n      if (liveDocs != null && liveDocs.get(i) == false) {\n        // Don't check deleted docs\n        continue;\n      }\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        expected.lookupOrd(expectedOrd, expectedBytes);\n        long actualOrd = actual.nextOrd();\n        assertTrue(actualOrd != NO_MORE_ORDS);\n        actual.lookupOrd(actualOrd, actualBytes);\n        assertEquals(expectedBytes, actualBytes);\n        liveOrdsExpected.set((int) expectedOrd);\n        liveOrdsActual.set((int) actualOrd);\n      }\n\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n\n    // Make sure both have same number of non-deleted values:\n    assertEquals(liveOrdsExpected.cardinality(), liveOrdsActual.cardinality());\n    \n    // compare ord dictionary\n    int expectedOrd = 0;\n    int actualOrd = 0;\n    while (expectedOrd < expected.getValueCount()) {\n      expectedOrd = liveOrdsExpected.nextSetBit(expectedOrd);\n      if (expectedOrd == -1) {\n        break;\n      }\n      actualOrd = liveOrdsActual.nextSetBit(actualOrd);\n      expected.lookupOrd(expectedOrd, expectedBytes);\n      actual.lookupOrd(actualOrd, actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n      expectedOrd++;\n      actualOrd++;\n    }\n    assertTrue(actualOrd == actual.getValueCount() || liveOrdsActual.nextSetBit(actualOrd) == -1);\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), liveOrdsExpected, actual.termsEnum(), liveOrdsActual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45a621dd071a902e1fd30367200d7bbbea037706":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"45a621dd071a902e1fd30367200d7bbbea037706":[],"0efcf27cd5ca23def8376b4c321970c14dd71623":["45a621dd071a902e1fd30367200d7bbbea037706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efcf27cd5ca23def8376b4c321970c14dd71623","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["45a621dd071a902e1fd30367200d7bbbea037706","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}