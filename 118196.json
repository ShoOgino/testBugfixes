{"path":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeperator(String[]).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeperator(String[]).mjava","pathOld":"/dev/null","sourceNew":"    protected void guessFixedWidthSeperator(String[] lines) {\n        // keep track of the fieldlength\n        int previousMatch = -1;\n        for (int i = 0; i < lines[0].length(); i++) {\n            char last = ' ';\n            boolean charMatches = true;\n            for (int j = 0; j < lines.length; j++) {\n                if (j == 0) {\n                    last = lines[j].charAt(i);\n                }\n                if (last != lines[j].charAt(i)) {\n                    charMatches = false;\n                    break;\n                } \n            }\n            if (charMatches) {\n                if (previousMatch == -1) {\n                    previousMatch = 0;\n                }\n                CSVField field = new CSVField();\n                field.setName(\"field\"+config.getFields().length+1);\n                field.setSize((i-previousMatch));\n                config.addField(field);\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18e7cf5eab4be20c96aa36554daa39b53f43cf6e","date":1490632275,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeparator(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeperator(String[]).mjava","sourceNew":"    protected void guessFixedWidthSeparator(String[] lines) {\n        // keep track of the fieldlength\n        int previousMatch = -1;\n        for (int i = 0; i < lines[0].length(); i++) {\n            char last = ' ';\n            boolean charMatches = true;\n            for (int j = 0; j < lines.length; j++) {\n                if (j == 0) {\n                    last = lines[j].charAt(i);\n                }\n                if (last != lines[j].charAt(i)) {\n                    charMatches = false;\n                    break;\n                } \n            }\n            if (charMatches) {\n                if (previousMatch == -1) {\n                    previousMatch = 0;\n                }\n                CSVField field = new CSVField();\n                field.setName(\"field\"+config.getFields().length+1);\n                field.setSize((i-previousMatch));\n                config.addField(field);\n            }\n        }\n    }\n\n","sourceOld":"    protected void guessFixedWidthSeperator(String[] lines) {\n        // keep track of the fieldlength\n        int previousMatch = -1;\n        for (int i = 0; i < lines[0].length(); i++) {\n            char last = ' ';\n            boolean charMatches = true;\n            for (int j = 0; j < lines.length; j++) {\n                if (j == 0) {\n                    last = lines[j].charAt(i);\n                }\n                if (last != lines[j].charAt(i)) {\n                    charMatches = false;\n                    break;\n                } \n            }\n            if (charMatches) {\n                if (previousMatch == -1) {\n                    previousMatch = 0;\n                }\n                CSVField field = new CSVField();\n                field.setName(\"field\"+config.getFields().length+1);\n                field.setSize((i-previousMatch));\n                config.addField(field);\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"febf4fa8feff6bbc932c1b388cbd758a3e6697f7","date":1490873944,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeparator(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVConfigGuesser#guessFixedWidthSeperator(String[]).mjava","sourceNew":"    protected void guessFixedWidthSeparator(String[] lines) {\n        // keep track of the fieldlength\n        int previousMatch = -1;\n        for (int i = 0; i < lines[0].length(); i++) {\n            char last = ' ';\n            boolean charMatches = true;\n            for (int j = 0; j < lines.length; j++) {\n                if (j == 0) {\n                    last = lines[j].charAt(i);\n                }\n                if (last != lines[j].charAt(i)) {\n                    charMatches = false;\n                    break;\n                } \n            }\n            if (charMatches) {\n                if (previousMatch == -1) {\n                    previousMatch = 0;\n                }\n                CSVField field = new CSVField();\n                field.setName(\"field\"+config.getFields().length+1);\n                field.setSize((i-previousMatch));\n                config.addField(field);\n            }\n        }\n    }\n\n","sourceOld":"    protected void guessFixedWidthSeperator(String[] lines) {\n        // keep track of the fieldlength\n        int previousMatch = -1;\n        for (int i = 0; i < lines[0].length(); i++) {\n            char last = ' ';\n            boolean charMatches = true;\n            for (int j = 0; j < lines.length; j++) {\n                if (j == 0) {\n                    last = lines[j].charAt(i);\n                }\n                if (last != lines[j].charAt(i)) {\n                    charMatches = false;\n                    break;\n                } \n            }\n            if (charMatches) {\n                if (previousMatch == -1) {\n                    previousMatch = 0;\n                }\n                CSVField field = new CSVField();\n                field.setName(\"field\"+config.getFields().length+1);\n                field.setSize((i-previousMatch));\n                config.addField(field);\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["18e7cf5eab4be20c96aa36554daa39b53f43cf6e"]},"commit2Childs":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":[],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","18e7cf5eab4be20c96aa36554daa39b53f43cf6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}