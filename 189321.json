{"path":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"solr/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"solr/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"solr/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: {}\", obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: {}\", obj);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: \" + obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: \" + obj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403c3219db9547cd15baeb98f0804fbb65f36c0f","date":1600394849,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createEventListener(info);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: {}\", obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createEventListener(info);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: {}\", obj);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final Class<SolrEventListener> clazz = SolrEventListener.class;\n    final String label = \"Event Listener\";\n    for (PluginInfo info : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = info.attributes.get(\"event\");\n      if (\"postCommit\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        commitCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postCommit: {}\", obj);\n      } else if (\"postOptimize\".equals(event)) {\n        SolrEventListener obj = core.createInitInstance(info,clazz,label,null);\n        optimizeCallbacks.add(obj);\n        log.info(\"added SolrEventListener for postOptimize: {}\", obj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403c3219db9547cd15baeb98f0804fbb65f36c0f":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403c3219db9547cd15baeb98f0804fbb65f36c0f"]},"commit2Childs":{"403c3219db9547cd15baeb98f0804fbb65f36c0f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"740d649f013f07efbeb73ca854f106c60166e7c0":["403c3219db9547cd15baeb98f0804fbb65f36c0f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}