{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,Predicate[CharSequence],boolean,String,BiConsumer[String,Object]).mjava","commits":[{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,Predicate[CharSequence],boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,String,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, Predicate<CharSequence> propertyFilter,\n                                              boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.test(MEAN)) {\n        consumer.accept(name + separator + MEAN, snapshot.getMean());\n      }\n    } else {\n      MapWriter writer = ew -> {\n        String prop = \"count\";\n        if (propertyFilter.test(prop)) {\n          ew.putNoEx(prop, histogram.getCount());\n        }\n        // non-time based values\n        addSnapshot(ew, snapshot, propertyFilter, false);\n      };\n      consumer.accept(name, writer);\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}