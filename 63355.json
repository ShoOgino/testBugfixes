{"path":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"/dev/null","sourceNew":"  public final byte[] norms(String field) throws IOException {\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return null;\n    if (norm.bytes == null) {\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;\n    }\n    return norm.bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return null;\n    if (norm.bytes == null) {                     // value not yet read\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;                         // cache it\n    }\n    return norm.bytes;\n  }\n\n","sourceOld":"  public final byte[] norms(String field) throws IOException {\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return null;\n    if (norm.bytes == null) {\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;\n    }\n    return norm.bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return null;\n    if (norm.bytes == null) {                     // value not yet read\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;                         // cache it\n    }\n    return norm.bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return null;\n    if (norm.bytes == null) {                     // value not yet read\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;                         // cache it\n    }\n    return norm.bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = getNorms(field);\n    if (bytes==null) bytes=fakeNorms();\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return null;\n    if (norm.bytes == null) {                     // value not yet read\n      byte[] bytes = new byte[maxDoc()];\n      norms(field, bytes, 0);\n      norm.bytes = bytes;                         // cache it\n    }\n    return norm.bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    if (bytes==null) bytes=fakeNorms();\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = getNorms(field);\n    if (bytes==null) bytes=fakeNorms();\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    if (bytes==null && !getDisableFakeNorms()) bytes=fakeNorms();\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    if (bytes==null) bytes=fakeNorms();\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    if (bytes==null && !getDisableFakeNorms()) bytes=fakeNorms();\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["950f3c7592cb559e2534e5089c78833250e156a3"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"950f3c7592cb559e2534e5089c78833250e156a3":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["950f3c7592cb559e2534e5089c78833250e156a3"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"950f3c7592cb559e2534e5089c78833250e156a3":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}