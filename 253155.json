{"path":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}