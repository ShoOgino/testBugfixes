{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["618036ba448ea6c0b3de811e67c5b16c0bd9a5b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"618036ba448ea6c0b3de811e67c5b16c0bd9a5b0","date":1498521780,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && NumberType.DATE.equals(schFld.getType().getNumberType())) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":["2106271e380c198349e0f6eac0395bb462913fab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && NumberType.DATE.equals(schFld.getType().getNumberType())) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && NumberType.DATE.equals(schFld.getType().getNumberType())) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof TrieDateField) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0982ea5c2b7f50890065ccf2b59068efc40eaafe","date":1538167811,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":null,"sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p>\n   * This implementation only formats dates using the {@link ExtractionDateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && NumberType.DATE.equals(schFld.getType().getNumberType())) {\n      //try to transform the date\n      try {\n        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw\n        result = date.toInstant().toString();//ISO format\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","618036ba448ea6c0b3de811e67c5b16c0bd9a5b0"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["28288370235ed02234a64753cdbf0c6ec096304a"],"618036ba448ea6c0b3de811e67c5b16c0bd9a5b0":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["2106271e380c198349e0f6eac0395bb462913fab"],"28288370235ed02234a64753cdbf0c6ec096304a":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","618036ba448ea6c0b3de811e67c5b16c0bd9a5b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c26f00b574427b55127e869b935845554afde1fa":["2106271e380c198349e0f6eac0395bb462913fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","618036ba448ea6c0b3de811e67c5b16c0bd9a5b0","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"618036ba448ea6c0b3de811e67c5b16c0bd9a5b0":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"28288370235ed02234a64753cdbf0c6ec096304a":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}