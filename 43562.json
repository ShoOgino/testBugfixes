{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","pathOld":"/dev/null","sourceNew":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, \"spill\", 0, singleValuePerDoc);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      offlinePointWriter.append(reader.packedValue(), i, heapPointWriter.docIDs[i]);\n    }\n\n    heapPointWriter = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["40a25138c40e1bc3d433f932be2dc432fbe68db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","pathOld":"/dev/null","sourceNew":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, \"spill\", 0, singleValuePerDoc);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      offlinePointWriter.append(reader.packedValue(), i, heapPointWriter.docIDs[i]);\n    }\n\n    heapPointWriter = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","sourceNew":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      reader.packedValue(scratchBytesRef1);\n      offlinePointWriter.append(scratchBytesRef1, heapPointWriter.docIDs[i]);\n    }\n\n    heapPointWriter = null;\n  }\n\n","sourceOld":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, \"spill\", 0, singleValuePerDoc);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      offlinePointWriter.append(reader.packedValue(), i, heapPointWriter.docIDs[i]);\n    }\n\n    heapPointWriter = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","sourceNew":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      offlinePointWriter.append(reader.pointValue());\n    }\n\n    heapPointWriter = null;\n  }\n\n","sourceOld":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      reader.packedValue(scratchBytesRef1);\n      offlinePointWriter.append(scratchBytesRef1, heapPointWriter.docIDs[i]);\n    }\n\n    heapPointWriter = null;\n  }\n\n","bugFix":null,"bugIntro":["40a25138c40e1bc3d433f932be2dc432fbe68db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40a25138c40e1bc3d433f932be2dc432fbe68db5","date":1550748397,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","sourceNew":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    for(int i=0;i<pointCount;i++) {\n      offlinePointWriter.append(heapPointWriter.getPackedValueSlice(i));\n    }\n    heapPointWriter = null;\n  }\n\n","sourceOld":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    PointReader reader = heapPointWriter.getReader(0, pointCount);\n    for(int i=0;i<pointCount;i++) {\n      boolean hasNext = reader.next();\n      assert hasNext;\n      offlinePointWriter.append(reader.pointValue());\n    }\n\n    heapPointWriter = null;\n  }\n\n","bugFix":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76a51551f05a6c96a115b5a656837ecc8fd0b1ff","date":1551422476,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#spillToOffline().mjava","sourceNew":null,"sourceOld":"  /** If the current segment has too many points then we spill over to temp files / offline sort. */\n  private void spillToOffline() throws IOException {\n\n    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:\n    offlinePointWriter = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"spill\", 0);\n    tempInput = offlinePointWriter.out;\n    for(int i=0;i<pointCount;i++) {\n      offlinePointWriter.append(heapPointWriter.getPackedValueSlice(i));\n    }\n    heapPointWriter = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"76a51551f05a6c96a115b5a656837ecc8fd0b1ff":["40a25138c40e1bc3d433f932be2dc432fbe68db5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76a51551f05a6c96a115b5a656837ecc8fd0b1ff"],"40a25138c40e1bc3d433f932be2dc432fbe68db5":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["40a25138c40e1bc3d433f932be2dc432fbe68db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"76a51551f05a6c96a115b5a656837ecc8fd0b1ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40a25138c40e1bc3d433f932be2dc432fbe68db5":["76a51551f05a6c96a115b5a656837ecc8fd0b1ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}