{"path":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","commits":[{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random.nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random.nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}