{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if(stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware() ){\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if(pcs.length == 2 &&  !pcs[0].isEmpty() && !pcs[1].isEmpty()){\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0],Integer.parseInt(pcs[1]));\n\n          if(Boolean.TRUE != status){\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair+ \"valid : \"+status);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","sourceNew":null,"sourceOld":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if(stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware() ){\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if(pcs.length == 2 &&  !pcs[0].isEmpty() && !pcs[1].isEmpty()){\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0],Integer.parseInt(pcs[1]));\n\n          if(Boolean.TRUE != status){\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair+ \"valid : \"+status);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if(stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware() ){\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if(pcs.length == 2 &&  !pcs[0].isEmpty() && !pcs[1].isEmpty()){\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0],Integer.parseInt(pcs[1]));\n\n          if(Boolean.TRUE != status){\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair+ \"valid : \"+status);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","sourceNew":null,"sourceOld":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if(stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware() ){\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if(pcs.length == 2 &&  !pcs[0].isEmpty() && !pcs[1].isEmpty()){\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0],Integer.parseInt(pcs[1]));\n\n          if(Boolean.TRUE != status){\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair+ \"valid : \"+status);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0], Integer.parseInt(pcs[1]));\n          \n          if (Boolean.TRUE != status) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair + \"valid : \" + status);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a20a867de92263c94258f9778db64a5efc7956d","date":1424955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","sourceNew":"  private Map<String , Integer> checkStateIsValid(CoreContainer cores, String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs = null;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if(status != null ){\n            if(result == null) result =  new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0], Integer.parseInt(pcs[1]));\n          \n          if (Boolean.TRUE != status) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair + \"valid : \" + status);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","sourceNew":"  private Map<String , Integer> checkStateIsValid(CoreContainer cores, String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs = null;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if(status != null ){\n            if(result == null) result =  new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private void checkStateIsValid(CoreContainer cores, String stateVer) {\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      String[] pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Boolean status = cores.getZkController().getZkStateReader().checkValid(pcs[0], Integer.parseInt(pcs[1]));\n          \n          if (Boolean.TRUE != status) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \"STATE STALE: \" + pair + \"valid : \" + status);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateIsValid(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#checkStateIsValid(CoreContainer,String).mjava","sourceNew":"  private Map<String, Integer> checkStateIsValid(String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if (status != null) {\n            if (result == null) result = new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String , Integer> checkStateIsValid(CoreContainer cores, String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs = null;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if(status != null ){\n            if(result == null) result =  new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9279b175e5e66258442d2123a50f052219a9cc1b","0a20a867de92263c94258f9778db64a5efc7956d"],"0a20a867de92263c94258f9778db64a5efc7956d":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["0a20a867de92263c94258f9778db64a5efc7956d"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a20a867de92263c94258f9778db64a5efc7956d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a20a867de92263c94258f9778db64a5efc7956d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}