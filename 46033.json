{"path":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   *  @throws TokenMgrError if ther parsing fails\n   */\n  public Query parse(String query) throws ParseException, TokenMgrError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    return Query(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d287fd9dfd8a046227860be51793208e76a86a8f","date":1068723746,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   *  @throws TokenMgrError if ther parsing fails\n   */\n  public Query parse(String query) throws ParseException, TokenMgrError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    return Query(field);\n  }\n\n","bugFix":null,"bugIntro":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14fe255a2f0c5745dde127acc8e0bb885743cbdf","date":1069844458,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c","date":1078315633,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query\tthe query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95f618017540c7d142945729862463ce101e0b95","date":1097869663,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a\n   * <a href=\"lucene.search.Query.html\">Query</a>.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8eb59a8f8160969edb4f4e46156fc560dcc60b7d","date":1153652916,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c15965e14235f835c17a1e8e8eb75bfb3a684e68","date":1173327536,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      return TopLevelQuery(field);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      return Query(field);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","bugFix":["d287fd9dfd8a046227860be51793208e76a86a8f"],"bugIntro":["2f0c71979827275ab91caba7232e8de375b40dd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f0c71979827275ab91caba7232e8de375b40dd5","date":1182818420,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : new BooleanQuery();\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      return TopLevelQuery(field);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","bugFix":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : new BooleanQuery();\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n          // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7e09310036a77c6096474049886b5c81136b99","date":1245786928,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f618017540c7d142945729862463ce101e0b95":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"14fe255a2f0c5745dde127acc8e0bb885743cbdf":["d287fd9dfd8a046227860be51793208e76a86a8f"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["14fe255a2f0c5745dde127acc8e0bb885743cbdf"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["2f0c71979827275ab91caba7232e8de375b40dd5"],"d287fd9dfd8a046227860be51793208e76a86a8f":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f0c71979827275ab91caba7232e8de375b40dd5":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["2e7e09310036a77c6096474049886b5c81136b99"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["8eb59a8f8160969edb4f4e46156fc560dcc60b7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e7e09310036a77c6096474049886b5c81136b99":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"8eb59a8f8160969edb4f4e46156fc560dcc60b7d":["95f618017540c7d142945729862463ce101e0b95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"95f618017540c7d142945729862463ce101e0b95":["8eb59a8f8160969edb4f4e46156fc560dcc60b7d"],"14fe255a2f0c5745dde127acc8e0bb885743cbdf":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["95f618017540c7d142945729862463ce101e0b95"],"d287fd9dfd8a046227860be51793208e76a86a8f":["14fe255a2f0c5745dde127acc8e0bb885743cbdf"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["2e7e09310036a77c6096474049886b5c81136b99"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["d287fd9dfd8a046227860be51793208e76a86a8f"],"2f0c71979827275ab91caba7232e8de375b40dd5":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c15965e14235f835c17a1e8e8eb75bfb3a684e68":["2f0c71979827275ab91caba7232e8de375b40dd5"],"2e7e09310036a77c6096474049886b5c81136b99":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"8eb59a8f8160969edb4f4e46156fc560dcc60b7d":["c15965e14235f835c17a1e8e8eb75bfb3a684e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}