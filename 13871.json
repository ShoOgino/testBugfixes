{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#testPathParts().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#testPathParts().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPathParts() throws Exception { // see PathParts\n    FileSystem fs = dfsCluster.getFileSystem();\n    int dfsClusterPort = fs.getWorkingDirectory().toUri().getPort();\n    assertTrue(dfsClusterPort > 0);\n    JobConf jobConf = getJobConf();\n    Configuration simpleConf = new Configuration();\n    \n    for (Configuration conf : Arrays.asList(jobConf, simpleConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"hdfs://localhost:12345/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(12345, parts.getPort());\n          assertEquals(\"hdfs://localhost:12345/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n    \n          uploadURL = \"hdfs://localhost/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(8020, parts.getPort());\n          assertEquals(\"hdfs://localhost:8020/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n        }\n      }\n    }    \n\n    for (Configuration conf : Arrays.asList(jobConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          // verify using absolute path\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);          \n          \n          // verify relative path is interpreted to be relative to user's home dir and resolved to an absolute path\n          uploadURL = \"xuser/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          String homeDir = \"/user/\" + System.getProperty(\"user.name\");\n          assertEquals(homeDir + \"/xuser/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);\n        }\n      }\n    }\n    \n    try {\n      new PathParts(\"/user/foo/bar.txt\", simpleConf);\n      fail(\"host/port resolution requires minimr conf, not a simple conf\");\n    } catch (IllegalArgumentException e) {\n      ; // expected\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#testPathParts().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineBasicMiniMRTest#testPathParts().mjava","sourceNew":"  @Test\n  public void testPathParts() throws Exception { // see PathParts\n    FileSystem fs = dfsCluster.getFileSystem();\n    int dfsClusterPort = fs.getWorkingDirectory().toUri().getPort();\n    assertTrue(dfsClusterPort > 0);\n    JobConf jobConf = getJobConf();\n    Configuration simpleConf = new Configuration();\n    \n    for (Configuration conf : Arrays.asList(jobConf, simpleConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"hdfs://localhost:12345/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(12345, parts.getPort());\n          assertEquals(\"hdfs://localhost:12345/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n    \n          uploadURL = \"hdfs://localhost/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(8020, parts.getPort());\n          assertEquals(\"hdfs://localhost:8020/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n        }\n      }\n    }    \n\n    for (Configuration conf : Arrays.asList(jobConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          // verify using absolute path\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);          \n          \n          // verify relative path is interpreted to be relative to user's home dir and resolved to an absolute path\n          uploadURL = \"xuser/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          String homeDir = \"/user/\" + System.getProperty(\"user.name\");\n          assertEquals(homeDir + \"/xuser/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);\n        }\n      }\n    }\n    \n    try {\n      new PathParts(\"/user/foo/bar.txt\", simpleConf);\n      fail(\"host/port resolution requires minimr conf, not a simple conf\");\n    } catch (IllegalArgumentException e) {\n      ; // expected\n    }    \n  }\n\n","sourceOld":"  @Test\n  public void testPathParts() throws Exception { // see PathParts\n    FileSystem fs = dfsCluster.getFileSystem();\n    int dfsClusterPort = fs.getWorkingDirectory().toUri().getPort();\n    assertTrue(dfsClusterPort > 0);\n    JobConf jobConf = getJobConf();\n    Configuration simpleConf = new Configuration();\n    \n    for (Configuration conf : Arrays.asList(jobConf, simpleConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"hdfs://localhost:12345/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(12345, parts.getPort());\n          assertEquals(\"hdfs://localhost:12345/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n    \n          uploadURL = \"hdfs://localhost/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertEquals(\"localhost\", parts.getHost());\n          assertEquals(8020, parts.getPort());\n          assertEquals(\"hdfs://localhost:8020/user/\" + down + \"bar.txt\", parts.getId());\n          assertEquals(parts.getId(), parts.getDownloadURL());\n          assertFileNotFound(parts);\n        }\n      }\n    }    \n\n    for (Configuration conf : Arrays.asList(jobConf)) {\n      for (String queryAndFragment : Arrays.asList(\"\", \"?key=value#fragment\")) {\n        for (String up : Arrays.asList(\"\", \"../\")) {\n          // verify using absolute path\n          String down = up.length() == 0 ? \"foo/\" : \"\";\n          String uploadURL = \"/user/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          PathParts parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          assertEquals(\"/user/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + \"/user/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);          \n          \n          // verify relative path is interpreted to be relative to user's home dir and resolved to an absolute path\n          uploadURL = \"xuser/foo/\" + up + \"bar.txt\" + queryAndFragment;\n          parts = new PathParts(uploadURL, conf);\n          assertEquals(uploadURL, parts.getUploadURL());\n          String homeDir = \"/user/\" + System.getProperty(\"user.name\");\n          assertEquals(homeDir + \"/xuser/\" + down + \"bar.txt\", parts.getURIPath());\n          assertEquals(\"bar.txt\", parts.getName());\n          assertEquals(\"hdfs\", parts.getScheme());\n          assertTrue(\"localhost\".equals(parts.getHost()) || \"localhost.localdomain\".equals(parts.getHost()));\n          assertEquals(dfsClusterPort, parts.getPort());\n          assertTrue(parts.getId().equals(\"hdfs://localhost:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n                  || parts.getId().equals(\"hdfs://localhost.localdomain:\" + dfsClusterPort + homeDir + \"/xuser/\" + down + \"bar.txt\")\n          );\n          assertFileNotFound(parts);\n        }\n      }\n    }\n    \n    try {\n      new PathParts(\"/user/foo/bar.txt\", simpleConf);\n      fail(\"host/port resolution requires minimr conf, not a simple conf\");\n    } catch (IllegalArgumentException e) {\n      ; // expected\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}