{"path":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8217c9a654e7f643e319942262bcf8806545fc98","date":1297114772,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":["01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d","date":1309085764,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":["d0398ae7345bbadabd4c035fae97ad2b8a8233d1","8217c9a654e7f643e319942262bcf8806545fc98"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"should be executed, and whether the response should be written\\n\"+\n         \"to STDOUT. These are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    final String doOut = System.getProperty(\"out\", DEFAULT_OUT);\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args, 0, out);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(t.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit(out);\n      }\n    \n    } catch(RuntimeException e) {\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && (\"-help\".equals(args[0]) || \"--help\".equals(args[0]) || \"-h\".equals(args[0]))) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw data to a Solr\\n\"+\n         \"port.  Data can be read from files specified as commandline args,\\n\"+\n         \"as raw commandline arg strings, or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/csv -Dtype=text/csv -jar post.jar *.csv\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/json -Dtype=application/json -jar post.jar *.json\\n\"+\n         \"  java -Durl=http://localhost:8983/solr/update/extract?literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, the Content-Type of the data, whether a commit\\n\"+\n         \"or optimize should be executed, and whether the response should\\n\"+\n         \"be written to STDOUT. These are the defaults for all System Properties:\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Dtype=\" + DEFAULT_DATA_TYPE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\"+\n         \"  -Doptimize=\" + DEFAULT_OPTIMIZE + \"\\n\"+\n         \"  -Dout=\" + DEFAULT_OUT + \"\\n\");\n      return;\n    }\n\n    OutputStream out = null;\n\n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    if (\"yes\".equals(System.getProperty(\"out\", DEFAULT_OUT))) {\n      out = System.out;\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          t.postFiles(args, 0, out);\n        } else {\n          info(\"No files specified. (Use -h for help)\");\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            t.postData(SimplePostTool.stringToStream(a), null, out);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        t.postData(System.in, null, out);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        t.commit();\n      }\n      if (\"yes\".equals(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE))) {\n        info(\"Performing an OPTIMIZE..\");\n        t.optimize();\n      }\n    \n    } catch(RuntimeException e) {\n      e.printStackTrace();\n      fatal(\"RuntimeException \" + e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["8217c9a654e7f643e319942262bcf8806545fc98","01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8217c9a654e7f643e319942262bcf8806545fc98","01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d"],"8217c9a654e7f643e319942262bcf8806545fc98":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","8217c9a654e7f643e319942262bcf8806545fc98"],"01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d":["8217c9a654e7f643e319942262bcf8806545fc98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","8217c9a654e7f643e319942262bcf8806545fc98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"8217c9a654e7f643e319942262bcf8806545fc98":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["8217c9a654e7f643e319942262bcf8806545fc98","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}