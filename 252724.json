{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","commits":[{"id":"27c7ceb638c80da55603b74dda1d75ca0be762fb","date":1496231753,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoConvexPolygon corresponding to what was specified.\n   */\n  public static GeoConvexPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":0,"author":"Chris Hostetter","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoConvexPolygon corresponding to what was specified.\n   */\n  public static GeoConvexPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf94887b07358be5e9583da452e0f4f9616e42b8","date":1496257424,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","sourceNew":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","sourceOld":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoConvexPolygon corresponding to what was specified.\n   */\n  public static GeoConvexPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoConvexPolygon(PlanetModel,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoConvexPolygon using the specified points. The polygon must have\n   * a maximum extent no larger than PI. The siding of the polygon is chosen so that any  adjacent\n   * point to a segment provides an interior measurement and therefore\n   * the polygon is a truly convex polygon. Note that this method should only be used when\n   * there is certainty that we are dealing with a convex polygon, e.g. the polygon has been serialized.\n   * If there is not such certainty, please refer to @{@link GeoPolygonFactory#makeGeoPolygon(PlanetModel, List)}.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoConvexPolygon(final PlanetModel planetModel,\n                                                      final List<GeoPoint> pointList) {\n    return new GeoConvexPolygon(planetModel, pointList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27c7ceb638c80da55603b74dda1d75ca0be762fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44b289ba5434fa10782118c697fa706d6cf231df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27c7ceb638c80da55603b74dda1d75ca0be762fb"],"cf94887b07358be5e9583da452e0f4f9616e42b8":["27c7ceb638c80da55603b74dda1d75ca0be762fb"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf94887b07358be5e9583da452e0f4f9616e42b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf94887b07358be5e9583da452e0f4f9616e42b8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","27c7ceb638c80da55603b74dda1d75ca0be762fb","44b289ba5434fa10782118c697fa706d6cf231df","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"27c7ceb638c80da55603b74dda1d75ca0be762fb":["44b289ba5434fa10782118c697fa706d6cf231df","cf94887b07358be5e9583da452e0f4f9616e42b8"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"cf94887b07358be5e9583da452e0f4f9616e42b8":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}