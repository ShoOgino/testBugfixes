{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexesNoOptimize(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed3ddf422b55498690f96f80188ea8a0fd5f7837","date":1282764477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory(random);\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012","c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockRAMDirectory(dir1);\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      final int count = new IndexSearcher(r).search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    final int count = new IndexSearcher(r).search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, IOContext.DEFAULT));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a37d7952ff54064a735708748444570f9963683e","date":1309331473,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, IOContext.DEFAULT));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328bdba1658682323c0be397ae918b11c22650c2","date":1320573399,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      searcher.close();\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    searcher.close();\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    assertEquals(0, dir1.getOpenDeletedFiles().size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    IndexReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddIndexes().mjava","sourceNew":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during addIndexes\n  public void testDuringAddIndexes() throws Exception {\n    MockDirectoryWrapper dir1 = newDirectory();\n    final IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    final Directory[] dirs = new Directory[10];\n    for (int i=0;i<10;i++) {\n      dirs[i] = new MockDirectoryWrapper(random, new RAMDirectory(dir1, newIOContext(random)));\n    }\n\n    DirectoryReader r = writer.getReader();\n\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[numThreads];\n    for(int i=0;i<numThreads;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            do {\n              try {\n                writer.addIndexes(dirs);\n                writer.maybeMerge();\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int lastCount = 0;\n    while(System.currentTimeMillis() < endTime) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      IndexSearcher searcher = newSearcher(r);\n      final int count = searcher.search(q, 10).totalHits;\n      assertTrue(count >= lastCount);\n      lastCount = count;\n    }\n\n    for(int i=0;i<numThreads;i++) {\n      threads[i].join();\n    }\n    // final check\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    if (r2 != null) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    IndexSearcher searcher = newSearcher(r);\n    final int count = searcher.search(q, 10).totalHits;\n    assertTrue(count >= lastCount);\n\n    assertEquals(0, excs.size());\n    r.close();\n    final Collection<String> openDeletedFiles = dir1.getOpenDeletedFiles();\n    assertEquals(\"openDeleted=\" + openDeletedFiles, 0, openDeletedFiles.size());\n\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["06584e6e98d592b34e1329b384182f368d2025e8","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["53a31399f2471493d67b19a95c028a74e0113b6a"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["06584e6e98d592b34e1329b384182f368d2025e8"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ed3ddf422b55498690f96f80188ea8a0fd5f7837"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a37d7952ff54064a735708748444570f9963683e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a37d7952ff54064a735708748444570f9963683e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["328bdba1658682323c0be397ae918b11c22650c2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","a37d7952ff54064a735708748444570f9963683e"],"328bdba1658682323c0be397ae918b11c22650c2":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ec890fad2ea96317f4429e0aa0085bb25673641","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["79c2cb24929f2649a8875fb629086171f914d5ce","a37d7952ff54064a735708748444570f9963683e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ed3ddf422b55498690f96f80188ea8a0fd5f7837":["a05409176bd65129d67a785ee70e881e238a9aef"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["328bdba1658682323c0be397ae918b11c22650c2"],"53a31399f2471493d67b19a95c028a74e0113b6a":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ec890fad2ea96317f4429e0aa0085bb25673641"],"79c2cb24929f2649a8875fb629086171f914d5ce":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a05409176bd65129d67a785ee70e881e238a9aef":["ed3ddf422b55498690f96f80188ea8a0fd5f7837"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8a8259c922a83abc544609227a60d48e5ee93e7e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","79c2cb24929f2649a8875fb629086171f914d5ce","a37d7952ff54064a735708748444570f9963683e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a37d7952ff54064a735708748444570f9963683e":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"328bdba1658682323c0be397ae918b11c22650c2":["06584e6e98d592b34e1329b384182f368d2025e8"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"ed3ddf422b55498690f96f80188ea8a0fd5f7837":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5d004d0e0b3f65bb40da76d476d659d7888270e8","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}