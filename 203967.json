{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#readLiveDocs(Directory,SegmentInfoPerCommit,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#readLiveDocs(Directory,SegmentInfoPerCommit,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#readLiveDocs(Directory,SegmentInfoPerCommit,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentInfoPerCommit info, IOContext context) throws IOException {\n    assert info.hasDeletions();\n    BytesRef scratch = new BytesRef();\n    CharsRef scratchUTF16 = new CharsRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexInput in = null;\n    boolean success = false;\n    try {\n      in = dir.openInput(fileName, context);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, SIZE);\n      int size = parseIntAt(scratch, SIZE.length, scratchUTF16);\n      \n      BitSet bits = new BitSet(size);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, DOC);\n        int docid = parseIntAt(scratch, DOC.length, scratchUTF16);\n        bits.set(docid);\n        SimpleTextUtil.readLine(in, scratch);\n      }\n      \n      success = true;\n      return new SimpleTextBits(bits, size);\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentInfoPerCommit info, IOContext context) throws IOException {\n    assert info.hasDeletions();\n    BytesRef scratch = new BytesRef();\n    CharsRef scratchUTF16 = new CharsRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexInput in = null;\n    boolean success = false;\n    try {\n      in = dir.openInput(fileName, context);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, SIZE);\n      int size = parseIntAt(scratch, SIZE.length, scratchUTF16);\n      \n      BitSet bits = new BitSet(size);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, DOC);\n        int docid = parseIntAt(scratch, DOC.length, scratchUTF16);\n        bits.set(docid);\n        SimpleTextUtil.readLine(in, scratch);\n      }\n      \n      success = true;\n      return new SimpleTextBits(bits, size);\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#readLiveDocs(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat#readLiveDocs(Directory,SegmentInfoPerCommit,IOContext).mjava","sourceNew":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {\n    assert info.hasDeletions();\n    BytesRef scratch = new BytesRef();\n    CharsRef scratchUTF16 = new CharsRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexInput in = null;\n    boolean success = false;\n    try {\n      in = dir.openInput(fileName, context);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, SIZE);\n      int size = parseIntAt(scratch, SIZE.length, scratchUTF16);\n      \n      BitSet bits = new BitSet(size);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, DOC);\n        int docid = parseIntAt(scratch, DOC.length, scratchUTF16);\n        bits.set(docid);\n        SimpleTextUtil.readLine(in, scratch);\n      }\n      \n      success = true;\n      return new SimpleTextBits(bits, size);\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits readLiveDocs(Directory dir, SegmentInfoPerCommit info, IOContext context) throws IOException {\n    assert info.hasDeletions();\n    BytesRef scratch = new BytesRef();\n    CharsRef scratchUTF16 = new CharsRef();\n    \n    String fileName = IndexFileNames.fileNameFromGeneration(info.info.name, LIVEDOCS_EXTENSION, info.getDelGen());\n    IndexInput in = null;\n    boolean success = false;\n    try {\n      in = dir.openInput(fileName, context);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, SIZE);\n      int size = parseIntAt(scratch, SIZE.length, scratchUTF16);\n      \n      BitSet bits = new BitSet(size);\n      \n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, DOC);\n        int docid = parseIntAt(scratch, DOC.length, scratchUTF16);\n        bits.set(docid);\n        SimpleTextUtil.readLine(in, scratch);\n      }\n      \n      success = true;\n      return new SimpleTextBits(bits, size);\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}