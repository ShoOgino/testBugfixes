{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","pathOld":"/dev/null","sourceNew":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left.equals((boolean)right);\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4958642f967bfbd6f083ddf50f141bcde89b9ec1","date":1489572234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left.equals((boolean)right);\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bca83a747f8e297ee4412c0d18bdd3a98c09df3b","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left.equals((boolean)right);\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left.equals((boolean)right);\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualToEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualToEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualToEvaluator#constructChecker(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EqualsEvaluator#constructChecker(Object).mjava","sourceNew":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","sourceOld":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      return new NullChecker() {\n        @Override\n        public boolean test(Object left, Object right) {\n          return null == left && null == right;\n        }\n      };\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left == (boolean)right;\n        }\n      };\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return left.equals(right);\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["ab68488225b6a6c357dda72ed11dedca9914a192","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["4958642f967bfbd6f083ddf50f141bcde89b9ec1"],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"ab68488225b6a6c357dda72ed11dedca9914a192":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","bca83a747f8e297ee4412c0d18bdd3a98c09df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","bca83a747f8e297ee4412c0d18bdd3a98c09df3b","ab68488225b6a6c357dda72ed11dedca9914a192"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}