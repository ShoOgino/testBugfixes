{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"/dev/null","sourceNew":"  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    ZkController zkController = cluster.getJettySolrRunners().get(0).getCoreContainer().getZkController();\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard1\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard1\").getTerms().values().toArray(new Long[2]));\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard2\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard2\").getTerms().values().toArray(new Long[2]));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","sourceNew":"  @Test\r\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    ZkController zkController = cluster.getJettySolrRunners().get(0).getCoreContainer().getZkController();\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard1\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard1\").getTerms().values().toArray(new Long[2]));\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard2\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard2\").getTerms().values().toArray(new Long[2]));\r\n  }\r\n\n","sourceOld":"  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    ZkController zkController = cluster.getJettySolrRunners().get(0).getCoreContainer().getZkController();\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard1\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard1\").getTerms().values().toArray(new Long[2]));\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard2\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard2\").getTerms().values().toArray(new Long[2]));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40ebc0a9154221bc8b1d028364b852bef8e35c03","date":1520911930,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","sourceNew":"  @Test\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    ZkController zkController = cluster.getJettySolrRunners().get(0).getCoreContainer().getZkController();\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard1\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard1\").getTerms().values().toArray(new Long[2]));\r\n    waitFor(2, () -> zkController.getShardTerms(collection, \"shard2\").getTerms().size());\r\n    assertArrayEquals(new Long[]{0L, 0L}, zkController.getShardTerms(collection, \"shard2\").getTerms().values().toArray(new Long[2]));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","sourceNew":"  @Test\r\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\n    String collection = \"collection1\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      zkShardTerms.registerTerm(\"replica1\");\n      zkShardTerms.registerTerm(\"replica2\");\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n    }\n\n    // When new collection is created, the old term nodes will be removed\n    CollectionAdminRequest.createCollection(collection, 2, 2)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n  }\n\n","sourceOld":"  @Test\r\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\r\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\r\n    String collection = \"collection1\";\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      zkShardTerms.registerTerm(\"replica1\");\r\n      zkShardTerms.registerTerm(\"replica2\");\r\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\r\n    }\r\n\r\n    // When new collection is created, the old term nodes will be removed\r\n    CollectionAdminRequest.createCollection(collection, 2, 2)\r\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\r\n        .setMaxShardsPerNode(1000)\r\n        .process(cluster.getSolrClient());\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\r\n      waitFor(2, () -> zkShardTerms.getTerms().size());\r\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testParticipationOfReplicas().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\n    String collection = \"collection1\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      zkShardTerms.registerTerm(\"replica1\");\n      zkShardTerms.registerTerm(\"replica2\");\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n    }\n\n    // When new collection is created, the old term nodes will be removed\n    CollectionAdminRequest.createCollection(collection, 2, 2)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testParticipationOfReplicas() throws IOException, SolrServerException, InterruptedException {\n    String collection = \"collection1\";\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      zkShardTerms.registerTerm(\"replica1\");\n      zkShardTerms.registerTerm(\"replica2\");\n      zkShardTerms.ensureTermsIsHigher(\"replica1\", Collections.singleton(\"replica2\"));\n    }\n\n    // When new collection is created, the old term nodes will be removed\n    CollectionAdminRequest.createCollection(collection, 2, 2)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard2\", cluster.getZkClient())) {\n      waitFor(2, () -> zkShardTerms.getTerms().size());\n      assertArrayEquals(new Long[]{0L, 0L}, zkShardTerms.getTerms().values().toArray(new Long[2]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["84f20f331d8001864545c7021812d8c6509c7593"],"40ebc0a9154221bc8b1d028364b852bef8e35c03":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["40ebc0a9154221bc8b1d028364b852bef8e35c03"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["40ebc0a9154221bc8b1d028364b852bef8e35c03"],"40ebc0a9154221bc8b1d028364b852bef8e35c03":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"84f20f331d8001864545c7021812d8c6509c7593":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}