{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#nextPosition().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto)// ;\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          // if (DEBUG) {\n          //   System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          // }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto + \" payloadByteUpto=\" + payloadByteUpto)// ;\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek pos to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          // if (DEBUG) {\n          //   System.out.println(\"      seek pay to pendingFP=\" + payPendingFP);\n          // }\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}