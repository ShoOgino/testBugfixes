{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}