{"path":"lucene/backwards/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField (String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, DOUBLE);\n    else\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}