{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","sourceNew":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    Hits hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    Hits hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","sourceNew":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    Hits hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","sourceNew":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","sourceNew":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperQueryParsing().mjava","sourceNew":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Will not work on an index without unigrams, since QueryParser automatically\n   * tokenizes on whitespace.\n   */\n  public void testShingleAnalyzerWrapperQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"test sentence\");\n    int[] ranks = new int[] { 1, 2, 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}