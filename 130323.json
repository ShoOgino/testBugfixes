{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#printStats().mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#printStats().mjava","pathOld":"/dev/null","sourceNew":"  public void printStats() {\n    System.out.println(\"Number of keys = \" + Integer.toString(length));\n    System.out.println(\"Node count = \" + Integer.toString(freenode));\n    // System.out.println(\"Array length = \" + Integer.toString(eq.length));\n    System.out.println(\"Key Array length = \" + Integer.toString(kv.length()));\n\n    /*\n     * for(int i=0; i<kv.length(); i++) if ( kv.get(i) != 0 )\n     * System.out.print(kv.get(i)); else System.out.println(\"\");\n     * System.out.println(\"Keys:\"); for(Enumeration enum = keys();\n     * enum.hasMoreElements(); ) System.out.println(enum.nextElement());\n     */\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#printStats().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#printStats().mjava","sourceNew":"  public void printStats() {\n    System.out.println(\"Number of keys = \" + Integer.toString(length));\n    System.out.println(\"Node count = \" + Integer.toString(freenode));\n    // System.out.println(\"Array length = \" + Integer.toString(eq.length));\n    System.out.println(\"Key Array length = \" + Integer.toString(kv.length()));\n\n    /*\n     * for(int i=0; i<kv.length(); i++) if ( kv.get(i) != 0 )\n     * System.out.print(kv.get(i)); else System.out.println(\"\");\n     * System.out.println(\"Keys:\"); for(Enumeration enum = keys();\n     * enum.hasMoreElements(); ) System.out.println(enum.nextElement());\n     */\n\n  }\n\n","sourceOld":"  public void printStats() {\n    System.out.println(\"Number of keys = \" + Integer.toString(length));\n    System.out.println(\"Node count = \" + Integer.toString(freenode));\n    // System.out.println(\"Array length = \" + Integer.toString(eq.length));\n    System.out.println(\"Key Array length = \" + Integer.toString(kv.length()));\n\n    /*\n     * for(int i=0; i<kv.length(); i++) if ( kv.get(i) != 0 )\n     * System.out.print(kv.get(i)); else System.out.println(\"\");\n     * System.out.println(\"Keys:\"); for(Enumeration enum = keys();\n     * enum.hasMoreElements(); ) System.out.println(enum.nextElement());\n     */\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}