{"path":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = _TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = TestUtil.createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = TestUtil.createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = TestUtil.getTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.shutdown();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.shutdown();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    Path dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    Path dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    Path dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfbc44e97eb7ff6358e4f2ed1d2bfe6990b1e30","date":1455491897,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":null,"sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    Path dirPath = createTempDir(\"testLuceneMmap\");\n    MMapDirectory dir = new MMapDirectory(dirPath);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newTextField(\"data\", f, Field.Store.YES));  \n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"edfbc44e97eb7ff6358e4f2ed1d2bfe6990b1e30":["285cdc737de75b7cc7c284a156b20214deb67bca"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edfbc44e97eb7ff6358e4f2ed1d2bfe6990b1e30"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["04f07771a2a7dd3a395700665ed839c3dae2def2"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"285cdc737de75b7cc7c284a156b20214deb67bca":["edfbc44e97eb7ff6358e4f2ed1d2bfe6990b1e30"],"edfbc44e97eb7ff6358e4f2ed1d2bfe6990b1e30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}