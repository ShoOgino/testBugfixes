{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"1b51bf16b2321204d381cc1154f0c975f5e8b9a2","date":1491806707,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d913bcce36d9d659d239969d07e20d245a5690d9","date":1496064789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  public void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op)\n      throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                               AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, List<Clause>> policies = currentConfig.getPolicy().getPolicies();\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n    policies = new HashMap<>(policies);\n    policies.remove(policyName);\n    Policy p = currentConfig.getPolicy().withPolicies(policies);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  public void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op)\n      throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (op.hasError()) checkErr(op);\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n    }\n    checkErr(op);\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No policy exists with name: \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (op.hasError()) checkErr(op);\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n    }\n    checkErr(op);\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemovePolicy(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  private void handleRemovePolicy(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    String policyName = (String) op.getCommandData();\n\n    if (op.hasError()) checkErr(op);\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> policies = (Map<String, Object>) autoScalingConf.get(\"policies\");\n    if (policies == null || !policies.containsKey(policyName)) {\n      op.addError(\"No policy exists with name: \" + policyName);\n    }\n    checkErr(op);\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["afde616cab4149eba221511fd7ff21d460cded7c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d913bcce36d9d659d239969d07e20d245a5690d9":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["afde616cab4149eba221511fd7ff21d460cded7c","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"afde616cab4149eba221511fd7ff21d460cded7c":["28288370235ed02234a64753cdbf0c6ec096304a"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["d913bcce36d9d659d239969d07e20d245a5690d9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","1b51bf16b2321204d381cc1154f0c975f5e8b9a2","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"d913bcce36d9d659d239969d07e20d245a5690d9":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["d913bcce36d9d659d239969d07e20d245a5690d9"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afde616cab4149eba221511fd7ff21d460cded7c":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"28288370235ed02234a64753cdbf0c6ec096304a":["afde616cab4149eba221511fd7ff21d460cded7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}