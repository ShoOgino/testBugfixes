{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\")), BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{\n        { \"w1\", \"w3\", \"w4\" },\n        { \"w3\", \"w3\" },\n        { \"w1\", \"xx\", \"w4\" },\n        { \"w1\", \"w1\", \"w4\", \"w3\" },\n        {}\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\")), BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{\n        { \"w1\", \"w3\", \"w4\" },\n        { \"w3\", \"w3\" },\n        { \"w1\", \"xx\", \"w4\" },\n        { \"w1\", \"w1\", \"w4\", \"w3\" },\n        {}\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364","date":1524498677,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Query q = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")), BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\")), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\")), BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkTerms(q, FIELD_WITH_OFFSETS, new String[][]{\n        { \"w1\", \"w3\", \"w4\" },\n        { \"w3\", \"w3\" },\n        { \"w1\", \"xx\", \"w4\" },\n        { \"w1\", \"w1\", \"w4\", \"w3\" },\n        {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 3, 1, 3, 3, 0, 0 });\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 3, 1, 3, 3, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 3, 1, 3, 3, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d70ba91a4999a5387559a9ad50e3cfe9cfd970","date":1565173681,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testMinShouldMatch().mjava","sourceNew":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = NamedMatches.wrapQuery(\"w1\", new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\")));\n    Query w3 = NamedMatches.wrapQuery(\"w3\", new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\")));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = NamedMatches.wrapQuery(\"xx\", new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\")));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 3, 1, 3, 3, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n    checkSubMatches(q, new String[][]{ {\"w1\", \"w3\"}, {\"w3\"}, {\"w1\", \"xx\"}, {\"w1\", \"w3\"}, {}, {}});\n  }\n\n","sourceOld":"  public void testMinShouldMatch() throws IOException {\n    Query w1 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    Query w3 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w3\"));\n    Query w4 = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w4\"));\n    Query xx = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"xx\"));\n    Query q = new BooleanQuery.Builder()\n        .add(w3, BooleanClause.Occur.SHOULD)\n        .add(new BooleanQuery.Builder()\n            .add(w1, BooleanClause.Occur.SHOULD)\n            .add(w4, BooleanClause.Occur.SHOULD)\n            .add(xx, BooleanClause.Occur.SHOULD)\n            .setMinimumNumberShouldMatch(2)\n            .build(), BooleanClause.Occur.SHOULD)\n        .build();\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11 },\n        { 1, 1, 1, 3, 5, 3, 3, 9, 11 },\n        { 2, 0, 0, 0, 2, 1, 1, 3, 5, 4, 4, 12, 14 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8, 3, 3, 9, 11, 5, 5, 15, 17 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 3, 1, 3, 3, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}