{"path":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,String,CountDownLatch).mjava","commits":[{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,String,CountDownLatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,CountDownLatch).mjava","sourceNew":"    /**\n     * Watch for recovery of a replica\n     * @param collectionId collection name\n     * @param shardId shard id\n     * @param replicaId source replica name (coreNodeName)\n     * @param targetCore specific target core name - if null then any active replica will do\n     * @param countDownLatch countdown when recovered\n     */\n    RecoveryWatcher(String collectionId, String shardId, String replicaId, String targetCore, CountDownLatch countDownLatch) {\n      this.collectionId = collectionId;\n      this.shardId = shardId;\n      this.replicaId = replicaId;\n      this.targetCore = targetCore;\n      this.countDownLatch = countDownLatch;\n    }\n\n","sourceOld":"    RecoveryWatcher(String collectionId, String shardId, String replicaId, CountDownLatch countDownLatch) {\n      this.collectionId = collectionId;\n      this.shardId = shardId;\n      this.replicaId = replicaId;\n      this.countDownLatch = countDownLatch;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,String,CountDownLatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,CountDownLatch).mjava","sourceNew":"    /**\n     * Watch for recovery of a replica\n     * @param collectionId collection name\n     * @param shardId shard id\n     * @param replicaId source replica name (coreNodeName)\n     * @param targetCore specific target core name - if null then any active replica will do\n     * @param countDownLatch countdown when recovered\n     */\n    RecoveryWatcher(String collectionId, String shardId, String replicaId, String targetCore, CountDownLatch countDownLatch) {\n      this.collectionId = collectionId;\n      this.shardId = shardId;\n      this.replicaId = replicaId;\n      this.targetCore = targetCore;\n      this.countDownLatch = countDownLatch;\n    }\n\n","sourceOld":"    RecoveryWatcher(String collectionId, String shardId, String replicaId, CountDownLatch countDownLatch) {\n      this.collectionId = collectionId;\n      this.shardId = shardId;\n      this.replicaId = replicaId;\n      this.countDownLatch = countDownLatch;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd.RecoveryWatcher#RecoveryWatcher(String,String,String,String,CountDownLatch).mjava","sourceNew":null,"sourceOld":"    /**\n     * Watch for recovery of a replica\n     * @param collectionId collection name\n     * @param shardId shard id\n     * @param replicaId source replica name (coreNodeName)\n     * @param targetCore specific target core name - if null then any active replica will do\n     * @param countDownLatch countdown when recovered\n     */\n    RecoveryWatcher(String collectionId, String shardId, String replicaId, String targetCore, CountDownLatch countDownLatch) {\n      this.collectionId = collectionId;\n      this.shardId = shardId;\n      this.replicaId = replicaId;\n      this.targetCore = targetCore;\n      this.countDownLatch = countDownLatch;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bcfee499548996a6e5448bbf93b8f276d010270":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bcfee499548996a6e5448bbf93b8f276d010270"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2bcfee499548996a6e5448bbf93b8f276d010270":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["2bcfee499548996a6e5448bbf93b8f276d010270","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}