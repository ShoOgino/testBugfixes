{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      switch (wildcardNode.getText().charAt(0)) {\n\n      case '*':\n      case '?':\n        throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                .toQueryString(new EscapeQuerySyntaxImpl())));\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      switch (wildcardNode.getText().charAt(0)) {\n\n      case '*':\n      case '?':\n        throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                .toQueryString(new EscapeQuerySyntaxImpl())));\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      switch (wildcardNode.getText().charAt(0)) {\n\n      case '*':\n      case '?':\n        throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                .toQueryString(new EscapeQuerySyntaxImpl())));\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a9a95db9416e75497c862dda290648d8dfdc83f","date":1252550690,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, new Object[]{node\n                    .toQueryString(new EscapeQuerySyntaxImpl())}));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08","date":1254612983,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, new Object[]{node\n                    .toQueryString(new EscapeQuerySyntaxImpl())}));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AllowLeadingWildcardProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof WildcardQueryNode) {\n      WildcardQueryNode wildcardNode = (WildcardQueryNode) node;\n\n      if (wildcardNode.getText().length() > 0) {\n        \n        // Validate if the wildcard was escaped\n        if (UnescapedCharSequence.wasEscaped(wildcardNode.getText(), 0))\n          return node;\n        \n        switch (wildcardNode.getText().charAt(0)) {    \n          case '*':\n          case '?':\n            throw new QueryNodeException(new MessageImpl(\n                QueryParserMessages.LEADING_WILDCARD_NOT_ALLOWED, node\n                    .toQueryString(new EscapeQuerySyntaxImpl())));    \n        }\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["f75cd88b219e040b204bff4c189784659752f786"],"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["e8a848e758754282137f42bf85793c278e250390"],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"],"e8a848e758754282137f42bf85793c278e250390":["f75cd88b219e040b204bff4c189784659752f786"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"f75cd88b219e040b204bff4c189784659752f786":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}