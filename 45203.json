{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRangeSplit(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    String field=\"ascfield\"+precisionStep;\n    // 10 random tests\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int  i =0;  i< num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs - noDocs/2);\n      int upper=(int)(random().nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["770342641f7b505eaa8dccdc666158bff2419109"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}