{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Point,int,boolean).mjava","commits":[{"id":"6b43aca0f70aef9b914114574de1d0916ad2a32b","date":1360908147,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getNode(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Node> getNodes(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Subclasses might override {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean)}\n   * and check if the argument is a shape and if so, delegate\n   * to this implementation, which calls {@link #getNode(com.spatial4j.core.shape.Point, int)} and\n   * then calls {@link #getNode(String)} repeatedly if inclParents is true.\n   */\n  protected final List<Node> getNodesAltPoint(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getNode(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Node> getNodes(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Subclasses might override {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean)}\n   * and check if the argument is a shape and if so, delegate\n   * to this implementation, which calls {@link #getNode(com.spatial4j.core.shape.Point, int)} and\n   * then calls {@link #getNode(String)} repeatedly if inclParents is true.\n   */\n  protected final List<Node> getNodesAltPoint(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<Cell>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getNode(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Node> getNodes(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["6b43aca0f70aef9b914114574de1d0916ad2a32b"]},"commit2Childs":{"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b41f996b22bd5518650f897d050088ff808ec03","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["3b41f996b22bd5518650f897d050088ff808ec03","8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8259c159da2de2e8528524fb76b244b46cbded59":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}