{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","commits":[{"id":"ef06b0d1cc722b335e220aac1145914fe6362875","date":1381231524,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (withPayload) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (withPayload) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ef06b0d1cc722b335e220aac1145914fe6362875":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["ef06b0d1cc722b335e220aac1145914fe6362875"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef06b0d1cc722b335e220aac1145914fe6362875":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef06b0d1cc722b335e220aac1145914fe6362875"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}