{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#heapAdjust(ScoreDoc[],int,int).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#heapAdjust(ScoreDoc[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void heapAdjust(ScoreDoc[] hits, int size, int root) {\n    final ScoreDoc doc = hits[root];\n    final float score = doc.score;\n    int i = root;\n    while (i <= ((size >> 1) - 1)) {\n      final int lchild = (i << 1) + 1;\n      final ScoreDoc ldoc = hits[lchild];\n      final float lscore = ldoc.score;\n      float rscore = Float.MAX_VALUE;\n      final int rchild = (i << 1) + 2;\n      ScoreDoc rdoc = null;\n      if (rchild < size) {\n        rdoc = hits[rchild];\n        rscore = rdoc.score;\n      }\n      if (lscore < score) {\n        if (rscore < lscore) {\n          hits[i] = rdoc;\n          hits[rchild] = doc;\n          i = rchild;\n        } else {\n          hits[i] = ldoc;\n          hits[lchild] = doc;\n          i = lchild;\n        }\n      } else if (rscore < score) {\n        hits[i] = rdoc;\n        hits[rchild] = doc;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRRescorer#heapAdjust(ScoreDoc[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void heapAdjust(ScoreDoc[] hits, int size, int root) {\n    final ScoreDoc doc = hits[root];\n    final float score = doc.score;\n    int i = root;\n    while (i <= ((size >> 1) - 1)) {\n      final int lchild = (i << 1) + 1;\n      final ScoreDoc ldoc = hits[lchild];\n      final float lscore = ldoc.score;\n      float rscore = Float.MAX_VALUE;\n      final int rchild = (i << 1) + 2;\n      ScoreDoc rdoc = null;\n      if (rchild < size) {\n        rdoc = hits[rchild];\n        rscore = rdoc.score;\n      }\n      if (lscore < score) {\n        if (rscore < lscore) {\n          hits[i] = rdoc;\n          hits[rchild] = doc;\n          i = rchild;\n        } else {\n          hits[i] = ldoc;\n          hits[lchild] = doc;\n          i = lchild;\n        }\n      } else if (rscore < score) {\n        hits[i] = rdoc;\n        hits[rchild] = doc;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}