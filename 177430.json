{"path":"src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","commits":[{"id":"5241670df94f0524d3e8e9764331dea13b545564","date":1197914713,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsertWithOverflow() {\n    int size = 4;\n    PriorityQueue pq = new IntegerQueue(size);\n    Integer i1 = new Integer(2);\n    Integer i2 = new Integer(3);\n    Integer i3 = new Integer(1);\n    Integer i4 = new Integer(5);\n    Integer i5 = new Integer(7);\n    Integer i6 = new Integer(1);\n    \n    assertNull(pq.insertWithOverflow(i1));\n    assertNull(pq.insertWithOverflow(i2));\n    assertNull(pq.insertWithOverflow(i3));\n    assertNull(pq.insertWithOverflow(i4));\n    assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n    assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n    assertEquals(size, pq.size());\n    assertEquals(2, ((Integer) pq.top()).intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d48430886f0d62ca63d20bf2a8bc01acee0c12f","date":1254504483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","sourceNew":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","sourceOld":"  public void testInsertWithOverflow() {\n    int size = 4;\n    PriorityQueue pq = new IntegerQueue(size);\n    Integer i1 = new Integer(2);\n    Integer i2 = new Integer(3);\n    Integer i3 = new Integer(1);\n    Integer i4 = new Integer(5);\n    Integer i5 = new Integer(7);\n    Integer i6 = new Integer(1);\n    \n    assertNull(pq.insertWithOverflow(i1));\n    assertNull(pq.insertWithOverflow(i2));\n    assertNull(pq.insertWithOverflow(i3));\n    assertNull(pq.insertWithOverflow(i4));\n    assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n    assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n    assertEquals(size, pq.size());\n    assertEquals(2, ((Integer) pq.top()).intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","sourceNew":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","sourceOld":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["5241670df94f0524d3e8e9764331dea13b545564"],"5241670df94f0524d3e8e9764331dea13b545564":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5241670df94f0524d3e8e9764331dea13b545564"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5241670df94f0524d3e8e9764331dea13b545564":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}