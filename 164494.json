{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      IndexableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"assertMatches searcher=\" + searcher + \" sort=\" + sort);\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for(int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for(int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"assertMatches searcher=\" + searcher + \" sort=\" + sort);\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for(int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for(int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"assertMatches searcher=\" + searcher + \" sort=\" + sort);\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for(int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for(int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#assertMatches(String,IndexSearcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(String msg, IndexSearcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"assertMatches searcher=\" + searcher + \" sort=\" + sort);\n    }\n\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search(query, null, Math.max(1, expectedResult.length()), sort, true, true);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(expectedResult.length(),hits.totalHits);\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for(int i=0; i<n; ++i) {\n      StoredDocument doc = searcher.doc(result[i].doc);\n      StorableField[] v = doc.getFields(\"tracer\");\n      for(int j=0; j<v.length; ++j) {\n        buff.append (v[j].stringValue());\n      }\n    }\n    assertEquals(msg, expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"1d028314cced5858683a1bb4741423d0f934257b":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["1d028314cced5858683a1bb4741423d0f934257b"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b","ef0d8a69209261514c5739c770bba706c2308450"],"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}