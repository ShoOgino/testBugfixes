{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34e4c06b8371591fe849dd3cd2cc790850dc5ca6","date":1281780823,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5efdc434c21e20adcb20d316e227be9eaf377d2","date":1292842437,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes(true);\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes(true);\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      float delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0f - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes(true);\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes(true);\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#sizeBytes(SegmentInfo).mjava","sourceNew":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","sourceOld":"  protected long sizeBytes(SegmentInfo info) throws IOException {\n    long byteSize = info.sizeInBytes();\n    if (calibrateSizeByDeletes) {\n      int delCount = writer.get().numDeletedDocs(info);\n      double delRatio = (info.docCount <= 0 ? 0.0f : ((float)delCount / (float)info.docCount));\n      assert delRatio <= 1.0;\n      return (info.docCount <= 0 ?  byteSize : (long)(byteSize * (1.0 - delRatio)));\n    } else {\n      return byteSize;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["34e4c06b8371591fe849dd3cd2cc790850dc5ca6","d5efdc434c21e20adcb20d316e227be9eaf377d2"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["d5efdc434c21e20adcb20d316e227be9eaf377d2"],"d5efdc434c21e20adcb20d316e227be9eaf377d2":["34e4c06b8371591fe849dd3cd2cc790850dc5ca6"],"34e4c06b8371591fe849dd3cd2cc790850dc5ca6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","d5efdc434c21e20adcb20d316e227be9eaf377d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["34e4c06b8371591fe849dd3cd2cc790850dc5ca6","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34e4c06b8371591fe849dd3cd2cc790850dc5ca6":["70ad682703b8585f5d0a637efec044d57ec05efb","d5efdc434c21e20adcb20d316e227be9eaf377d2"],"d5efdc434c21e20adcb20d316e227be9eaf377d2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}