{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"860d9cc0c963b5c0db351fb0473b6894b1d96020","date":1448302628,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data; cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","bugFix":["544428a1bff160a46b059862575074fe0c1d92ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert !termArrays.isEmpty();\n      final LeafReader reader = context.reader();\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n        List<PostingsEnum> postings = new ArrayList<>();\n        \n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n        \n        if (postings.isEmpty()) {\n          return null;\n        }\n        \n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      needsScores, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        needsScores, totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.POSITIVE_INFINITY),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termStates.get(term).get(context);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.POSITIVE_INFINITY),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.POSITIVE_INFINITY),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termStates.get(term).get(context);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termStates.get(term).get(context);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.POSITIVE_INFINITY),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termStates.get(term).get(context);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      similarity.simScorer(stats, context),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        similarity.simScorer(stats, context),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termArrays.length != 0;\n      final LeafReader reader = context.reader();\n\n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.length];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // TODO: move this check to createWeight to happen earlier to the user?\n      if (fieldTerms.hasPositions() == false) {\n        throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was indexed without position data;\" +\n            \" cannot run MultiPhraseQuery (phrase=\" + getQuery() + \")\");\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator();\n      float totalMatchCost = 0;\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays[pos];\n        List<PostingsEnum> postings = new ArrayList<>();\n\n        for (Term term : terms) {\n          TermState termState = termStates.get(term).get(context);\n          if (termState != null) {\n            termsEnum.seekExact(term.bytes(), termState);\n            postings.add(termsEnum.postings(null, PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n        }\n\n        if (postings.isEmpty()) {\n          return null;\n        }\n\n        final PostingsEnum postingsEnum;\n        if (postings.size() == 1) {\n          postingsEnum = postings.get(0);\n        } else {\n          postingsEnum = new UnionPostingsEnum(postings);\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, positions[pos], terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs,\n                                      new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Integer.MAX_VALUE),\n                                      scoreMode, totalMatchCost);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop,\n                                        new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE),\n                                        scoreMode.needsScores(), totalMatchCost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"b94236357aaa22b76c10629851fe4e376e0cea82":["33eef98c565ee21b199f04b92acd6e00b842bd1e","0c68bfb3354451a11c895b36484af94f27530b79"],"3b11b9d5eaf9707760ca5151530830a825197023":["b94236357aaa22b76c10629851fe4e376e0cea82"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"0c68bfb3354451a11c895b36484af94f27530b79":["a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["860d9cc0c963b5c0db351fb0473b6894b1d96020","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"b94236357aaa22b76c10629851fe4e376e0cea82":["3b11b9d5eaf9707760ca5151530830a825197023"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a6e9f769521480a623f897c0d59089b919fa4239":["0c68bfb3354451a11c895b36484af94f27530b79"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}