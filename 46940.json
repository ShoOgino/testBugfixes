{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.segmentFileName(segmentName, \"\", NORMS_EXTENSION);\n    }\n  }\n\n","sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":null,"sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.segmentFileName(segmentName, \"\", NORMS_EXTENSION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer#getNormFilename(String,Map[Integer,Long],int).mjava","sourceNew":null,"sourceOld":"  private static String getNormFilename(String segmentName, Map<Integer,Long> normGen, int number) {\n    if (hasSeparateNorms(normGen, number)) {\n      return IndexFileNames.fileNameFromGeneration(segmentName, SEPARATE_NORMS_EXTENSION + number, normGen.get(number));\n    } else {\n      // single file for all norms\n      return IndexFileNames.fileNameFromGeneration(segmentName, NORMS_EXTENSION, SegmentInfo.WITHOUT_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","764b942fd30efcae6e532c19771f32eeeb0037b2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}