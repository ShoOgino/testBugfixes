{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest#doTestTopStatsWithRefinement(boolean).mjava","commits":[{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest#doTestTopStatsWithRefinement(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest#doTestTopStatsWithRefinement().mjava","sourceNew":"  /**\n   * we need to ensure that stats never \"overcount\" the values from a single shard\n   * even if we hit that shard with a refinement request \n   */\n  private void doTestTopStatsWithRefinement(final boolean allStats) throws Exception {\n\n    String stat_param = allStats ? \n      \"{!tag=s1}foo_i\" : \"{!tag=s1 min=true max=true count=true missing=true}foo_i\";\n\n    ModifiableSolrParams coreParams = params(\"q\", \"*:*\", \"rows\", \"0\",\n                                             \"stats\", \"true\",\n                                             \"stats.field\", stat_param );\n    ModifiableSolrParams facetParams = new ModifiableSolrParams(coreParams);\n    facetParams.add(params(\"facet\", \"true\",\n                           \"facet.limit\", \"1\",\n                           \"facet.pivot\", \"{!stats=s1}place_t,company_t\"));\n    \n    ModifiableSolrParams facetForceRefineParams = new ModifiableSolrParams(facetParams);\n    facetForceRefineParams.add(params(FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                      FacetParams.FACET_OVERREQUEST_RATIO, \"0\"));\n\n    for (ModifiableSolrParams params : new ModifiableSolrParams[] {\n        coreParams, facetParams, facetForceRefineParams }) {\n\n      // for all three sets of these params, the \"top level\" \n      // stats in the response of a distributed query should be the same\n      ModifiableSolrParams q = new ModifiableSolrParams(params);\n      q.set(\"shards\", getShardsString());\n\n      QueryResponse rsp = queryServer(q);\n      FieldStatsInfo fieldStatsInfo = rsp.getFieldStatsInfo().get(\"foo_i\");\n\n      String msg = q.toString();\n\n      assertEquals(msg, 3.0, fieldStatsInfo.getMin());\n      assertEquals(msg, 91.0, fieldStatsInfo.getMax());\n      assertEquals(msg, 10, (long) fieldStatsInfo.getCount());\n      assertEquals(msg, 0, (long) fieldStatsInfo.getMissing());\n\n      if (allStats) {\n        assertEquals(msg, 248.0, fieldStatsInfo.getSum());\n        assertEquals(msg, 15294.0, fieldStatsInfo.getSumOfSquares(), 0.1E-7);\n        assertEquals(msg, 24.8, (double) fieldStatsInfo.getMean(), 0.1E-7);\n        assertEquals(msg, 31.87405772027709, fieldStatsInfo.getStddev(), 0.1E-7);\n      } else {\n        assertNull(msg, fieldStatsInfo.getSum());\n        assertNull(msg, fieldStatsInfo.getSumOfSquares());\n        assertNull(msg, fieldStatsInfo.getMean());\n        assertNull(msg, fieldStatsInfo.getStddev());\n      }\n\n      if (params.getBool(\"facet\", false)) {\n        // if this was a facet request, then the top pivot constraint and pivot \n        // stats should match what we expect - regardless of whether refine\n        // was used, or if the query was initially satisfied by the default overrequest\n        \n        List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n        assertEquals(1, placePivots.size());\n        \n        PivotField dublinPivotField = placePivots.get(0);\n        assertEquals(\"dublin\", dublinPivotField.getValue());\n        assertEquals(4, dublinPivotField.getCount());\n        assertEquals(1, dublinPivotField.getPivot().size());\n\n        PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n        assertEquals(\"microsoft\", microsoftPivotField.getValue());\n        assertEquals(4, microsoftPivotField.getCount());\n        \n        FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"foo_i\");\n        assertEquals(3.0D, dublinMicrosoftStatsInfo.getMin());\n        assertEquals(91.0D, dublinMicrosoftStatsInfo.getMax());\n        assertEquals(4, (long) dublinMicrosoftStatsInfo.getCount());\n        assertEquals(0, (long) dublinMicrosoftStatsInfo.getMissing());\n        \n        if (! allStats) {\n          assertNull(msg, dublinMicrosoftStatsInfo.getSum());\n          assertNull(msg, dublinMicrosoftStatsInfo.getSumOfSquares());\n          assertNull(msg, dublinMicrosoftStatsInfo.getMean());\n          assertNull(msg, dublinMicrosoftStatsInfo.getStddev());\n        }\n      }\n    }\n\n    // sanity check that the top pivot from each shard is diff, to prove to \n    // ourselves that the above queries really must have involved refinement.\n    Object s0pivValue = clients.get(0)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    Object s1pivValue = clients.get(1)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    assertFalse(\"both shards have same top constraint, test is invalid\" +\n                \"(did someone change the test data?) ==> \" + \n                s0pivValue + \"==\" + s1pivValue, s0pivValue.equals(s1pivValue));\n    \n  }\n\n","sourceOld":"  /**\n   * we need to ensure that stats never \"overcount\" the values from a single shard\n   * even if we hit that shard with a refinement request \n   */\n  private void doTestTopStatsWithRefinement() throws Exception {\n    \n    \n    ModifiableSolrParams coreParams = params(\"q\", \"*:*\", \"rows\", \"0\",\n                                             \"stats\", \"true\",\n                                             \"stats.field\", \"{!tag=s1}foo_i\" );\n    ModifiableSolrParams facetParams = new ModifiableSolrParams(coreParams);\n    facetParams.add(params(\"facet\", \"true\",\n                           \"facet.limit\", \"1\",\n                           \"facet.pivot\", \"{!stats=s1}place_t,company_t\"));\n    \n    ModifiableSolrParams facetForceRefineParams = new ModifiableSolrParams(facetParams);\n    facetForceRefineParams.add(params(FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                      FacetParams.FACET_OVERREQUEST_RATIO, \"0\"));\n\n    for (ModifiableSolrParams params : new ModifiableSolrParams[] {\n        coreParams, facetParams, facetForceRefineParams }) {\n\n      // for all three sets of these params, the \"top level\" \n      // stats in the response of a distributed query should be the same\n      ModifiableSolrParams q = new ModifiableSolrParams(params);\n      q.set(\"shards\", getShardsString());\n\n      QueryResponse rsp = queryServer(q);\n      FieldStatsInfo fieldStatsInfo = rsp.getFieldStatsInfo().get(\"foo_i\");\n\n      String msg = q.toString();\n\n      assertEquals(msg, 3.0, fieldStatsInfo.getMin());\n      assertEquals(msg, 91.0, fieldStatsInfo.getMax());\n      assertEquals(msg, 10, (long) fieldStatsInfo.getCount());\n      assertEquals(msg, 0, (long) fieldStatsInfo.getMissing());\n      assertEquals(msg, 248.0, fieldStatsInfo.getSum());\n      assertEquals(msg, 15294.0, fieldStatsInfo.getSumOfSquares(), 0.1E-7);\n      assertEquals(msg, 24.8, (double) fieldStatsInfo.getMean(), 0.1E-7);\n      assertEquals(msg, 31.87405772027709, fieldStatsInfo.getStddev(), 0.1E-7);\n\n      if (params.getBool(\"facet\", false)) {\n        // if this was a facet request, then the top pivot constraint and pivot \n        // stats should match what we expect - regardless of whether refine\n        // was used, or if the query was initially satisfied by the default overrequest\n        \n        List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n        assertEquals(1, placePivots.size());\n        \n        PivotField dublinPivotField = placePivots.get(0);\n        assertEquals(\"dublin\", dublinPivotField.getValue());\n        assertEquals(4, dublinPivotField.getCount());\n        assertEquals(1, dublinPivotField.getPivot().size());\n\n        PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n        assertEquals(\"microsoft\", microsoftPivotField.getValue());\n        assertEquals(4, microsoftPivotField.getCount());\n        \n        FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"foo_i\");\n        assertEquals(3.0D, dublinMicrosoftStatsInfo.getMin());\n        assertEquals(91.0D, dublinMicrosoftStatsInfo.getMax());\n        assertEquals(4, (long) dublinMicrosoftStatsInfo.getCount());\n        assertEquals(0, (long) dublinMicrosoftStatsInfo.getMissing());\n        \n      }\n    }\n\n    // sanity check that the top pivot from each shard is diff, to prove to \n    // ourselves that the above queries really must have involved refinement.\n    Object s0pivValue = clients.get(0)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    Object s1pivValue = clients.get(1)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    assertFalse(\"both shards have same top constraint, test is invalid\" +\n                \"(did someone change the test data?) ==> \" + \n                s0pivValue + \"==\" + s1pivValue, s0pivValue.equals(s1pivValue));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallAdvancedTest#doTestTopStatsWithRefinement(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * we need to ensure that stats never \"overcount\" the values from a single shard\n   * even if we hit that shard with a refinement request \n   */\n  private void doTestTopStatsWithRefinement(final boolean allStats) throws Exception {\n\n    String stat_param = allStats ? \n      \"{!tag=s1}foo_i\" : \"{!tag=s1 min=true max=true count=true missing=true}foo_i\";\n\n    ModifiableSolrParams coreParams = params(\"q\", \"*:*\", \"rows\", \"0\",\n                                             \"stats\", \"true\",\n                                             \"stats.field\", stat_param );\n    ModifiableSolrParams facetParams = new ModifiableSolrParams(coreParams);\n    facetParams.add(params(\"facet\", \"true\",\n                           \"facet.limit\", \"1\",\n                           \"facet.pivot\", \"{!stats=s1}place_t,company_t\"));\n    \n    ModifiableSolrParams facetForceRefineParams = new ModifiableSolrParams(facetParams);\n    facetForceRefineParams.add(params(FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                      FacetParams.FACET_OVERREQUEST_RATIO, \"0\"));\n\n    for (ModifiableSolrParams params : new ModifiableSolrParams[] {\n        coreParams, facetParams, facetForceRefineParams }) {\n\n      // for all three sets of these params, the \"top level\" \n      // stats in the response of a distributed query should be the same\n      ModifiableSolrParams q = new ModifiableSolrParams(params);\n      q.set(\"shards\", getShardsString());\n\n      QueryResponse rsp = queryServer(q);\n      FieldStatsInfo fieldStatsInfo = rsp.getFieldStatsInfo().get(\"foo_i\");\n\n      String msg = q.toString();\n\n      assertEquals(msg, 3.0, fieldStatsInfo.getMin());\n      assertEquals(msg, 91.0, fieldStatsInfo.getMax());\n      assertEquals(msg, 10, (long) fieldStatsInfo.getCount());\n      assertEquals(msg, 0, (long) fieldStatsInfo.getMissing());\n\n      if (allStats) {\n        assertEquals(msg, 248.0, fieldStatsInfo.getSum());\n        assertEquals(msg, 15294.0, fieldStatsInfo.getSumOfSquares(), 0.1E-7);\n        assertEquals(msg, 24.8, (double) fieldStatsInfo.getMean(), 0.1E-7);\n        assertEquals(msg, 31.87405772027709, fieldStatsInfo.getStddev(), 0.1E-7);\n      } else {\n        assertNull(msg, fieldStatsInfo.getSum());\n        assertNull(msg, fieldStatsInfo.getSumOfSquares());\n        assertNull(msg, fieldStatsInfo.getMean());\n        assertNull(msg, fieldStatsInfo.getStddev());\n      }\n\n      if (params.getBool(\"facet\", false)) {\n        // if this was a facet request, then the top pivot constraint and pivot \n        // stats should match what we expect - regardless of whether refine\n        // was used, or if the query was initially satisfied by the default overrequest\n        \n        List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n        assertEquals(1, placePivots.size());\n        \n        PivotField dublinPivotField = placePivots.get(0);\n        assertEquals(\"dublin\", dublinPivotField.getValue());\n        assertEquals(4, dublinPivotField.getCount());\n        assertEquals(1, dublinPivotField.getPivot().size());\n\n        PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n        assertEquals(\"microsoft\", microsoftPivotField.getValue());\n        assertEquals(4, microsoftPivotField.getCount());\n        \n        FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"foo_i\");\n        assertEquals(3.0D, dublinMicrosoftStatsInfo.getMin());\n        assertEquals(91.0D, dublinMicrosoftStatsInfo.getMax());\n        assertEquals(4, (long) dublinMicrosoftStatsInfo.getCount());\n        assertEquals(0, (long) dublinMicrosoftStatsInfo.getMissing());\n        \n        if (! allStats) {\n          assertNull(msg, dublinMicrosoftStatsInfo.getSum());\n          assertNull(msg, dublinMicrosoftStatsInfo.getSumOfSquares());\n          assertNull(msg, dublinMicrosoftStatsInfo.getMean());\n          assertNull(msg, dublinMicrosoftStatsInfo.getStddev());\n        }\n      }\n    }\n\n    // sanity check that the top pivot from each shard is diff, to prove to \n    // ourselves that the above queries really must have involved refinement.\n    Object s0pivValue = clients.get(0)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    Object s1pivValue = clients.get(1)\n      .query(facetParams).getFacetPivot().get(\"place_t,company_t\").get(0).getValue();\n    assertFalse(\"both shards have same top constraint, test is invalid\" +\n                \"(did someone change the test data?) ==> \" + \n                s0pivValue + \"==\" + s1pivValue, s0pivValue.equals(s1pivValue));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d12bbc45d641864ffe03291bc30f178eb34e434c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}