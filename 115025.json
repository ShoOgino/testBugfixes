{"path":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\n  public static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return RandomSample.repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\n  public static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return RandomSample.repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\n  public static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return RandomSample.repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#repeatableSample(ScoredDocIDs,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int).mjava","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\n  private static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }\n\n","sourceOld":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\n  public static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return RandomSample.repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99b17503f4e360f8140fe80a593268486cd718b4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99b17503f4e360f8140fe80a593268486cd718b4"]},"commit2Childs":{"99b17503f4e360f8140fe80a593268486cd718b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["99b17503f4e360f8140fe80a593268486cd718b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}