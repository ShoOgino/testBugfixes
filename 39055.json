{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","sourceNew":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","sourceOld":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","pathOld":"/dev/null","sourceNew":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","sourceNew":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","sourceOld":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","sourceNew":"  public SolrClient getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrClient> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrClient client = clients.get(index);\n\n    return client;\n  }\n\n","sourceOld":"  public SolrServer getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrServer> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrServer client = clients.get(index);\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","sourceNew":"  public SolrClient getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState();\n\n    // get random shard\n    List<SolrClient> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrClient client = clients.get(index);\n\n    return client;\n  }\n\n","sourceOld":"  public SolrClient getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState(true);\n\n    // get random shard\n    List<SolrClient> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrClient client = clients.get(index);\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomClient(String).mjava","sourceNew":null,"sourceOld":"  public SolrClient getRandomClient(String slice) throws KeeperException, InterruptedException {\n    // get latest cloud state\n    zkStateReader.updateClusterState();\n\n    // get random shard\n    List<SolrClient> clients = shardToClient.get(slice);\n    int index = LuceneTestCase.random().nextInt(clients.size() - 1);\n    SolrClient client = clients.get(index);\n\n    return client;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"bafca15d8e408346a67f4282ad1143b88023893b":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"bafca15d8e408346a67f4282ad1143b88023893b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}