{"path":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random, pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new Collector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        // do nothing\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores or freqs are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(((SloppyPhraseScorer)scorer).freq()));\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#assertSaneScoring(PhraseQuery,IndexSearcher).mjava","sourceNew":"  /** checks that no scores are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = (Scorer) AssertingScorable.unwrap(scorer);\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","sourceOld":"  /** checks that no scores are infinite */\n  private void assertSaneScoring(PhraseQuery pq, IndexSearcher searcher) throws Exception {\n    searcher.search(pq, new SimpleCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        while (this.scorer instanceof AssertingScorer) {\n          this.scorer = ((AssertingScorer)this.scorer).getIn();\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(Float.isInfinite(scorer.score()));\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    QueryUtils.check(random(), pq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["417142ff08fda9cf0b72d5133e63097a166c6458"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["3b11b9d5eaf9707760ca5151530830a825197023"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["19275ba31e621f6da1b83bf13af75233876fd3d4","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3b11b9d5eaf9707760ca5151530830a825197023"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["19275ba31e621f6da1b83bf13af75233876fd3d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}