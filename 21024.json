{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","commits":[{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"865a428869162e0e1a443f1e8670a02f90e03750","date":1496635447,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return STANDARDOBJBUILDER.apply(parser).getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    return fromJSON(utf8, 0, utf8.length);\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES);\n    try {\n      return STANDARDOBJBUILDER.apply(parser).getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b693a83132c9e45afcd564fd65a25b60ed80388b","865a428869162e0e1a443f1e8670a02f90e03750"],"865a428869162e0e1a443f1e8670a02f90e03750":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["b693a83132c9e45afcd564fd65a25b60ed80388b","865a428869162e0e1a443f1e8670a02f90e03750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"865a428869162e0e1a443f1e8670a02f90e03750":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e9017cf144952056066919f1ebc7897ff9bd71b1","865a428869162e0e1a443f1e8670a02f90e03750","28288370235ed02234a64753cdbf0c6ec096304a"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"28288370235ed02234a64753cdbf0c6ec096304a":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}