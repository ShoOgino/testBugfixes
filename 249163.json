{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   */\n  public abstract int docFreq(Term t) throws IOException;\n\n","sourceOld":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   */\n  public abstract int docFreq(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #docFreq(String,BytesRef)} instead.\n   */\n  @Deprecated\n  public abstract int docFreq(Term t) throws IOException;\n\n","sourceOld":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   */\n  public abstract int docFreq(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), new BytesRef(term.text()));\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #docFreq(String,BytesRef)} instead.\n   */\n  @Deprecated\n  public abstract int docFreq(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), new BytesRef(term.text()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term <code>t</code>.\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #docFreq(String,BytesRef)} instead.\n   */\n  @Deprecated\n  public abstract int docFreq(Term t) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85dda37116c8d94fccd74dfe59f4d7fe4503e74c","date":1327234819,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#docFreq(Term).mjava","sourceNew":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a85a104e10f92250e7f296aafd8f71bb97c7d9ca","date":1327968489,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the \n   * <code>term</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#docFreq(Term).mjava","sourceNew":"  /** Returns the number of documents containing the \n   * <code>term</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the \n   * <code>term</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final int docFreq(Term term) throws IOException {\n    return docFreq(term.field(), term.bytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a85a104e10f92250e7f296aafd8f71bb97c7d9ca"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a85a104e10f92250e7f296aafd8f71bb97c7d9ca":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","936f1eae75daf11568fe1480aec9e06d2ef55367"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","936f1eae75daf11568fe1480aec9e06d2ef55367","5f4e87790277826a2aea119328600dfb07761f32","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"5f4e87790277826a2aea119328600dfb07761f32":[],"a85a104e10f92250e7f296aafd8f71bb97c7d9ca":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a85a104e10f92250e7f296aafd8f71bb97c7d9ca","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}