{"path":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}