{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","commits":[{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"/dev/null","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        Metric metric = (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n        return metric;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        Metric metric = (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n        return metric;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        Metric metric = (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n        return metric;\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  public Metric constructMetric(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)) {\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)){\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructMetric(StreamExpression).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public Metric constructMetric(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)) {\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public Metric constructMetric(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && Metric.class.isAssignableFrom(clazz)) {\n        return (Metric)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3078cad1008b796c6d573b743c586fdf9ef5660a","c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","804a8d5358fe7b7563b85ee7838714d720b89272"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}