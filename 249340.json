{"path":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader)); \n          }\n        }\n        \n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                       // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();                            // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          queue.clear();                          // clear the queue\n          for (int i = 0; i < all.size(); i++) {\n            Spans spans = (Spans)all.get(i);\n            if (spans.skipTo(target)) {           // skip each spans in all\n              queue.put(spans);                   // rebuild queue\n            }\n          }\n          firstTime = false;\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanOrQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57baf01395fec660233482b9ee9b43c85cae19ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader));\n          }\n        }\n\n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                       // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();                            // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          queue.clear();                          // clear the queue\n          for (int i = 0; i < all.size(); i++) {\n            Spans spans = (Spans)all.get(i);\n            if (spans.skipTo(target)) {           // skip each spans in all\n              queue.put(spans);                   // rebuild queue\n            }\n          }\n          firstTime = false;\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanOrQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader)); \n          }\n        }\n        \n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                       // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();                            // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          queue.clear();                          // clear the queue\n          for (int i = 0; i < all.size(); i++) {\n            Spans spans = (Spans)all.get(i);\n            if (spans.skipTo(target)) {           // skip each spans in all\n              queue.put(spans);                   // rebuild queue\n            }\n          }\n          firstTime = false;\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanOrQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5","date":1076364222,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader));\n          }\n        }\n\n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              } else {\n                all.remove(i--);\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                     // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          all.remove(queue.pop());                // exhausted a clause\n\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (firstTime) {\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.skipTo(target)) {         // skip each spans in all\n                queue.put(spans);                 // build queue\n              } else {\n                all.remove(i--);\n              }\n            }\n            firstTime = false;\n          } else {\n            while (queue.size() != 0 && top().doc() < target) {\n              if (top().skipTo(target)) {\n                queue.adjustTop();\n              } else {\n                all.remove(queue.pop());\n              }\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            (firstTime?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader));\n          }\n        }\n\n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                       // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();                            // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          queue.clear();                          // clear the queue\n          for (int i = 0; i < all.size(); i++) {\n            Spans spans = (Spans)all.get(i);\n            if (spans.skipTo(target)) {           // skip each spans in all\n              queue.put(spans);                   // rebuild queue\n            }\n          }\n          firstTime = false;\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanOrQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":["57baf01395fec660233482b9ee9b43c85cae19ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6ddcea595f0d6b2d431cbca80d565275d60dbdc","date":1165953123,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private List all = new ArrayList(clauses.size());\n        private SpanQueue queue = new SpanQueue(clauses.size());\n\n        {\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {                   // initialize all\n            all.add(((SpanQuery)i.next()).getSpans(reader));\n          }\n        }\n\n        private boolean firstTime = true;\n\n        public boolean next() throws IOException {\n          if (firstTime) {                        // first time -- initialize\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.next()) {                 // move to first entry\n                queue.put(spans);                 // build queue\n              } else {\n                all.remove(i--);\n              }\n            }\n            firstTime = false;\n            return queue.size() != 0;\n          }\n\n          if (queue.size() == 0) {                // all done\n            return false;\n          }\n\n          if (top().next()) {                     // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          all.remove(queue.pop());                // exhausted a clause\n\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (firstTime) {\n            for (int i = 0; i < all.size(); i++) {\n              Spans spans = (Spans)all.get(i);\n              if (spans.skipTo(target)) {         // skip each spans in all\n                queue.put(spans);                 // build queue\n              } else {\n                all.remove(i--);\n              }\n            }\n            firstTime = false;\n          } else {\n            while (queue.size() != 0 && top().doc() < target) {\n              if (top().skipTo(target)) {\n                queue.adjustTop();\n              } else {\n                all.remove(queue.pop());\n              }\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            (firstTime?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":["57baf01395fec660233482b9ee9b43c85cae19ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return new PayloadSpans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            PayloadSpans spans = ((SpanQuery)i.next()).getPayloadSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private PayloadSpans top() { return (PayloadSpans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        PayloadSpans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        PayloadSpans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n        public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57baf01395fec660233482b9ee9b43c85cae19ab","date":1247605010,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return new PayloadSpans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            PayloadSpans spans = ((SpanQuery)i.next()).getPayloadSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private PayloadSpans top() { return (PayloadSpans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        PayloadSpans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        PayloadSpans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return new PayloadSpans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            PayloadSpans spans = ((SpanQuery)i.next()).getPayloadSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private PayloadSpans top() { return (PayloadSpans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n          }\n\n          return queue.size() != 0;\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        PayloadSpans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        PayloadSpans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":["f6ddcea595f0d6b2d431cbca80d565275d60dbdc","0bcbf4ed0baed877c8b36d024e17a99bedfdd904","442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return new PayloadSpans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            PayloadSpans spans = ((SpanQuery)i.next()).getPayloadSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private PayloadSpans top() { return (PayloadSpans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        PayloadSpans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        PayloadSpans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.put(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.adjustTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.adjustTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = ((SpanQuery)i.next()).getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return (Spans)queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        public int doc() { return top().doc(); }\n        public int start() { return top().start(); }\n        public int end() { return top().end(); }\n\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n     public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"fd5947db4de866f035b932f219674c03562d904e":["f6ddcea595f0d6b2d431cbca80d565275d60dbdc"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"f6ddcea595f0d6b2d431cbca80d565275d60dbdc":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"57baf01395fec660233482b9ee9b43c85cae19ab":["fd5947db4de866f035b932f219674c03562d904e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["ef82ff03e4016c705811b2658e81471a645c0e49"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["57baf01395fec660233482b9ee9b43c85cae19ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd5947db4de866f035b932f219674c03562d904e":["57baf01395fec660233482b9ee9b43c85cae19ab"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["f6ddcea595f0d6b2d431cbca80d565275d60dbdc"],"f6ddcea595f0d6b2d431cbca80d565275d60dbdc":["fd5947db4de866f035b932f219674c03562d904e"],"ef82ff03e4016c705811b2658e81471a645c0e49":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"57baf01395fec660233482b9ee9b43c85cae19ab":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["ef82ff03e4016c705811b2658e81471a645c0e49"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["8a9e385641d717e641408d8fbbc62be8fc766357"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}