{"path":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    MockRAMDirectory directory = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher is = new IndexSearcher(directory, true);\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = new SlowMultiReaderWrapper(writer.getReader());\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = snq.getSpans(is.getIndexReader());\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = new IndexSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    is.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b c d e f g h i j a k\")));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 1, true);\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n\n        for (final byte [] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"51c34a3639838887e7997850b6be80f838a4d6f7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","51c34a3639838887e7997850b6be80f838a4d6f7"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c8323d210478d76a02372693d254b69aac614689"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}