{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","commits":[{"id":"00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b","date":1476813760,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"/dev/null","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new ToParentBlockJoinIndexSearcher(r);\n    //IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    \n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9a209db8d858a699744d4141d223e81bfd50901"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad214b6ec1400de3c40b6c120126abe89d51a9ce","date":1476818670,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"/dev/null","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new ToParentBlockJoinIndexSearcher(r);\n    //IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    \n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"/dev/null","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new ToParentBlockJoinIndexSearcher(r);\n    //IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    \n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new ToParentBlockJoinIndexSearcher(r);\n    //IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    \n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new ToParentBlockJoinIndexSearcher(r);\n    //IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    \n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9a209db8d858a699744d4141d223e81bfd50901","date":1495175317,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":["00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBQShouldJoinedChild().mjava","sourceNew":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits.value);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // You must use ToParentBlockJoinSearcher if you want to do BQ SHOULD queries:\n  public void testBQShouldJoinedChild() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n    //IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.SHOULD));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.SHOULD));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","c9a209db8d858a699744d4141d223e81bfd50901"],"c9a209db8d858a699744d4141d223e81bfd50901":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c9a209db8d858a699744d4141d223e81bfd50901"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"c9a209db8d858a699744d4141d223e81bfd50901":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad214b6ec1400de3c40b6c120126abe89d51a9ce","00a4f47ad4b8be9dbfee49a2cc8c6bafa15ae53b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["e9017cf144952056066919f1ebc7897ff9bd71b1","c9a209db8d858a699744d4141d223e81bfd50901","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}