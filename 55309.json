{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FieldsWriter.FIELD_IS_NUMERIC_MASK | FieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      final boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      final int numeric = bits & FieldsWriter.FIELD_IS_NUMERIC_MASK;\n\n      final boolean doStop;\n      if (binary) {\n        final int numBytes = fieldsStream.readVInt();\n        doStop = visitor.binaryField(fieldInfo, fieldsStream, numBytes);\n      } else if (numeric != 0) {\n        switch(numeric) {\n        case FieldsWriter.FIELD_IS_NUMERIC_INT:\n          doStop = visitor.intField(fieldInfo, fieldsStream.readInt());\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n          doStop = visitor.longField(fieldInfo, fieldsStream.readLong());\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          doStop = visitor.floatField(fieldInfo, Float.intBitsToFloat(fieldsStream.readInt()));\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          doStop = visitor.doubleField(fieldInfo, Double.longBitsToDouble(fieldsStream.readLong()));\n          break;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n        }\n      } else {\n        // Text:\n        final int numUTF8Bytes = fieldsStream.readVInt();\n        doStop = visitor.stringField(fieldInfo, fieldsStream, numUTF8Bytes);\n      }\n\n      if (doStop) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b1110660886afcc62f57e9af901cd3f5dd294bc","date":1317830374,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (DefaultFieldsWriter.FIELD_IS_NUMERIC_MASK | DefaultFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      final boolean binary = (bits & DefaultFieldsWriter.FIELD_IS_BINARY) != 0;\n      final int numeric = bits & DefaultFieldsWriter.FIELD_IS_NUMERIC_MASK;\n\n      final boolean doStop;\n      if (binary) {\n        final int numBytes = fieldsStream.readVInt();\n        doStop = visitor.binaryField(fieldInfo, fieldsStream, numBytes);\n      } else if (numeric != 0) {\n        switch(numeric) {\n        case DefaultFieldsWriter.FIELD_IS_NUMERIC_INT:\n          doStop = visitor.intField(fieldInfo, fieldsStream.readInt());\n          break;\n        case DefaultFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          doStop = visitor.longField(fieldInfo, fieldsStream.readLong());\n          break;\n        case DefaultFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          doStop = visitor.floatField(fieldInfo, Float.intBitsToFloat(fieldsStream.readInt()));\n          break;\n        case DefaultFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          doStop = visitor.doubleField(fieldInfo, Double.longBitsToDouble(fieldsStream.readLong()));\n          break;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n        }\n      } else {\n        // Text:\n        final int numUTF8Bytes = fieldsStream.readVInt();\n        doStop = visitor.stringField(fieldInfo, fieldsStream, numUTF8Bytes);\n      }\n\n      if (doStop) {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FieldsWriter.FIELD_IS_NUMERIC_MASK | FieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      final boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      final int numeric = bits & FieldsWriter.FIELD_IS_NUMERIC_MASK;\n\n      final boolean doStop;\n      if (binary) {\n        final int numBytes = fieldsStream.readVInt();\n        doStop = visitor.binaryField(fieldInfo, fieldsStream, numBytes);\n      } else if (numeric != 0) {\n        switch(numeric) {\n        case FieldsWriter.FIELD_IS_NUMERIC_INT:\n          doStop = visitor.intField(fieldInfo, fieldsStream.readInt());\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n          doStop = visitor.longField(fieldInfo, fieldsStream.readLong());\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          doStop = visitor.floatField(fieldInfo, Float.intBitsToFloat(fieldsStream.readInt()));\n          break;\n        case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          doStop = visitor.doubleField(fieldInfo, Double.longBitsToDouble(fieldsStream.readLong()));\n          break;\n        default:\n          throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n        }\n      } else {\n        // Text:\n        final int numUTF8Bytes = fieldsStream.readVInt();\n        doStop = visitor.stringField(fieldInfo, fieldsStream, numUTF8Bytes);\n      }\n\n      if (doStop) {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b1110660886afcc62f57e9af901cd3f5dd294bc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4b1110660886afcc62f57e9af901cd3f5dd294bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}