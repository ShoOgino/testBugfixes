{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a numeric conversion mapping function.\n   * \n   * @param name the name of the function\n   * @param fconv the method to convert floats to ints\n   * @param dconv the method to convert doubles to longs\n   * @param params the parameters of the function\n   * @return an instance of the conversion function using the given parameters.\n   */\n  public static LongValueStream createDecimalConversionFunction(String name, ConvertFloatFunction fconv, ConvertDoubleFunction dconv, AnalyticsValueStream... params) {\n    if (params.length != 1) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 1 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream param = params[0];\n    if (param instanceof LongValueStream) {\n      return (LongValueStream)param;\n    }\n    if (param instanceof FloatValueStream) {\n      if (param instanceof FloatValue) {\n        return new ConvertFloatValueFunction(name, (FloatValue)param, fconv);\n      }\n      return new ConvertFloatStreamFunction(name, (FloatValueStream)param, fconv);\n    } else if (param instanceof DoubleValueStream) {\n      if (param instanceof DoubleValue) {\n        return new ConvertDoubleValueFunction(name, (DoubleValue)param, dconv);\n      }\n      return new ConvertDoubleStreamFunction(name, (DoubleValueStream)param, dconv);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires a numeric parameter.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","sourceNew":"  /**\n   * Create a numeric conversion mapping function.\n   *\n   * @param name the name of the function\n   * @param fconv the method to convert floats to ints\n   * @param dconv the method to convert doubles to longs\n   * @param params the parameters of the function\n   * @return an instance of the conversion function using the given parameters.\n   */\n  public static LongValueStream createDecimalConversionFunction(String name, ConvertFloatFunction fconv, ConvertDoubleFunction dconv, AnalyticsValueStream... params) {\n    if (params.length != 1) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 1 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream param = params[0];\n    if (param instanceof LongValueStream) {\n      return (LongValueStream)param;\n    }\n    if (param instanceof FloatValueStream) {\n      if (param instanceof FloatValue) {\n        return new ConvertFloatValueFunction(name, (FloatValue)param, fconv);\n      }\n      return new ConvertFloatStreamFunction(name, (FloatValueStream)param, fconv);\n    } else if (param instanceof DoubleValueStream) {\n      if (param instanceof DoubleValue) {\n        return new ConvertDoubleValueFunction(name, (DoubleValue)param, dconv);\n      }\n      return new ConvertDoubleStreamFunction(name, (DoubleValueStream)param, dconv);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires a numeric parameter.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a numeric conversion mapping function.\n   * \n   * @param name the name of the function\n   * @param fconv the method to convert floats to ints\n   * @param dconv the method to convert doubles to longs\n   * @param params the parameters of the function\n   * @return an instance of the conversion function using the given parameters.\n   */\n  public static LongValueStream createDecimalConversionFunction(String name, ConvertFloatFunction fconv, ConvertDoubleFunction dconv, AnalyticsValueStream... params) {\n    if (params.length != 1) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 1 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream param = params[0];\n    if (param instanceof LongValueStream) {\n      return (LongValueStream)param;\n    }\n    if (param instanceof FloatValueStream) {\n      if (param instanceof FloatValue) {\n        return new ConvertFloatValueFunction(name, (FloatValue)param, fconv);\n      }\n      return new ConvertFloatStreamFunction(name, (FloatValueStream)param, fconv);\n    } else if (param instanceof DoubleValueStream) {\n      if (param instanceof DoubleValue) {\n        return new ConvertDoubleValueFunction(name, (DoubleValue)param, dconv);\n      }\n      return new ConvertDoubleStreamFunction(name, (DoubleValueStream)param, dconv);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires a numeric parameter.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/DecimalNumericConversionFunction#createDecimalConversionFunction(String,ConvertFloatFunction,ConvertDoubleFunction,AnalyticsValueStream...).mjava","sourceNew":"  /**\n   * Create a numeric conversion mapping function.\n   *\n   * @param name the name of the function\n   * @param fconv the method to convert floats to ints\n   * @param dconv the method to convert doubles to longs\n   * @param params the parameters of the function\n   * @return an instance of the conversion function using the given parameters.\n   */\n  public static LongValueStream createDecimalConversionFunction(String name, ConvertFloatFunction fconv, ConvertDoubleFunction dconv, AnalyticsValueStream... params) {\n    if (params.length != 1) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 1 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream param = params[0];\n    if (param instanceof LongValueStream) {\n      return (LongValueStream)param;\n    }\n    if (param instanceof FloatValueStream) {\n      if (param instanceof FloatValue) {\n        return new ConvertFloatValueFunction(name, (FloatValue)param, fconv);\n      }\n      return new ConvertFloatStreamFunction(name, (FloatValueStream)param, fconv);\n    } else if (param instanceof DoubleValueStream) {\n      if (param instanceof DoubleValue) {\n        return new ConvertDoubleValueFunction(name, (DoubleValue)param, dconv);\n      }\n      return new ConvertDoubleStreamFunction(name, (DoubleValueStream)param, dconv);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires a numeric parameter.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a numeric conversion mapping function.\n   * \n   * @param name the name of the function\n   * @param fconv the method to convert floats to ints\n   * @param dconv the method to convert doubles to longs\n   * @param params the parameters of the function\n   * @return an instance of the conversion function using the given parameters.\n   */\n  public static LongValueStream createDecimalConversionFunction(String name, ConvertFloatFunction fconv, ConvertDoubleFunction dconv, AnalyticsValueStream... params) {\n    if (params.length != 1) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires 1 paramaters, \" + params.length + \" found.\");\n    }\n    AnalyticsValueStream param = params[0];\n    if (param instanceof LongValueStream) {\n      return (LongValueStream)param;\n    }\n    if (param instanceof FloatValueStream) {\n      if (param instanceof FloatValue) {\n        return new ConvertFloatValueFunction(name, (FloatValue)param, fconv);\n      }\n      return new ConvertFloatStreamFunction(name, (FloatValueStream)param, fconv);\n    } else if (param instanceof DoubleValueStream) {\n      if (param instanceof DoubleValue) {\n        return new ConvertDoubleValueFunction(name, (DoubleValue)param, dconv);\n      }\n      return new ConvertDoubleStreamFunction(name, (DoubleValueStream)param, dconv);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires a numeric parameter.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}