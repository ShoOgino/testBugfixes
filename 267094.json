{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","commits":[{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void xxxtestNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void xxxtestNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        while(true) {\n          try {\n            t1.join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<3;pass++) {\n      boolean autoCommit = pass%2 == 0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), true);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" ac=\" + autoCommit + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass >= 2)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, new WhitespaceAnalyzer(), false);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["09c482d1e63332617181729a225b215c452d8a79"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"09c482d1e63332617181729a225b215c452d8a79":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}