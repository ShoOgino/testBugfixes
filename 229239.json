{"path":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /** Expert: sets the token stream to be used for indexing and causes isIndexed() and isTokenized() to return true.\n   *  May be combined with stored values from stringValue() or getBinaryValue() */\n  public void setTokenStream(TokenStream tokenStream) {\n    this.isIndexed = true;\n    this.isTokenized = true;\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /** Expert: sets the token stream to be used for indexing and causes isIndexed() and isTokenized() to return true.\n   *  May be combined with stored values from stringValue() or getBinaryValue() */\n  public void setTokenStream(TokenStream tokenStream) {\n    this.isIndexed = true;\n    this.isTokenized = true;\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!indexed() || !tokenized()) {\n      throw new IllegalArgumentException(\n          \"cannot set token stream on non indexed and tokenized field\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /** Expert: sets the token stream to be used for indexing and causes isIndexed() and isTokenized() to return true.\n   *  May be combined with stored values from stringValue() or getBinaryValue() */\n  public void setTokenStream(TokenStream tokenStream) {\n    this.isIndexed = true;\n    this.isTokenized = true;\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\n          \"cannot set token stream on non indexed and tokenized field\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!indexed() || !tokenized()) {\n      throw new IllegalArgumentException(\n          \"cannot set token stream on non indexed and tokenized field\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\n          \"cannot set token stream on non indexed and tokenized field\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#setTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets the token stream to be used for indexing and causes\n   * isIndexed() and isTokenized() to return true. May be combined with stored\n   * values from stringValue() or getBinaryValue()\n   */\n  public void setTokenStream(TokenStream tokenStream) {\n    if (!type.indexed() || !type.tokenized()) {\n      throw new IllegalArgumentException(\"TokenStream fields must be indexed and tokenized\");\n    }\n    if (type.numericType() != null) {\n      throw new IllegalArgumentException(\"cannot set private TokenStream on numeric fields\");\n    }\n    this.tokenStream = tokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}