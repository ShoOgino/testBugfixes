{"path":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":["dbac57d0eae4302a5368e598b6d0b2d157d23d4d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d","date":1333288336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7FL) != 0L) {\n      writeByte((byte)((i & 0x7FL) | 0x80L));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa","date":1335382601,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * <p>\n   * The format is described further in {@link DataOutput#writeVInt(int)}.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7FL) != 0L) {\n      writeByte((byte)((i & 0x7FL) | 0x80L));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7FL) != 0L) {\n      writeByte((byte)((i & 0x7FL) | 0x80L));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * <p>\n   * The format is described further in {@link DataOutput#writeVInt(int)}.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    writeNegativeVLong(i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * <p>\n   * The format is described further in {@link DataOutput#writeVInt(int)}.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    while ((i & ~0x7FL) != 0L) {\n      writeByte((byte)((i & 0x7FL) | 0x80L));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":["dbac57d0eae4302a5368e598b6d0b2d157d23d4d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbac57d0eae4302a5368e598b6d0b2d157d23d4d","date":1434743642,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVLong(long).mjava","sourceNew":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * <p>\n   * The format is described further in {@link DataOutput#writeVInt(int)}.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    if (i < 0) {\n      throw new IllegalArgumentException(\"cannot write negative vLong (got: \" + i + \")\");\n    }\n    writeSignedVLong(i);\n  }\n\n","sourceOld":"  /** Writes an long in a variable-length format.  Writes between one and nine\n   * bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * <p>\n   * The format is described further in {@link DataOutput#writeVInt(int)}.\n   * @see DataInput#readVLong()\n   */\n  public final void writeVLong(long i) throws IOException {\n    assert i >= 0L;\n    writeNegativeVLong(i);\n  }\n\n","bugFix":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","7d91b7936af3081e704512ac1234340133e59904"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["7d91b7936af3081e704512ac1234340133e59904"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["2e624b56e48bba276e76b66c9eb1bbb9994b0ffa"],"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dbac57d0eae4302a5368e598b6d0b2d157d23d4d":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbac57d0eae4302a5368e598b6d0b2d157d23d4d"]},"commit2Childs":{"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["2e624b56e48bba276e76b66c9eb1bbb9994b0ffa"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["dbac57d0eae4302a5368e598b6d0b2d157d23d4d"],"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dbac57d0eae4302a5368e598b6d0b2d157d23d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d91b7936af3081e704512ac1234340133e59904":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}