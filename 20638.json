{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","commits":[{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void refreshReaderManager() throws IOException {\n    // this method is synchronized since it cannot happen concurrently with\n    // addCategoryDocument -- when this method returns, we must know that the\n    // reader manager's state is current. also, it sets shouldRefresh to false, \n    // and this cannot overlap with addCatDoc too.\n    // NOTE: since this method is sync'ed, it can call maybeRefresh, instead of\n    // maybeRefreshBlocking. If ever this is changed, make sure to change the\n    // call too.\n    if (shouldRefreshReaderManager && readerManager != null) {\n      readerManager.maybeRefresh();\n      shouldRefreshReaderManager = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","sourceNew":"  private synchronized void refreshReaderManager() throws IOException {\n    // this method is synchronized since it cannot happen concurrently with\n    // addCategoryDocument -- when this method returns, we must know that the\n    // reader manager's state is current. also, it sets shouldRefresh to false, \n    // and this cannot overlap with addCatDoc too.\n    // NOTE: since this method is sync'ed, it can call maybeRefresh, instead of\n    // maybeRefreshBlocking. If ever this is changed, make sure to change the\n    // call too.\n    if (shouldRefreshReaderManager && initializedReaderManager) {\n      readerManager.maybeRefresh();\n      shouldRefreshReaderManager = false;\n    }\n  }\n\n","sourceOld":"  private synchronized void refreshReaderManager() throws IOException {\n    // this method is synchronized since it cannot happen concurrently with\n    // addCategoryDocument -- when this method returns, we must know that the\n    // reader manager's state is current. also, it sets shouldRefresh to false, \n    // and this cannot overlap with addCatDoc too.\n    // NOTE: since this method is sync'ed, it can call maybeRefresh, instead of\n    // maybeRefreshBlocking. If ever this is changed, make sure to change the\n    // call too.\n    if (shouldRefreshReaderManager && readerManager != null) {\n      readerManager.maybeRefresh();\n      shouldRefreshReaderManager = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#refreshReaderManager().mjava","sourceNew":"  private synchronized void refreshReaderManager() throws IOException {\n    // this method is synchronized since it cannot happen concurrently with\n    // addCategoryDocument -- when this method returns, we must know that the\n    // reader manager's state is current. also, it sets shouldRefresh to false, \n    // and this cannot overlap with addCatDoc too.\n    // NOTE: since this method is sync'ed, it can call maybeRefresh, instead of\n    // maybeRefreshBlocking. If ever this is changed, make sure to change the\n    // call too.\n    if (shouldRefreshReaderManager && initializedReaderManager) {\n      readerManager.maybeRefresh();\n      shouldRefreshReaderManager = false;\n    }\n  }\n\n","sourceOld":"  private synchronized void refreshReaderManager() throws IOException {\n    // this method is synchronized since it cannot happen concurrently with\n    // addCategoryDocument -- when this method returns, we must know that the\n    // reader manager's state is current. also, it sets shouldRefresh to false, \n    // and this cannot overlap with addCatDoc too.\n    // NOTE: since this method is sync'ed, it can call maybeRefresh, instead of\n    // maybeRefreshBlocking. If ever this is changed, make sure to change the\n    // call too.\n    if (shouldRefreshReaderManager && readerManager != null) {\n      readerManager.maybeRefresh();\n      shouldRefreshReaderManager = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}