{"path":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","commits":[{"id":"3cdc80a62bb2b084e97738303ef870bcea0310ac","date":1352398860,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        // nocommit: switch on 3 types: NUMBER, BYTES, SORTED\n        DocValues.Type type = field.getDocValuesType();\n        if (type == DocValues.Type.VAR_INTS) {\n          mergeNumericField(mergeState);\n        } else if (type == DocValues.Type.BYTES_VAR_STRAIGHT) {\n          mergeBinaryField(mergeState);\n        } else if (type == DocValues.Type.BYTES_VAR_SORTED) {\n          mergeSortedField(mergeState);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cd6a58664a1aa37c0503cc80579f1b5f826dbc","date":1352486345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","sourceNew":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        // nocommit: switch on 3 types: NUMBER, BYTES, SORTED\n        DocValues.Type type = field.getDocValuesType();\n        switch(type) {\n          case VAR_INTS:\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FLOAT_64:\n          case FLOAT_32:\n            mergeNumericField(mergeState);\n            break;\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_DEREF:\n          case BYTES_FIXED_DEREF:\n            mergeSortedField(mergeState);\n            break;\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_STRAIGHT:\n            mergeBinaryField(mergeState);\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        // nocommit: switch on 3 types: NUMBER, BYTES, SORTED\n        DocValues.Type type = field.getDocValuesType();\n        if (type == DocValues.Type.VAR_INTS) {\n          mergeNumericField(mergeState);\n        } else if (type == DocValues.Type.BYTES_VAR_STRAIGHT) {\n          mergeBinaryField(mergeState);\n        } else if (type == DocValues.Type.BYTES_VAR_SORTED) {\n          mergeSortedField(mergeState);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3538d7872902c19ad619052fb3130f652f35e35","date":1353005395,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","sourceNew":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        DocValues.Type type = field.getDocValuesType();\n        switch(type) {\n          case VAR_INTS:\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FLOAT_64:\n          case FLOAT_32:\n            mergeNumericField(mergeState);\n            break;\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_DEREF:\n          case BYTES_FIXED_DEREF:\n            mergeSortedField(mergeState);\n            break;\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_STRAIGHT:\n            mergeBinaryField(mergeState);\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        // nocommit: switch on 3 types: NUMBER, BYTES, SORTED\n        DocValues.Type type = field.getDocValuesType();\n        switch(type) {\n          case VAR_INTS:\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FLOAT_64:\n          case FLOAT_32:\n            mergeNumericField(mergeState);\n            break;\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_DEREF:\n          case BYTES_FIXED_DEREF:\n            mergeSortedField(mergeState);\n            break;\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_STRAIGHT:\n            mergeBinaryField(mergeState);\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#merge(MergeState).mjava","sourceNew":"  // nocommit bogus forceNorms param:\n  public void merge(MergeState mergeState, boolean forceNorms) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if ((!forceNorms && field.hasDocValues()) || (forceNorms && field.isIndexed() && !field.omitsNorms())) {\n        mergeState.fieldInfo = field;\n        //System.out.println(\"merge field=\" + field.name + \" forceNorms=\" + forceNorms);\n        // nocommit a field can never have doc values AND norms!?\n        DocValues.Type type = forceNorms ? DocValues.Type.FIXED_INTS_8 : field.getDocValuesType();\n        switch(type) {\n          case VAR_INTS:\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FLOAT_64:\n          case FLOAT_32:\n            mergeNumericField(mergeState, forceNorms);\n            break;\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_DEREF:\n          case BYTES_FIXED_DEREF:\n            mergeSortedField(mergeState);\n            break;\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_STRAIGHT:\n            mergeBinaryField(mergeState);\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasDocValues()) {\n        mergeState.fieldInfo = field;\n        DocValues.Type type = field.getDocValuesType();\n        switch(type) {\n          case VAR_INTS:\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case FLOAT_64:\n          case FLOAT_32:\n            mergeNumericField(mergeState);\n            break;\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n          case BYTES_VAR_DEREF:\n          case BYTES_FIXED_DEREF:\n            mergeSortedField(mergeState);\n            break;\n          case BYTES_VAR_STRAIGHT:\n          case BYTES_FIXED_STRAIGHT:\n            mergeBinaryField(mergeState);\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdc80a62bb2b084e97738303ef870bcea0310ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3538d7872902c19ad619052fb3130f652f35e35":["15cd6a58664a1aa37c0503cc80579f1b5f826dbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15cd6a58664a1aa37c0503cc80579f1b5f826dbc":["3cdc80a62bb2b084e97738303ef870bcea0310ac"],"55eeb2534cd53d2a985669829df942468ebf5314":["e3538d7872902c19ad619052fb3130f652f35e35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cdc80a62bb2b084e97738303ef870bcea0310ac":["15cd6a58664a1aa37c0503cc80579f1b5f826dbc"],"e3538d7872902c19ad619052fb3130f652f35e35":["55eeb2534cd53d2a985669829df942468ebf5314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdc80a62bb2b084e97738303ef870bcea0310ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15cd6a58664a1aa37c0503cc80579f1b5f826dbc":["e3538d7872902c19ad619052fb3130f652f35e35"],"55eeb2534cd53d2a985669829df942468ebf5314":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55eeb2534cd53d2a985669829df942468ebf5314","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}