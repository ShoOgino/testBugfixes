{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.shutdown(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.close(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.shutdown(false);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.shutdown(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      writer.shutdown(false);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9f7829b01acc3b2d4cad883060a0fbf544eaae1","date":1521396858,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 1;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 3;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":["a37d7952ff54064a735708748444570f9963683e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DWPT#updateDocuments()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 1;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 1;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testImmediateDiskFullWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DWPT#updateDocuments()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 1;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.isDeleterClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immediate disk full on creating\n  // an IndexWriter (hit during DWPT#updateDocuments()), with\n  // multiple threads, is OK:\n  public void testImmediateDiskFullWithThreads() throws Exception {\n\n    int NUM_THREADS = 3;\n    final int numIterations = TEST_NIGHTLY ? 10 : 1;\n    for (int iter=0;iter<numIterations;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      MockDirectoryWrapper dir = newMockDirectory();\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergeScheduler(new ConcurrentMergeScheduler())\n            .setMergePolicy(newLogMergePolicy(4))\n            .setCommitOnClose(false)\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n      dir.setMaxSizeInBytes(4*1024+20*iter);\n\n      CyclicBarrier syncStart = new CyclicBarrier(NUM_THREADS + 1);\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new IndexerThread(writer, true, syncStart);\n        threads[i].start();\n      }\n      syncStart.await();\n\n      for (int i = 0; i < NUM_THREADS; i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      // Make sure once disk space is avail again, we can\n      // cleanly close:\n      dir.setMaxSizeInBytes(0);\n      try {\n        writer.commit();\n      } catch (AlreadyClosedException ace) {\n        // OK: abort closes the writer\n        assertTrue(writer.deleter.isClosed());\n      } finally {\n        writer.close();\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["71da933d30aea361ccc224d6544c451cbf49916d"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["9299079153fd7895bf3cf6835cf7019af2ba89b3","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["264935965977b4a9e2f3920420647072c9c49176"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"71da933d30aea361ccc224d6544c451cbf49916d":["203e3fcf513c02ee2c07015f2ce277e26dc60907"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["71da933d30aea361ccc224d6544c451cbf49916d"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["203e3fcf513c02ee2c07015f2ce277e26dc60907","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"71da933d30aea361ccc224d6544c451cbf49916d":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}