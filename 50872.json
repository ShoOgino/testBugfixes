{"path":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new NamedList();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new NamedList();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2562fab31a7b144e6187859bfa09e363dc6de268","date":1170358826,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5f1ac252ce81629c187e0f78da3fca52a125df","date":1176769259,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae","date":1210454197,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8eef26ced666b6845d2393643b293199ffc3baa","date":1214580524,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"docsDeleted\", numDocsDeleted.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d","date":1224067136,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5281200d0cbe00dd4df581ec1a1f4b570597b19a","date":1255280671,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (tracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", tracker.docsUpperBound);\n    }\n    if (tracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + tracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", tracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["e8eef26ced666b6845d2393643b293199ffc3baa"],"cb5f1ac252ce81629c187e0f78da3fca52a125df":["2562fab31a7b144e6187859bfa09e363dc6de268"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5281200d0cbe00dd4df581ec1a1f4b570597b19a":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"e8eef26ced666b6845d2393643b293199ffc3baa":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2562fab31a7b144e6187859bfa09e363dc6de268":["4145b7b13874de95211223a6edb648da8794a688"],"ad94625fb8d088209f46650c8097196fec67f00c":["5281200d0cbe00dd4df581ec1a1f4b570597b19a"],"4145b7b13874de95211223a6edb648da8794a688":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["cb5f1ac252ce81629c187e0f78da3fca52a125df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["5281200d0cbe00dd4df581ec1a1f4b570597b19a"],"cb5f1ac252ce81629c187e0f78da3fca52a125df":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["4145b7b13874de95211223a6edb648da8794a688"],"5281200d0cbe00dd4df581ec1a1f4b570597b19a":["ad94625fb8d088209f46650c8097196fec67f00c"],"e8eef26ced666b6845d2393643b293199ffc3baa":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2562fab31a7b144e6187859bfa09e363dc6de268":["cb5f1ac252ce81629c187e0f78da3fca52a125df"],"4145b7b13874de95211223a6edb648da8794a688":["2562fab31a7b144e6187859bfa09e363dc6de268"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["e8eef26ced666b6845d2393643b293199ffc3baa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}