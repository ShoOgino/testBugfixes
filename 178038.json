{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","sourceNew":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        failures.get(i).eval(this);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        failures.get(i).eval(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a073fe31154540f4532dc0d2f2e34849df0e7df","date":1410955844,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","sourceNew":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        try {\n          failures.get(i).eval(this);\n        } catch (Throwable t) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockDirectoryWrapper: throw exc\");\n            t.printStackTrace(System.out);\n          }\n          IOUtils.reThrow(t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        failures.get(i).eval(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","sourceNew":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        try {\n          failures.get(i).eval(this);\n        } catch (Throwable t) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockDirectoryWrapper: throw exc\");\n            t.printStackTrace(System.out);\n          }\n          throw IOUtils.rethrowAlways(t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        try {\n          failures.get(i).eval(this);\n        } catch (Throwable t) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockDirectoryWrapper: throw exc\");\n            t.printStackTrace(System.out);\n          }\n          IOUtils.reThrow(t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowDeterministicException().mjava","sourceNew":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        try {\n          failures.get(i).eval(this);\n        } catch (Throwable t) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockDirectoryWrapper: throw exc\");\n            t.printStackTrace(System.out);\n          }\n          throw IOUtils.rethrowAlways(t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate through the failures list, giving each object a\n   * chance to throw an IOE\n   */\n  synchronized void maybeThrowDeterministicException() throws IOException {\n    if (failures != null) {\n      for(int i = 0; i < failures.size(); i++) {\n        try {\n          failures.get(i).eval(this);\n        } catch (Throwable t) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockDirectoryWrapper: throw exc\");\n            t.printStackTrace(System.out);\n          }\n          IOUtils.reThrow(t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["9a073fe31154540f4532dc0d2f2e34849df0e7df","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"9a073fe31154540f4532dc0d2f2e34849df0e7df":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["9a073fe31154540f4532dc0d2f2e34849df0e7df"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9a073fe31154540f4532dc0d2f2e34849df0e7df":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9a073fe31154540f4532dc0d2f2e34849df0e7df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}