{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addReplica(ClusterState,ZkNodeProps).mjava","commits":[{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addReplica(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState addReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"addReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addReplica(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ClusterState addReplica(ClusterState clusterState, ZkNodeProps message) {\n      log.info(\"addReplica() {} \", message);\n      String coll = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String slice = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice sl = clusterState.getSlice(coll, slice);\n      if(sl == null){\n        log.error(\"Invalid Collection/Slice {}/{} \",coll,slice);\n        return clusterState;\n      }\n\n      String coreNodeName = Assign.assignNode(coll, clusterState);\n      Replica replica = new Replica(coreNodeName,\n          makeMap(\n          ZkStateReader.CORE_NAME_PROP, message.getStr(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.BASE_URL_PROP,message.getStr(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.STATE_PROP,message.getStr(ZkStateReader.STATE_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName));\n      sl.getReplicasMap().put(coreNodeName, replica);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}