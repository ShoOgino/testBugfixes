{"path":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","commits":[{"id":"77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f","date":1433928549,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","pathOld":"/dev/null","sourceNew":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n\n    final IndexReader r2 = SlowCompositeReaderWrapper.wrap(r);\n   \n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r2, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","sourceNew":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n    final IndexReader r2 = r;\n\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n\n    final IndexReader r2 = SlowCompositeReaderWrapper.wrap(r);\n   \n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r2, dir);\n  }\n\n","bugFix":["77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","sourceNew":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n    final IndexReader r2 = r;\n\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n    final IndexReader r2 = r;\n\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/index/TestAssertingLeafReader#testAssertBits().mjava","sourceNew":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n    final IndexReader r2 = r;\n\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAssertBits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Not deleted:\n    w.addDocument(new Document());\n\n    // Does get deleted:\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    w.deleteDocuments(new Term(\"id\", \"0\"));\n    w.close();\n\n    // Now we have index with 1 segment with 2 docs one of which is marked deleted\n\n    IndexReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(2, r.maxDoc());\n    assertEquals(1, r.numDocs());\n\n    r = new AssertingDirectoryReader((DirectoryReader) r);\n    final IndexReader r2 = r;\n\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        for(LeafReaderContext context : r2.leaves()) {\n          context.reader().getLiveDocs().get(0);\n        }\n      }\n    };\n    thread.start();\n    thread.join();\n\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77f1f27dbff0c658cf7e3d26b30d71ca28b7c79f":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}