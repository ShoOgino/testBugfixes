{"path":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","commits":[{"id":"3fca8d7c4b4950b771c367c69facf00e13dc4a20","date":1239092714,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(36, r.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(36, r.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    IndexReader r = IndexReader.open(dir, false);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    IndexReader r2 = r.reopen();\n    r.close();\n    try {\n      r2.getUniqueTermCount();\n      fail(\"expected exception\");\n    } catch (UnsupportedOperationException uoe) {\n      // expected\n    }\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, subs[i].getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["3fca8d7c4b4950b771c367c69facf00e13dc4a20"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3fca8d7c4b4950b771c367c69facf00e13dc4a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fca8d7c4b4950b771c367c69facf00e13dc4a20"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3fca8d7c4b4950b771c367c69facf00e13dc4a20":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}