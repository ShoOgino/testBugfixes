{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentation().mjava","sourceNew":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":"  /** Test search mode segmentation */\n  public void testSearchSegmentation() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, IOUtils.CHARSET_UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] expectedTokens = fields[1].split(\"\\\\s+\");\n        int[] expectedPosIncrs = new int[expectedTokens.length];\n        int[] expectedPosLengths = new int[expectedTokens.length];\n        for(int tokIDX=0;tokIDX<expectedTokens.length;tokIDX++) {\n          if (expectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokens[tokIDX] = expectedTokens[tokIDX].replace(\"/0\", \"\");\n            expectedPosLengths[tokIDX] = expectedTokens.length-1;\n          } else {\n            expectedPosIncrs[tokIDX] = 1;\n            expectedPosLengths[tokIDX] = 1;\n          }\n        }\n        assertAnalyzesTo(analyzer, sourceText, expectedTokens, expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}