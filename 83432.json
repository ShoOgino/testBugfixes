{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dddb2c2ed096135b31cff8907f24ca2f5db46562","date":1413882711,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    try {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n      fail(\"Expected an IllegalArgumentException when setting the Similarity after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new DefaultSimilarity());\n\n  }\n\n","sourceOld":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    try {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n      fail(\"Expected an IllegalArgumentException when setting the Similarity after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new DefaultSimilarity());\n\n  }\n\n","sourceOld":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    try {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n      fail(\"Expected an IllegalArgumentException when setting the Similarity after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new ClassicSimilarity());\n\n  }\n\n","sourceOld":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    try {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n      fail(\"Expected an IllegalArgumentException when setting the Similarity after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new DefaultSimilarity());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testFreezeAPI().mjava","sourceNew":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n    });\n    assertThat(expected.getMessage(), containsString(\"frozen\"));\n\n    expected = expectThrows(RuntimeException.class, () -> {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n    });\n    assertThat(expected.getMessage(), containsString(\"frozen\"));\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new ClassicSimilarity());\n\n  }\n\n","sourceOld":"  @Test\n  public void testFreezeAPI() {\n\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"f1\", \"some text\", analyzer);\n\n    assertThat(mi.search(new MatchAllDocsQuery()), not(is(0.0f)));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    // check we can add a new field after searching\n    mi.addField(\"f2\", \"some more text\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f2\", \"some\"))), not(is(0.0f)));\n\n    // freeze!\n    mi.freeze();\n\n    try {\n      mi.addField(\"f3\", \"and yet more\", analyzer);\n      fail(\"Expected an IllegalArgumentException when adding a field after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    try {\n      mi.setSimilarity(new BM25Similarity(1, 1));\n      fail(\"Expected an IllegalArgumentException when setting the Similarity after calling freeze()\");\n    }\n    catch (RuntimeException e) {\n      assertThat(e.getMessage(), containsString(\"frozen\"));\n    }\n\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), not(is(0.0f)));\n\n    mi.reset();\n    mi.addField(\"f1\", \"wibble\", analyzer);\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"some\"))), is(0.0f));\n    assertThat(mi.search(new TermQuery(new Term(\"f1\", \"wibble\"))), not(is(0.0f)));\n\n    // check we can set the Similarity again\n    mi.setSimilarity(new ClassicSimilarity());\n\n  }\n\n","bugFix":["761333d77c7f29123c00c93b107b743f32f012e6","dddb2c2ed096135b31cff8907f24ca2f5db46562"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dddb2c2ed096135b31cff8907f24ca2f5db46562"],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["761333d77c7f29123c00c93b107b743f32f012e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["dddb2c2ed096135b31cff8907f24ca2f5db46562"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["05fe562aa248790944d43cdd478f512572835ba0"],"761333d77c7f29123c00c93b107b743f32f012e6":["dddb2c2ed096135b31cff8907f24ca2f5db46562","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}