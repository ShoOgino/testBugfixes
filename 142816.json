{"path":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","commits":[{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(int,int,boolean).mjava","sourceNew":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory();\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","sourceOld":"    TestIndex(int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory(rand);\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","sourceNew":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory(random);\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","sourceOld":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory();\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory(random);\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter.TestIndex#TestIndex(Random,int,int,boolean).mjava","sourceNew":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory(random);\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","sourceOld":"    TestIndex(Random random, int minR, int maxR, boolean allowNegativeRandomInts) {\n      this.minR = minR;\n      this.maxR = maxR;\n      this.allowNegativeRandomInts = allowNegativeRandomInts;\n      try {\n        index = newDirectory(random);\n      } catch (IOException e) { throw new RuntimeException(e); }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","150488c1317972164a9a824be05b1ba2ba0fc68c"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}