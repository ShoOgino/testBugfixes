{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1275856c84e2d39350c6d0f98681e2c6ba1e18aa","date":1459923987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\"Looking for {}, found {}\", message.get(requestIdKey), requestId);\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\">>>> {}\", message.get(requestIdKey));\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              log.debug(\"Looking for {}, found {}\", message.get(requestIdKey), requestId);\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              LOG.debug(\"Looking for {}, found {}\", message.get(requestIdKey), requestId);\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#containsTaskWithRequestId(String,String).mjava","sourceNew":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Looking for {}, found {}\", message.get(requestIdKey), requestId);\n              }\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the queue contains a task with the specified async id.\n   */\n  public boolean containsTaskWithRequestId(String requestIdKey, String requestId)\n      throws KeeperException, InterruptedException {\n\n    List<String> childNames = zookeeper.getChildren(dir, null, true);\n    stats.setQueueLength(childNames.size());\n    for (String childName : childNames) {\n      if (childName != null && childName.startsWith(PREFIX)) {\n        try {\n          byte[] data = zookeeper.getData(dir + \"/\" + childName, null, null, true);\n          if (data != null) {\n            ZkNodeProps message = ZkNodeProps.load(data);\n            if (message.containsKey(requestIdKey)) {\n              log.debug(\"Looking for {}, found {}\", message.get(requestIdKey), requestId);\n              if(message.get(requestIdKey).equals(requestId)) return true;\n            }\n          }\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1275856c84e2d39350c6d0f98681e2c6ba1e18aa":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"b6284684320a9808c41a5e43de958b2da22f89bd":["2209af2c265d2258ec4b29c8cc78622d36994a15","1275856c84e2d39350c6d0f98681e2c6ba1e18aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["1275856c84e2d39350c6d0f98681e2c6ba1e18aa","b6284684320a9808c41a5e43de958b2da22f89bd"],"1275856c84e2d39350c6d0f98681e2c6ba1e18aa":["b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}