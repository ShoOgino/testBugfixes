{"path":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","commits":[{"id":"3101986002d49f3738148cdfe12337d946b0654c","date":1115921358,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"/dev/null","sourceNew":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++)\n      ((IndexReader)readers.get(i)).close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","sourceNew":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (((Boolean) decrefOnClose.get(i)).booleanValue()) {\n        ((IndexReader)readers.get(i)).decRef();\n      } else {\n        ((IndexReader)readers.get(i)).close();\n      }\n    }\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++)\n      ((IndexReader)readers.get(i)).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","sourceNew":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (((Boolean) decrefOnClose.get(i)).booleanValue()) {\n        ((IndexReader)readers.get(i)).decRef();\n      } else {\n        ((IndexReader)readers.get(i)).close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653534f92e19662cbe285c9c01801afbe2247da3","date":1260576498,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < readers.size(); i++) {\n      if (decrefOnClose.get(i).booleanValue()) {\n        readers.get(i).decRef();\n      } else {\n        readers.get(i).close();\n      }\n    }\n\n    FieldCache.DEFAULT.purge(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3101986002d49f3738148cdfe12337d946b0654c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653534f92e19662cbe285c9c01801afbe2247da3":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["3101986002d49f3738148cdfe12337d946b0654c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["653534f92e19662cbe285c9c01801afbe2247da3"]},"commit2Childs":{"3101986002d49f3738148cdfe12337d946b0654c":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"653534f92e19662cbe285c9c01801afbe2247da3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3101986002d49f3738148cdfe12337d946b0654c"],"8a9e385641d717e641408d8fbbc62be8fc766357":["653534f92e19662cbe285c9c01801afbe2247da3"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}