{"path":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","commits":[{"id":"97fc5a00245e9b31c118c53df88b1376237ea87b","date":1222659461,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"/dev/null","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n    DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n\n    synchronized (this) {\n      IndexCommit last = commits.get(commits.size() - 1);\n      log.info(\"last commit = \" + last.getVersion());\n\n      int numCommitsToDelete = commits.size() - maxCommitsToKeep;\n      int i = 0;\n      for (IndexCommit commit : commits) {\n        // don't delete the last commit point\n        if (commit == last) {\n          continue;\n        }\n\n        if (i < numCommitsToDelete) {\n          commit.delete();\n          i++;\n          continue;\n        }\n\n        try {\n          //TODO: replace LHS of if condition with commit.getTimestamp()\n          if (maxCommitAge != null)\n            if (commit.getDirectory().fileModified(commit.getSegmentsFileName()) < dmp.parseMath(maxCommitAge).getTime()) {\n              commit.delete();\n              continue;\n            }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (keepOptimizedOnly) {\n          if (!commit.isOptimized()) {\n            commit.delete();\n            log.info(\"Marking unoptimized index \" + getId(commit) + \" for deletion.\");\n          }\n        }\n      }\n    } // end synchronized\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ead21da498e3e1b3121a110923f732e9023dd6","date":1224663364,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n    DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n\n    synchronized (this) {\n      IndexCommit last = commits.get(commits.size() - 1);\n      log.info(\"last commit = \" + last.getVersion());\n\n      int numCommitsToDelete = commits.size() - maxCommitsToKeep;\n      int i = 0;\n      for (IndexCommit commit : commits) {\n        // don't delete the last commit point\n        if (commit == last) {\n          continue;\n        }\n\n        if (i < numCommitsToDelete) {\n          commit.delete();\n          i++;\n          continue;\n        }\n\n        try {\n          if (maxCommitAge != null)\n            if (commit.getTimestamp() < dmp.parseMath(maxCommitAge).getTime()) {\n              commit.delete();\n              continue;\n            }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (keepOptimizedOnly) {\n          if (!commit.isOptimized()) {\n            commit.delete();\n            log.info(\"Marking unoptimized index \" + getId(commit) + \" for deletion.\");\n          }\n        }\n      }\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n    DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n\n    synchronized (this) {\n      IndexCommit last = commits.get(commits.size() - 1);\n      log.info(\"last commit = \" + last.getVersion());\n\n      int numCommitsToDelete = commits.size() - maxCommitsToKeep;\n      int i = 0;\n      for (IndexCommit commit : commits) {\n        // don't delete the last commit point\n        if (commit == last) {\n          continue;\n        }\n\n        if (i < numCommitsToDelete) {\n          commit.delete();\n          i++;\n          continue;\n        }\n\n        try {\n          //TODO: replace LHS of if condition with commit.getTimestamp()\n          if (maxCommitAge != null)\n            if (commit.getDirectory().fileModified(commit.getSegmentsFileName()) < dmp.parseMath(maxCommitAge).getTime()) {\n              commit.delete();\n              continue;\n            }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (keepOptimizedOnly) {\n          if (!commit.isOptimized()) {\n            commit.delete();\n            log.info(\"Marking unoptimized index \" + getId(commit) + \" for deletion.\");\n          }\n        }\n      }\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cdac6591b64f43f87663e70518d79dd137454b4","date":1254069460,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n    DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n\n    synchronized (this) {\n      IndexCommit last = commits.get(commits.size() - 1);\n      log.info(\"last commit = \" + last.getVersion());\n\n      int numCommitsToDelete = commits.size() - maxCommitsToKeep;\n      int i = 0;\n      for (IndexCommit commit : commits) {\n        // don't delete the last commit point\n        if (commit == last) {\n          continue;\n        }\n\n        if (i < numCommitsToDelete) {\n          commit.delete();\n          i++;\n          continue;\n        }\n\n        try {\n          if (maxCommitAge != null)\n            if (commit.getTimestamp() < dmp.parseMath(maxCommitAge).getTime()) {\n              commit.delete();\n              continue;\n            }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (keepOptimizedOnly) {\n          if (!commit.isOptimized()) {\n            commit.delete();\n            log.info(\"Marking unoptimized index \" + getId(commit) + \" for deletion.\");\n          }\n        }\n      }\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"97fc5a00245e9b31c118c53df88b1376237ea87b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7cdac6591b64f43f87663e70518d79dd137454b4"],"7cdac6591b64f43f87663e70518d79dd137454b4":["a2ead21da498e3e1b3121a110923f732e9023dd6"],"a2ead21da498e3e1b3121a110923f732e9023dd6":["97fc5a00245e9b31c118c53df88b1376237ea87b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"97fc5a00245e9b31c118c53df88b1376237ea87b":["a2ead21da498e3e1b3121a110923f732e9023dd6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["97fc5a00245e9b31c118c53df88b1376237ea87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7cdac6591b64f43f87663e70518d79dd137454b4":["ad94625fb8d088209f46650c8097196fec67f00c"],"a2ead21da498e3e1b3121a110923f732e9023dd6":["7cdac6591b64f43f87663e70518d79dd137454b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}