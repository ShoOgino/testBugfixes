{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public abstract FieldInfo fieldInfo(int fieldNumber);\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public abstract FieldInfo fieldInfo(int fieldNumber);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number. if this is negative, this method\n   *        always returns null.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  // TODO: fix this negative behavior, this was something related to Lucene3x?\n  // if the field name is empty, i think it writes the fieldNumber as -1\n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","bugFix":null,"bugIntro":["fb13dd414f655a70c821300dea007cb565533e03"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb13dd414f655a70c821300dea007cb565533e03","date":1397838390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    return byNumber.get(fieldNumber);\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number. if this is negative, this method\n   *        always returns null.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   */  \n  // TODO: fix this negative behavior, this was something related to Lucene3x?\n  // if the field name is empty, i think it writes the fieldNumber as -1\n  public FieldInfo fieldInfo(int fieldNumber) {\n    return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;\n  }\n\n","bugFix":["d1129c7a3821aac1661389b26342f26a4ef30f80","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc361419eab9d1ac199a5f3dd0a7231f53a9e20","date":1435334043,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    if (byNumberTable != null) {\n      if (fieldNumber >= byNumberTable.length) {\n        return null;\n      }\n      return byNumberTable[fieldNumber];\n    } else {\n      return byNumberMap.get(fieldNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    return byNumber.get(fieldNumber);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1c835c1d1d2594b34b55026a015b3f13afb477","date":1518518197,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    if (fieldNumber >= byNumber.length) {\n      return null;\n    }\n    return byNumber[fieldNumber];\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    if (byNumberTable != null) {\n      if (fieldNumber >= byNumberTable.length) {\n        return null;\n      }\n      return byNumberTable[fieldNumber];\n    } else {\n      return byNumberMap.get(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#fieldInfo(int).mjava","sourceNew":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    if (fieldNumber >= byNumber.length) {\n      return null;\n    }\n    return byNumber[fieldNumber];\n  }\n\n","sourceOld":"  /**\n   * Return the fieldinfo object referenced by the fieldNumber.\n   * @param fieldNumber field's number.\n   * @return the FieldInfo object or null when the given fieldNumber\n   * doesn't exist.\n   * @throws IllegalArgumentException if fieldNumber is negative\n   */\n  public FieldInfo fieldInfo(int fieldNumber) {\n    if (fieldNumber < 0) {\n      throw new IllegalArgumentException(\"Illegal field number: \" + fieldNumber);\n    }\n    if (byNumberTable != null) {\n      if (fieldNumber >= byNumberTable.length) {\n        return null;\n      }\n      return byNumberTable[fieldNumber];\n    } else {\n      return byNumberMap.get(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb13dd414f655a70c821300dea007cb565533e03":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2fc361419eab9d1ac199a5f3dd0a7231f53a9e20":["fb13dd414f655a70c821300dea007cb565533e03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a851824c09818632c94eba41e60ef5e72e323c8e":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"4c1c835c1d1d2594b34b55026a015b3f13afb477":["2fc361419eab9d1ac199a5f3dd0a7231f53a9e20"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["2fc361419eab9d1ac199a5f3dd0a7231f53a9e20","4c1c835c1d1d2594b34b55026a015b3f13afb477"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"fb13dd414f655a70c821300dea007cb565533e03":["2fc361419eab9d1ac199a5f3dd0a7231f53a9e20"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb13dd414f655a70c821300dea007cb565533e03"],"2fc361419eab9d1ac199a5f3dd0a7231f53a9e20":["4c1c835c1d1d2594b34b55026a015b3f13afb477","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a851824c09818632c94eba41e60ef5e72e323c8e":[],"4c1c835c1d1d2594b34b55026a015b3f13afb477":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["a851824c09818632c94eba41e60ef5e72e323c8e"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a851824c09818632c94eba41e60ef5e72e323c8e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}