{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}