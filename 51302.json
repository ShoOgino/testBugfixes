{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testThreeMultiTerms().mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testThreeMultiTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testThreeMultiTerms() throws Exception {\n    searchAndCheckResults(field(0), 100, \"t*\", \"ut?pi?\", \"e*\");\n    assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n    assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n    assertEquals(4, TestCounters.get().segmentUseCount);\n    assertEquals(1, TestCounters.get().segmentSkipCount);\n\n    searchAndCheckResults(field(0), 100, \"t?e\", \"u*\", \"e*\");\n    assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n    assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n    assertEquals(4, TestCounters.get().segmentUseCount);\n    assertEquals(1, TestCounters.get().segmentSkipCount);\n\n    expectDifferentScoreForSpanNearQueryWithMultiTermSubset(() -> {\n      searchAndCheckResults(field(0), 100, \"t?e\", \"b*\", \"b*\");\n      assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n      assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n      assertEquals(4, TestCounters.get().segmentUseCount);\n      assertEquals(1, TestCounters.get().segmentSkipCount);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fbbbb4892d97137c84d62762ee9283c8f32f247","date":1574942156,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testThreeMultiTerms().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testThreeMultiTerms().mjava","sourceNew":"  public void testThreeMultiTerms() throws Exception {\n    searchAndCheckResults(field(0), 100, \"t*\", \"ut?pi?\", \"e*\");\n    assertCounters().singleTermAnalysis(0).multiTermAnalysis(3).segmentUse(4).segmentSkip(1);\n\n    searchAndCheckResults(field(0), 100, \"t?e\", \"u*\", \"e*\");\n    assertCounters().singleTermAnalysis(0).multiTermAnalysis(3).segmentUse(4).segmentSkip(1);\n\n    expectDifferentScoreForSpanNearQueryWithMultiTermSubset(() -> {\n      searchAndCheckResults(field(0), 100, \"t?e\", \"b*\", \"b*\");\n      assertCounters().singleTermAnalysis(0).multiTermAnalysis(3).segmentUse(4).segmentSkip(1);\n    });\n  }\n\n","sourceOld":"  public void testThreeMultiTerms() throws Exception {\n    searchAndCheckResults(field(0), 100, \"t*\", \"ut?pi?\", \"e*\");\n    assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n    assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n    assertEquals(4, TestCounters.get().segmentUseCount);\n    assertEquals(1, TestCounters.get().segmentSkipCount);\n\n    searchAndCheckResults(field(0), 100, \"t?e\", \"u*\", \"e*\");\n    assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n    assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n    assertEquals(4, TestCounters.get().segmentUseCount);\n    assertEquals(1, TestCounters.get().segmentSkipCount);\n\n    expectDifferentScoreForSpanNearQueryWithMultiTermSubset(() -> {\n      searchAndCheckResults(field(0), 100, \"t?e\", \"b*\", \"b*\");\n      assertEquals(0, TestCounters.get().singleTermAnalysisCount);\n      assertEquals(3, TestCounters.get().multiTermAnalysisCount);\n      assertEquals(4, TestCounters.get().segmentUseCount);\n      assertEquals(1, TestCounters.get().segmentSkipCount);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fbbbb4892d97137c84d62762ee9283c8f32f247"]},"commit2Childs":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["4fbbbb4892d97137c84d62762ee9283c8f32f247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}